<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>EnglishLearning-Life</title>
    <link href="/wuhlan3/2024/04/10/EnglishStudy2/"/>
    <url>/wuhlan3/2024/04/10/EnglishStudy2/</url>
    
    <content type="html"><![CDATA[<h1>1. Words</h1><ul><li><input type="checkbox" id="checkbox0"><label for="checkbox0">spouse：配偶；娶</label></li><li><input type="checkbox" id="checkbox1"><label for="checkbox1">recipient：接受者</label></li><li><input type="checkbox" id="checkbox2"><label for="checkbox2">have a crush on：对…心动</label></li><li><input type="checkbox" id="checkbox3"><label for="checkbox3">‘Van Life’：Van面包车、小货车。</label></li><li><input type="checkbox" id="checkbox4"><label for="checkbox4">camper van：房车</label></li><li><input type="checkbox" id="checkbox5"><label for="checkbox5">glorify：吹嘘、吹捧</label></li><li><input type="checkbox" id="checkbox6"><label for="checkbox6">picturesque：生动的、古色古香的</label></li><li><input type="checkbox" id="checkbox7"><label for="checkbox7">sprawl：蔓延，伸开四肢坐。sprawl out葛优瘫</label></li><li><input type="checkbox" id="checkbox8"><label for="checkbox8">parking lot：停车场</label></li><li><input type="checkbox" id="checkbox9"><label for="checkbox9">snippet：一小段，片段</label></li><li><input type="checkbox" id="checkbox10"><label for="checkbox10">hashtag：话题标签</label></li><li><input type="checkbox" id="checkbox11"><label for="checkbox11">fad：一时的风尚、三分钟热度</label></li><li><input type="checkbox" id="checkbox12"><label for="checkbox12">crimson sunset：crimson深红的。绯红日落</label></li></ul><h1>2. Sentences</h1><blockquote><p>As someone who has always been drawn to the fantasy-like world of van life, I gave the lifestyle a try for a weekend in January. I rented a van and went on a mini road trip.</p></blockquote><blockquote><p>It’s a photo op.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EnglishLearning-Technology</title>
    <link href="/wuhlan3/2024/04/08/EnglishStudy/"/>
    <url>/wuhlan3/2024/04/08/EnglishStudy/</url>
    
    <content type="html"><![CDATA[<h1 id="words">1. Words</h1><ul class="task-list"><li><label><input type="checkbox" />Hemisphere:半球；大脑半球</label></li><li><label><input type="checkbox" />neuroanatomy:神经解剖学</label></li><li><label><input type="checkbox" />neuroscience: 神经科学</label></li><li><label><input type="checkbox" />interplay: 交互</label></li><li><label><input type="checkbox" />metaphor: 隐喻</label></li><li><label><input type="checkbox" />conceptualization:概念化</label></li><li><label><input type="checkbox" />dichotomy:一分为二；二分法</label></li><li><label><input type="checkbox" />nuanced: 微妙的</label></li><li><label><input type="checkbox" />ill-informed:了解不够的；信息不足的</label></li><li><label><input type="checkbox" />notion: 观念</label></li><li><label><input type="checkbox" />rigid: 僵硬的；固化的</label></li><li><label><input type="checkbox" />akin to: 与...类似</label></li><li><label><input type="checkbox" />aids: 辅助手段；艾滋</label></li><li><label><input type="checkbox" />advent: 到来</label></li><li><label><input type="checkbox" />multimodal capabilities:多模态能力</label></li><li><label><input type="checkbox" />leap: 飞跃；跳跃</label></li><li><label><input type="checkbox" />sensory limitation:感知局限</label></li><li><label><input type="checkbox" />intergrate and interpret data:整合和解读文本</label></li><li><label><input type="checkbox" />auditory:听的；听觉；听众</label></li><li><label><input type="checkbox" />transcend: 超越</label></li><li><label><input type="checkbox" />possess: 具有；影响</label></li><li><label><input type="checkbox" />fusion: 融合，结合</label></li><li><label><input type="checkbox" />modality:形态；情态；形式</label></li><li><label><input type="checkbox" />imperceptible:无法察觉的</label></li><li><label><input type="checkbox" />amplifier: 放大；增强</label></li><li><label><input type="checkbox" />perceptual: 知觉的</label></li><li><label><input type="checkbox" />halve：把...对半分</label></li><li><label><inputtype="checkbox" />underweight：体重不足的（与obesity相对）</label></li><li><label><inputtype="checkbox" />malnutrition：营养不良的</label></li><li><label><input type="checkbox" />stand apart：孤立存在</label></li><li><label><input type="checkbox" />intricately：错综复杂地</label></li><li><label><input type="checkbox" />wove：交织</label></li><li><label><inputtype="checkbox" />distill：蒸馏法，提取精华</label></li><li><label><inputtype="checkbox" />imperceptible：（小得）无法察觉的</label></li></ul><h1 id="sentences">2. Sentences</h1><blockquote><p>Howerver, the emergence of LLMs and the synergistics impact of humancognition got me thinking.</p></blockquote><blockquote><p>In the interplay of cognitive neuroscience and artificialintellegence, the metaphor of a "third hemisphere" might provide aninteresting framework for understanding the integration of LLMs withhuman cognitive processes.</p></blockquote><blockquote><p>Perhaps, the conventional dichotomy of human and AI interactionsmight be as ill-informed as the prior notion of rigid left-brain,right-brain separation that was held in the past.</p></blockquote><blockquote><p>The advent of multimodal capabilities in LLMs may contribute to asignificant leap beyond human sensory limitations.</p></blockquote><blockquote><p>By intergrating and interpreting data across diverse "sensory" inputs-- textual, visual, auditory, and more -- LLMs possess the uniqueability to synthesize information in ways that transcend our naturalsensory boundaries.</p></blockquote><blockquote><p>Such an expansion amplifies our perceptual capabilities and enrichesour interaction with the world, offering a broader, more interconnectedperspective of complex phenomena that were previously beyond our sensoryand cognitive reach.</p></blockquote><blockquote><p>This "third hemisphere" does not stand apart but is intricately woveninto the fabric of human intellect, enhancing our ability to processinformation, solve problems, and generate creative outputs.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>IELTS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mosquitto原理与实践</title>
    <link href="/wuhlan3/2023/02/10/MQTT%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/wuhlan3/2023/02/10/MQTT%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1>Mosquitto-test</h1><h2 id="一、运行方式">一、运行方式</h2><p>打开三个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">mosquitto broker:</span><br>./mosquitto -c mosquitto.conf -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mosquitto sub:</span><br>./mosquitto_sub -h localhost -t &quot;hello&quot; -i &quot;sub1&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mosquitto pub:</span><br>./mosquitto_pub -h localhost -t &quot;hello&quot; -m &quot;hello,world&quot; -i &quot;pub&quot;<br></code></pre></td></tr></table></figure><h2 id="二、常用参数说明">二、常用参数说明</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-h</td><td>服务器主机，默认localhost</td></tr><tr><td>-t</td><td>指定主题</td></tr><tr><td>-u</td><td>用户名</td></tr><tr><td>-P</td><td>密码</td></tr><tr><td>-i</td><td>客户端id，唯一</td></tr><tr><td>-m</td><td>发布的消息内容</td></tr></tbody></table><h2 id="三、Bug-Warning">三、Bug/Warning</h2><ol><li><p><code>Warning: Mosquitto should not be run as root/administrator.</code></p><p>最好不要以root的身份来运行Mosquitto代理，可以换一个用户，如<code>Wuhlan</code>，同时mosquitto.config里的<code>user root</code>也要修改为<code>user Wuhlan</code></p></li><li><p><code>Library /lib/libmosquittopp.so can not find symbol: _ZdlPvj</code></p><p>编译成功，运行失败。这个报错大概的意思应该是libmosquittopp.so找不到入口，导致的原因是我在配置链接方式的时候，多链接了这个库。</p></li></ol><h2 id="四、MQTT的基本原理">四、MQTT的基本原理</h2><p>MQTT 是一个轻量级协议，使用基于 TCP/IP 协议的发布/订阅消息转发模式，在物联网应用中大规模使用。以Broker代理服务器作为中转站，客户端之间通过消息订阅和推送的方式来进行通信。如下图所示：</p><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/MQTT%E5%8E%9F%E7%90%86%E5%9B%BE.drawio.png" alt="MQTT原理"></p><p>mosquitto结构体，它保存了客户端连接broker的相关参数。如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mosquitto</span> &#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WIN32</span><br>    <span class="hljs-type">int</span> sock; <span class="hljs-comment">/*服务器程序与该客户端连接通信所用的socket描述符*/</span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> WITH_BROKER</span><br>    <span class="hljs-type">int</span> sockpairR, sockpairW;<br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    SOCKET sock;<br><span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> WITH_BROKER</span><br>    SOCKET sockpairR, sockpairW;<br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">mosquitto_protocol</span> <span class="hljs-title">protocol</span>;</span><br>    <span class="hljs-type">char</span> *address;<span class="hljs-comment">/*该客户端的IP地址*/</span><br>    <span class="hljs-type">char</span> *id;<span class="hljs-comment">/*该客户端登陆mosquitto程序时所提供的ID值，该值与其他的客户端不能重复*/</span><br>    <span class="hljs-type">char</span> *username;<span class="hljs-comment">/*登录用户名*/</span><br>    <span class="hljs-type">char</span> *password;<span class="hljs-comment">/*密码*/</span><br>    <span class="hljs-type">uint16_t</span> keepalive;<span class="hljs-comment">/*该客户端需在此时间内向mosquitto服务器程序发送一条ping/ping消息*/</span><br>    <span class="hljs-type">uint16_t</span> last_mid;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">mosquitto_client_state</span> <span class="hljs-title">state</span>;</span><br>    <span class="hljs-type">time_t</span> last_msg_in;<span class="hljs-comment">/*last_msg_in和last_msg_out用于记录上次收发消息的时间*/</span><br>    <span class="hljs-type">time_t</span> last_msg_out;<br>    <span class="hljs-type">time_t</span> <span class="hljs-type">ping_t</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mosquitto_packet</span> <span class="hljs-title">in_packet</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mosquitto_packet</span> *<span class="hljs-title">current_out_packet</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mosquitto_packet</span> *<span class="hljs-title">out_packet</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mosquitto_message</span> *<span class="hljs-title">will</span>;</span><br>        ...<br>    <span class="hljs-type">bool</span> want_write;<br>    <span class="hljs-type">bool</span> want_connect;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(WITH_THREADING) &amp;&amp; !defined(WITH_BROKER)</span><br>    <span class="hljs-type">pthread_mutex_t</span> callback_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> log_callback_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> msgtime_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> out_packet_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> current_out_packet_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> state_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> in_message_mutex;<br>    <span class="hljs-type">pthread_mutex_t</span> out_message_mutex;<br>    <span class="hljs-type">pthread_t</span> thread_id;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">bool</span> clean_session;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> WITH_BROKER</span><br>    <span class="hljs-type">bool</span> is_dropping;<br>    <span class="hljs-type">bool</span> is_bridge;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mqtt3_bridge</span> *<span class="hljs-title">bridge</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mosquitto_client_msg</span> *<span class="hljs-title">msgs</span>;</span><span class="hljs-comment">/*用于暂时存储发往该context的消息。*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mosquitto_client_msg</span> *<span class="hljs-title">last_msg</span>;</span><br>    <span class="hljs-type">int</span> msg_count;<br>    <span class="hljs-type">int</span> msg_count12;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mosquitto_acl_user</span> *<span class="hljs-title">acl_list</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mqtt3_listener</span> *<span class="hljs-title">listener</span>;</span><br>    <span class="hljs-type">time_t</span> <span class="hljs-type">disconnect_t</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mosquitto_packet</span> *<span class="hljs-title">out_packet_last</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">mosquitto_subhier</span> **<span class="hljs-title">subs</span>;</span><br>    <span class="hljs-type">int</span> sub_count;<br>    <span class="hljs-type">int</span> pollfd_index;<br>...<br>&#125;;<br></code></pre></td></tr></table></figure><p>常用的相关函数如下：</p><table><thead><tr><th>函数名称</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>mosquitto_lib_init()</td><td>使用mosquitto库的函数前，要先进行初始化</td><td></td></tr><tr><td>mosquitto_lib_cleanup()</td><td>使用完mosquitto库的函数后，要进行相关的清除操作</td><td></td></tr><tr><td>mosquitto_new()</td><td>创建一个新的mosquitto客户端实例，使用完后一定要使用mosquitto_destroy()释放相关内存</td><td>id需要设置一下，否则可能出现意想不到的错误。设置为 true 可指示代理在断开连接时清除所有消息和订阅，设置为 false 以指示代理保留它们。</td></tr><tr><td>mosquitto_destroy()</td><td>用于释放与 mosquitto 客户端实例关联的内存</td><td></td></tr><tr><td>mosquitto_connect_callback_set()</td><td>设置连接回调。当代理发送 CONNECCT ACK 消息以响应连接时，将调用此消息</td><td>第二个参数为回调函数</td></tr><tr><td>mosquitto_disconnect_callback_set()</td><td>设置断开连接回调。当代理收到断开连接命令并断开客户端连接时，将调用此选项</td><td>第二个参数为回调函数</td></tr><tr><td>mosquitto_publish_callback_set()</td><td>设置发布回调。当使用 mosquitto_publish 启动的消息已成功发送到代理时，将调用此选项</td><td>第二个参数为回调函数</td></tr><tr><td>mosquitto_subscribe_callback_set()</td><td>设置订阅回调。当代理响应订阅请求时，将调用此函数</td><td>第二个参数为回调函数</td></tr><tr><td>mosquitto_message_callback_set()</td><td>设设置消息回调。当从代理接收到消息时，将调用此函数</td><td>第二个参数为回调函数</td></tr><tr><td>mosquitto_loop_forever()</td><td>此函数在无限阻塞循环中调用 loop（）。对于只想在程序中运行 MQTT 客户机循环的情况，它非常有用。它处理服务器连接丢失时的重新连接。如果在回调中调用 mosquitto_disconnect（），它将返回</td><td></td></tr><tr><td>mosquitto_loop_start()</td><td>网络事件循环处理函数，客户端通过创建新的线程不断调用mosquitto_loop()函数来处理网络事件，该函数<strong>非阻塞</strong></td><td></td></tr><tr><td>mosquitto_loop_stop()</td><td>这是线程化客户端接口的一部分。调用此命令一次以停止以前使用mosquitto_loop_start创建的网络线程。此调用将<strong>阻塞</strong>，直到网络线程完成。要结束网络线程，必须先前调用 mosquitto_disconnect 或已将 force 参数设置为 true</td><td></td></tr></tbody></table><h2 id="五、参考资料">五、参考资料</h2><p>[1] <a href="https://blog.csdn.net/qq_57398262/article/details/124231147">mosquitto库常用的相关函数解析</a></p><p>[2] <a href="https://blog.csdn.net/Dancer__Sky/article/details/77855249?spm=1001.2101.3001.6650.6&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-6-77855249-blog-123193183.pc_relevant_aa2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-6-77855249-blog-123193183.pc_relevant_aa2&amp;utm_relevant_index=7">基于MQTT协议的Mosquitto的使用及libmosquitto客户端编程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关键字static</title>
    <link href="/wuhlan3/2022/09/14/%E5%85%B3%E9%94%AE%E5%AD%97static/"/>
    <url>/wuhlan3/2022/09/14/%E5%85%B3%E9%94%AE%E5%AD%97static/</url>
    
    <content type="html"><![CDATA[<h1>关键字static</h1><blockquote><p>最近的面试都有涉及到，所以来深入汇总一下它的特点</p></blockquote><ol><li>三大特性</li><li>生命周期</li><li>作用范围</li><li>类中的特点</li></ol><h2 id="1-三大特性">1. 三大特性</h2><h4 id="1-1-隐藏">1.1 隐藏</h4><blockquote><p>const关键字也和static一样，有隐藏的作用。仅作用于本文件，避免同名的冲突。</p></blockquote><p>当同时编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。</p><h4 id="1-2-初始化为0">1.2 初始化为0</h4><p>其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。</p><h4 id="1-3-持久化">1.3 持久化</h4><p>（static变量中的记忆功能和全局生存期）存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。共有两种变量存储在<strong>静态存储区</strong>：全局变量和static变量，只不过和全局变量比起来，static可以控制变量的可见范围，说到底static还是用来隐藏的。</p><h2 id="2-生命周期">2. 生命周期</h2><ul><li><strong>非静态局部变量</strong>的生命周期是：进入作用域生命周期开始，出作用域生命周期结束</li><li><strong>全局变量</strong>和<strong>静态变量</strong>的生命周期是：整个程序的生命周期</li></ul><table><thead><tr><th>生命周期</th><th>无static</th><th>有static</th></tr></thead><tbody><tr><td>局部变量</td><td>进入作用域生命周期开始，出作用域生命周期结束</td><td>整个程序的生命周期</td></tr><tr><td>全局变量</td><td>整个程序的生命周期</td><td>整个程序的生命周期</td></tr><tr><td>类中成员变量</td><td>每个对象都有一份拷贝</td><td>属于整个类所有，所有对象只有一份拷贝</td></tr></tbody></table><h2 id="3-作用范围">3. 作用范围</h2><ul><li>静态与非静态局部变量限制在局部范围内，</li><li>非静态全局变量作用于整个工程，静态全局变量作用于当前文件；</li><li>非静态函数，可在其他文件中引用；静态函数只能在当前文件中使用</li></ul><table><thead><tr><th>作用范围</th><th>无static</th><th>有static</th></tr></thead><tbody><tr><td>局部变量</td><td>局部范围</td><td>局部范围</td></tr><tr><td>全局变量</td><td>整个工程</td><td>当前文件</td></tr><tr><td>函数</td><td>可在其他文件中引用</td><td>仅在当前文件中使用</td></tr><tr><td>类成员变量</td><td>与对象绑定</td><td>可直接调用，不需要new一个对象</td></tr><tr><td>类成员函数</td><td>与对象绑定</td><td>可直接调用，不需要new一个对象</td></tr></tbody></table><h2 id="4-类中的static其他特性">4. 类中的static其他特性</h2><ol><li>static<strong>类成员变量</strong>必须要在类外进行初始化，static修饰的变量先于对象存在，所以static修饰的变量要在类外初始化；</li><li>由于static修饰的<strong>类成员函数</strong>属于类，不属于对象，因此static类成员函数是没有this指针的，this指针是指向本对象的指针。<strong>正因为没有this指针，所以static类成员函数不能访问非static的类成员，只能访问 static修饰的类成员</strong>；非static函数，既可以访问非static成员也可以访问static成员</li><li>static<strong>类成员函数</strong>不能被virtual修饰，static成员不属于任何对象或实例，所以加上virtual没有任何实际意义；静态成员函数没有this指针，虚函数的实现是为每一个对象分配一个vptr指针，而vptr是通过this指针调用的，所以不能为virtual；虚函数的调用关系，<code>this-&gt;vptr-&gt;ctable-&gt;virtual function</code></li></ol><p>可以看一下static典型的使用例子，饿汉式的单例模式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//static成员函数只能够访问static成员变量</span><br>        <span class="hljs-keyword">return</span> &amp;s_instance;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()&#123;&#125;<br>    ~<span class="hljs-built_in">Singleton</span>()&#123;&#125;<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton &amp;) = <span class="hljs-keyword">delete</span>;<br>       Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton &amp;) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton s_instance;<br>&#125;;<br><br>Singleton Singleton::s_instance;    <span class="hljs-comment">//在程序入口之前就完成单例对象的初始化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抖声项目汇总</title>
    <link href="/wuhlan3/2022/08/07/%E6%8A%96%E5%A3%B0%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/wuhlan3/2022/08/07/%E6%8A%96%E5%A3%B0%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1>抖声项目汇总</h1><p>单体架构仓库：<a href="https://github.com/Wuhlan3/dousheng">https://github.com/Wuhlan3/dousheng</a></p><p>微服务架构仓库：<a href="https://github.com/Wuhlan3/kitexdousheng">https://github.com/Wuhlan3/kitexdousheng</a></p><h2 id="一、简单介绍一下你的项目？">一、简单介绍一下你的项目？</h2><p>本项目的一些素材来源于字节跳动后端训练营，他们提供了一个抖声客户端，并且规范了可以实现的一些接口，包括用户登陆与注册、视频流、评论功能、点赞功能、关注功能等等。在训练营期间，我曾担任小组的队长，由于同小组有较多大一大二的同学，所以负责了该项目单体架构的设计、数据库表的设计、大部分接口的功能实现。最终该项目取得了较好的成绩。之后，我和舍友也尝试使用在青训营所学的知识，使用字节跳动的微服务架构KiteX框架来重新实现该项目，并且完善缓存机制、单元测试，完善了视频流的一些功能包括使用使用FFmpeg截取视频的封面、将视频通过存储桶来进行管理等等。</p><h2 id="二、你主要做了哪些工作呢？">二、你主要做了哪些工作呢？</h2><ol><li>项目的整体设计（这主要是参考了一下KiteX框架下提供的一个笔记服务的样例，参照其文件的架构设计的）</li><li>数据库的设计和ER图的绘制也是我做的；</li><li>较完善的参数校验，对密码进行加密，使用JWT鉴权；</li><li>视频流的相关实现计包括将视频和封面上传到腾讯云COS对象存储桶，使用FFmpeg截取视频的封面；</li><li>使用Redis来减少访问数据库的次数</li></ol><h2 id="三、本项目你遇到的最大困难是什么，如何解决的？">三、本项目你遇到的最大困难是什么，如何解决的？</h2><p>我认为本项目最复杂的、也是最有必要认真实现的模块就是视频流的设计。</p><ol><li>视频封面的获取，ffmpeg；</li><li>视频的存储方式——上传至腾讯云对象存储，并将对应的URL存放到数据库中（尝试过直接存储云服务器的本地文件夹中，但是由于带宽问题，且管理起来比较混乱，导致效果非常差）</li><li>Redis的设计，涉及到两种数据结构ZSET和HASH，其中ZSET保存了视频的id和发布的时间latestTime(作为score)。在获取视频流的时候，我们首先通过获取最近发布的30个视频，之后根据视频ID再从Redis中获取视频相应的信息；优化之后，通过压力测试可以发现，报文返回的速度从100ms提升到50ms。</li><li>但是发现真正的卡顿问题出现在视频文件的传输上，考虑到我的云服务器是比较小型的服务器，2核2G的，带宽也比较有限，所以我尝试将视频上传到云服务器上。</li><li>同时使用了ffmpeg对视频进行处理，包括格式的转换，视频封面的获取等等。</li><li>最终使得客户端程序在运行的情况体验比较正常</li></ol><h2 id="四、数据库表是如何设计的？">四、数据库表是如何设计的？</h2><p>主要涉及六张表，分别是user、relation、video、favorite、comment和publish。</p><p>其中，我认为最重要的两个实体是用户和视频，其他的表可以看作是这两者之间的关系。</p><p>用户表包括用户ID、账号、密码、关注数、被关注数等信息；</p><p>video表包括ID、视频封面的URL、视频URL、视频名称、上传者的ID、点赞数等信息；</p><p>…</p><p>此外，还对外键依赖、非空、唯一性等约束进行了设计。为了提高查询效率，适当的生成了索引。比如说，视频的上传者ID，点赞表中的 user_id和video_id作为联合索引。</p><h2 id="六、整体架构是怎么设计的？">六、整体架构是怎么设计的？</h2><p>使用了Gin框架来开放HTTP端口，通过封装好的RPC客户端与微服务中的服务端进行通信。</p><p>RPC服务端通过接收客户端的请求，在各自的进程中完成业务逻辑和数据库的交互。</p><p>数据库层面使用了Redis缓存机制，使用MySQL进行持久化。</p><p>序列化手段一般包括JSON、ProtoBuf、thrift等。抖声客户端与服务器的交互直接采用的JSON，而RPC通信过程中使用了ProtoBuf来进行序列化。</p><blockquote><p>JSON，ProtoBuf，thrift之间的区别是什么呢？</p><p>ProtoBuf无论是序列化和反序列化的速度，还是编码后的数据大小，都比JSON优秀很多，但是其可见性较差。因此在微服务之间通信时，protobuf 更合适，在公开 API 或与浏览器通信时JSON 与 xml 更合适。</p><p>protobuf与thrift的对比：</p><table><thead><tr><th></th><th>protobuf</th><th>thrift</th></tr></thead><tbody><tr><td>功能特性</td><td>主要是一种序列化机制</td><td>提供了全套RPC解决方案，包括序列化机制、传输层、并发处理框架等</td></tr><tr><td>支持语言</td><td>C++/Java/Python</td><td>C++, Java, Python, Ruby, Perl, PHP, C#, Erlang, Haskell</td></tr><tr><td>易用性</td><td>语法类似，使用方式等类似</td><td></td></tr><tr><td>生成代码的质量</td><td>可读性都还过得去，执行效率另测</td><td></td></tr><tr><td>升级时版本兼容性</td><td>均支持向后兼容和向前兼容</td><td></td></tr><tr><td>学习成本</td><td>功能单一，容易学习</td><td>功能丰富、学习成本高</td></tr><tr><td>文档&amp;社区</td><td>官方文档较为丰富，google搜索protocol buffer有2000W+结果，google group被墙不能访问</td><td>官方文档较少，没有API文档，google搜索apache thrift仅40W结果，邮件列表不怎么活跃</td></tr></tbody></table></blockquote><h2 id="七、微服务架构相比于单体架构，优点体现在哪里？">七、微服务架构相比于单体架构，优点体现在哪里？</h2><p>微服务架构的优点如下：</p><ol><li><strong>单一职责</strong>。每个服务都有自己独立的业务逻辑，是一个高内聚、低耦合、单一原则的单元。</li><li><strong>轻量级通信</strong>。服务之间用过轻量级的通信机制实现互联互通，通常是语言无关、平台无关的交互方式；</li><li><strong>独立性</strong>。每个服务可以独立地进行开发、测试和部署；</li><li><strong>进程隔离</strong>。每个服务高度自治，可以部署到不同的主机上。当其中一个服务挂掉时，不会影响其他服务。</li></ol><p>使用微服务的一个好处就是，不限定服务的提供方使用什么技术选型，能够实现公司跨团队的技术解耦。但是这样子，如果没有一个统一的服务框架——RPC框架，则各个团队需要各自实现一套序列化、反序列化、网络框架、连接池、收发线程、超时处理等业务之外的重复技术劳动。统一RPC框架将上述的劳动进行了统一处理。</p><h2 id="八、ETCD是什么？">八、ETCD是什么？</h2><p>ETCD是Go语言开发的一个开源的、高可用的分布式key-value存储系统。</p><p>微服务在ETCD注册中心中注册好自己的相关信息，之后api层可以通过ETCD来获取相应微服务的ip地址和端口号，从而发起RPC调用。</p><h2 id="九、有没有对该项目的性能进行测试？">九、有没有对该项目的性能进行测试？</h2><p>由于环境的限制，在两核2G的小型云服务器环境下，在30秒内5000个客户端的情况下，可以处理40000个请求。之后还会继续完善测试。</p><h2 id="十、JWT相关原理">十、JWT相关原理</h2><p>是作为中间件来使用的，大部分的HTTP接口都需要JWT校验通过之后，才能够进行下一步的业务逻辑处理。</p><p>JWT的实现原理：</p><ol><li>用户登录的时候，会将账号和密码发送给服务器；</li><li>服务器验证账号密码的有效性后，会返回签名后的token给客户端；</li><li>客户端将token存储在本地存储中</li><li>之后客户端的请求，都应该携带上token，服务端在对token解码之后，判断其解码的有效性，从而认证客户的身份。</li></ol><blockquote><p>签名的过程：</p><p>首先JWT的结构如下：</p><ul><li>头部：包含了基本信息；基于Base64编码规则</li><li>荷载：包含了签发者、用户、接收方、过期时间等等；基于Base64编码规则</li><li>签名：使用<strong>HS256算法</strong>来对（头部和荷载）进行加密。（作用是防止篡改）</li></ul></blockquote><h2 id="十一、RPC的原理">十一、RPC的原理</h2><p>参考：<a href="https://wuhlan3.gitee.io/wuhlan3/2022/08/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/">https://wuhlan3.gitee.io/wuhlan3/2022/08/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</a></p><h2 id="十二、Gin有什么特点？">十二、Gin有什么特点？</h2><ol><li>路由</li><li>context上下文，方便传递</li><li></li></ol><h2 id="十三、你的项目中使用到了什么设计模式？">十三、你的项目中使用到了什么设计模式？</h2><ol><li><p>在repository层使用了<strong>单例模式</strong>。比如说我们给UserDao绑定了Query、Update等方法，在每次调用的时候，我们都返回userDao这个单例对象，而避免重复生成，消耗额外的资源。（对于每个线程，可共享一个实例）</p></li><li><p>在service层，我们使用了<strong>简单工厂模式</strong>，比如说对于userlogin这个模块，我们定义了一个UserLoginFlow的对象，每次调用它的方法，我们首先要根据所需的参数new出这一个对象，之后做参数校验、逻辑处理等工作。简单工厂模式可以确保我们创建的实例具有需要的参数，进而保证实例的方法可以按预期执行</p><blockquote><ol><li><p>工厂类含有必要的判断逻辑,可以决定在什么时候创建哪一个产品类的实例,<strong>客户端可以免除直接创建产品对象的责任</strong>,而仅仅“消费”产品;</p></li><li><p>简单工厂模式通过这种做法实现了<strong>对责任的分割</strong>,它提供了专门的工厂类用于创建对象。</p></li><li><p>客户端无须知道所创建的具体产品类的类名,<strong>只需要知道具体产品类所对应的参数即可</strong>,对于一些复杂的类名,通过简单工厂模式可以<strong>减少使用者的记忆量</strong>。</p></li><li><p>通过引入配置文件,<strong>可以在不修改任何客户端代码的情况下更换和增加新的具体产品类</strong>,在一定程度上提高了系统的灵活性。</p></li></ol></blockquote></li></ol><h2 id="十四、代码行数">十四、代码行数</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//算上kitexgen自动生生成的有9218行</span><br>find . <span class="hljs-string">&quot;(&quot;</span> -name <span class="hljs-string">&quot;*.go&quot;</span>  <span class="hljs-string">&quot;)&quot;</span> -print | xargs wc -l<br><span class="hljs-comment">//如果不算，有3702行</span><br>find cmd config pkg <span class="hljs-string">&quot;(&quot;</span> -name <span class="hljs-string">&quot;*.go&quot;</span>  <span class="hljs-string">&quot;)&quot;</span> -print | xargs wc -l<br></code></pre></td></tr></table></figure><h2 id="十五、怎么测试抖音">十五、怎么测试抖音</h2><blockquote><p>基本思路：</p><ol><li>回答功能层面的测试点（最重要的）</li><li>之后拓展到 UI测试、兼容性测试、易用性测试、可移植性测试、性能测试等等。</li></ol></blockquote><p>功能测试的中的概念就在于寻找输入口：</p><ol><li>上拉测试，视频是否加载、用户名称、title、点赞数、收藏数是否符合预期</li><li>下拉测试；</li><li>多次上拉，查看是否不同的视频</li><li>多次上拉，查看视频是否按照规定的顺序切换：（比如我的项目中采用的是上传时间）</li><li>点赞，查看点赞数是否增加；在关闭程序后，再次查看该视频，看点赞数是否持久化。</li><li>关注，测试过程与点赞类似。但是除了查看我的关注数是否增加外，还需要查看对方的页面，被关注数是否增加。同时还要查看关注和被关注列表</li><li>关闭App后，视频是否会重复推荐，是否影响正常的体验。</li></ol><p>UI测试：UI是否维持它原有的状态；界面是否美观、颜色搭配是否合理、布局是否合理、按钮大小位置是否合适、文字大小颜色搭配是否合适。</p><p>兼容性测试：在不同的手机型号、不同的分辨率下、不同的操作系统，测试效果如何。</p><p>易用性测试：是否由明显的提示，用户是否可以在点击三次鼠标内就达到目的；评论功能的复制粘贴。</p><p>性能测试：视频加载的速度。视频上传的速度。</p><p>安全性测试：登录验证码，记住密码，自动登录，找回密码，SQL注入问题，报文是否加密</p><p>中断测试：退出后再进来</p><p>网络测试：测试下在弱网，无网，4G，5G网络下面，这个功能是否还正常，有对应处理，比如无网就要提示等等。（有用过一些工具比如fiddler去模拟弱网等场景。）</p><h2 id="十六、项目中有没有使用到事务？">十六、项目中有没有使用到事务？</h2><p>有。Gorm中自动开启</p><h2 id="十七、Docker有什么特点？">十七、Docker有什么特点？</h2><p>Docker包括三个基本概念：</p><ol><li>docker镜像：就相当于是一个 root 文件系统。</li><li>docker容器：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>docker仓库：仓库可看成一个代码控制中心，用来保存镜像。</li></ol><p>docker的三大底座：</p><ol><li><p>namespace 命名空间：容器隔离的基础，保证A容器看不到B容器.</p></li><li><p>cgroups 控制组：主要用到的cgroups子系统：cpu，blkio，device，freezer，memory</p><p>实际上 Docker 是使用了很多 Linux 的隔离功能，让容器看起来像一个轻量级虚拟机在独立运行，容器的本质是被限制了的 Namespaces，cgroup，具有逻辑上独立文件系统，网络的一个进程。</p></li><li><p>unionfs 联合文件系统：是一种<strong>轻量级的高性能分层文件系统</strong>，支持将文件系统中的修改进行提交和层层叠加，这个特性使得镜像可以通过分层实现和继承。</p></li></ol><h2 id="十八、Docker和虚拟机的对比">十八、Docker和虚拟机的对比</h2><ol><li>虚拟机需要模拟整个机器包括硬件、库、一个完整的用户操作系统。而Docker是与宿主机共享硬件资源及操作系统，可以实现资源的动态分配。</li><li>虚拟机的启动在分钟级别、docker的启动在秒级别可以做到快速部署</li><li>docker需要的资源更少，在操作系统级别进行虚拟化，容器与内核的交互几乎没有额外的损耗</li><li>docker的隔离性更弱、安全性也更弱。属于进程之间的隔离。虚拟机可实现系统级别的隔离。docker与宿主机共享内核、文件系统等资源，更有可能对其他容器、宿主机造成影响。</li></ol><h2 id="十九、Dockerfile怎么写">十九、Dockerfile怎么写</h2><h2 id="二十、密码怎么加密的，使用了什么算法">二十、密码怎么加密的，使用了什么算法</h2><p>使用的是bcrypt中的一个库函数。就是一个加盐的过程。先生成一个随机数salt，然后和password一起进行hash。</p><blockquote><p>对同一个密码，每次生成的hash不一样，这是因为hash中包含了salt（hash产生过程：先随机生成salt，salt跟password进行hash）；<br>在下次校验时，从hash中取出salt，salt跟password进行hash；得到的结果跟保存在DB中的hash进行比对，compareSync中已经实现了这一过程：bcrypt.compareSync(password, hashFromDB);</p></blockquote><h2 id="二十一、登陆方式">二十一、登陆方式</h2><blockquote><p>cookie和session的查缺补漏</p><p>JWT加密方式：HS256，是对称加密算法</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>后端</tag>
      
      <tag>RPC</tag>
      
      <tag>微服务</tag>
      
      <tag>项目</tag>
      
      <tag>MySQL</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务与RPC问题汇总</title>
    <link href="/wuhlan3/2022/08/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/wuhlan3/2022/08/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1>微服务与RPC问题汇总</h1><h2 id="1-什么是微服务？">1. 什么是微服务？</h2><blockquote><p>wiki:<strong>微服务</strong>（英语：Microservices）是一种<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构风格</a>，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic）的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3">API</a>集相互通信。</p></blockquote><p>简单来说，微服务的架构风格就是将单个应用程序作为一组小型服务来开发，每个服务程序都在自己的进程中运行，并以轻量级通信方式进行通信。这些服务可以使用不同的编程语言编写，使用不同的数据存储技术，并尽量不用集中式方式进行管理。</p><p>用一句话来概括就是“分而治之，合而用之”。</p><h2 id="2-微服务与单体架构的对比？">2. 微服务与单体架构的对比？</h2><p>单体架构的缺点如下：</p><ol><li>复杂度随时间不断变大，代码量到几十万行的大项目难以维护；</li><li>技术债务逐渐上升，留下的bug越来越多；</li><li>耦合度太高，维护成本大——修复bug的时候引入新的bug；</li><li>部署、交付的时间长，新人熟悉环境、业务的时间越来越长；</li><li>技术选型成本高，后面想要引入新的技术或框架，成本和风险都很高；</li><li>可扩展性差。</li></ol><p>微服务架构的<strong>优点</strong>如下：</p><ol><li><strong>单一职责</strong>。每个服务都有自己独立的业务逻辑，是一个高内聚、低耦合、单一原则的单元。</li><li><strong>轻量级通信</strong>。服务之间用过轻量级的通信机制实现互联互通，通常是语言无关、平台无关的交互方式；</li><li><strong>独立性</strong>。每个服务可以独立地进行开发、测试和部署；</li><li><strong>进程隔离</strong>。每个服务高度自治，可以部署到不同的主机上。当其中一个服务挂掉时，不会影响其他服务。</li></ol><p>当然，微服务也有它的<strong>不足之处</strong>：</p><ol><li><strong>运行维护困难</strong>，任意一个模块的问题，可能会影响整个项目，debug困难；</li><li><strong>分布式的复杂性</strong>。会使得项目变得更复杂；</li><li><strong>接口成本高</strong>，若接口发生大变动，所有依赖的微服务都要发生调整；</li><li><strong>重复劳动</strong>。某段业务多个模块共同使用，如果是单体架构，可以抽象为一个工具类。但是微服务架构中每个服务都可能需要，会导致代码重复；</li><li><strong>业务不好分离</strong>。程序员对业务理解可能不同。</li></ol><h2 id="3-什么是RPC？">3. 什么是RPC？</h2><p>RPC(Remote Procedure Call Protocol)是远程过程调用的缩写。它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的思想。</p><p>比如，我们写这样一个代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Result</span> := Add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>它会调用远程的（另一个进程，很可能在另一台服务器上）函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-为什么微服务需要RPC">4. 为什么微服务需要RPC</h2><p>使用微服务的一个好处就是，不限定服务的提供方使用什么技术选型，能够实现公司跨团队的技术解耦。但是这样子，如果没有一个统一的服务框架——RPC框架，则各个团队需要各自实现一套序列化、反序列化、网络框架、连接池、收发线程、超时处理等业务之外的重复技术劳动。统一RPC框架将上述的劳动进行了统一处理。</p><h2 id="5-RPC的底层原理">5. RPC的底层原理</h2><h3 id="一个完整的RPC主要包括三部分">一个完整的RPC主要包括三部分:</h3><ol><li><p><strong>服务注册中心</strong>（Registry），负责将本地服务发布成远程服务，管理远程服务，提供给服务消费者使用。</p></li><li><p><strong>服务提供者</strong>（RPC Server），负责提供服务接口定义与服务实现类。</p></li><li><p><strong>服务消费者</strong>（RPC Client），负责通过远程代理对象调用远程服务。</p></li></ol><p>服务提供者（Server）启动后主动向服务注册中心（Registry）注册机器IP、端口以及提供的服务列表；服务消费者（Client）启动时向服务注册中心（Registry）获取服务提供方地址列表；服务注册中心（Registry）可实现负载均衡和故障切换。</p><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/972efe01322d49e5be8a42c2959438bc.png" alt="img"></p><h3 id="RPC调用过程为：">RPC调用过程为：</h3><ol><li>客户端想要发起一个远程过程调用，首先通过调用本地客户端Stub程序的方式调用想要使用的功能方法名；</li><li>客户端Stub程序接收到了客户端的功能调用请求，将客户端请求调用的方法名，携带的参数等信息做序列化操作，并打包成数据包。</li><li>客户端Stub查找到远程服务器程序的IP地址，调用Socket通信协议，通过网络发送给服务端。</li><li>服务端Stub程序接收到客户端发送的数据包信息，并通过约定好的协议将数据进行反序列化，得到请求的方法名和请求参数等信息。</li><li>服务端Stub程序准备相关数据，调用本地Server对应的功能方法进行，并传入相应的参数，进行业务处理。</li><li>服务端程序根据已有业务逻辑执行调用过程，待业务执行结束，将执行结果返回给服务端Stub程序。</li><li>服务端Stub程序将程序调用结果按照约定的协议进行序列化，并通过网络发送回客户端Stub程序。</li><li>客户端Stub程序接收到服务端Stub发送的返回数据，对数据进行反序列化操作，并将调用返回的数据传递给客户端请求发起者。</li><li>客户端请求发起者得到调用结果，整个RPC调用过程结束。</li></ol><h3 id="RPC要面临的三个问题">RPC要面临的三个问题:</h3><p>（1）<strong>Call ID映射</strong>。本地调用中，函数体是直接通过函数指针来指定的，调用函数时，编译器会自动调用它相应的函数指针。但在远程调用中，函数指针是不行的，因为两个进程的地址空间完全不一样。所以，在RPC中所有的函数都必须有自己的一个ID。这个ID在所有进程中都是唯一确定的。客户端在做远程过程调用时，必须附上这个ID。然后我们还需要在客户端和服务端分别维护一个 {函数 ：Call ID} 的对应表。两者的表不一定需要完全相同，但相同的函数对应的Call ID必须相同。当客户端需要进行远程调用时，它就查该表，找出相应的Call ID，然后把它传给服务端，服务端也通过查表，来确定客户端需要调用的函数，然后执行相应函数的代码。</p><p>（2）<strong>序列化和反序列化</strong>。客户端如何将参数值传给远程的函数就成了一个问题在本地调用中，只需要把参数压到栈里，函数自己去栈里读即可。在远程过程调用时，客户端跟服务端是不同的进程，不能通过内存来传递参数。甚至有时候客户端和服务端使用的都不是同一种语言（比如服务端用C++，客户端用Java或者Python）。这时需要客户端把参数先转成一个字节流，传给服务端后，再把字节流转成自己能读取的格式。这个过程叫序列化和反序列化（也叫编码和解码）。同理，从服务端返回的值也需要序列化反序列化的过程。</p><p>（3）<strong>网络传输</strong>。远程调用往往用在网络上，客户端和服务端是通过网络连接的。所有的数据都需要通过网络传输，因此就需要有一个网络传输层。网络传输层需要把Call ID和序列化后的参数字节流传给服务端，然后再把序列化后的调用结果传回客户端。只要能完成这两者的，都可以作为传输层使用。因此，它所使用的协议其实是不限的，能完成传输就行。尽管大部分RPC框架都使用TCP协议，但其实UDP也可以，而gRPC干脆就用了HTTP2，Java的Netty也属于这层的东西。</p><h3 id="RPC与HTTP协议的对比">RPC与HTTP协议的对比</h3><table><thead><tr><th></th><th>RPC</th><th>HTTP</th></tr></thead><tbody><tr><td>传输协议</td><td>可以基于TCP协议，也可以基于HTTP协议</td><td>基于HTTP协议</td></tr><tr><td>传输效率</td><td>RPC使用自定义的TCP协议，可以让请求报文体积更小，或者使用HTTP2协议，也可以很好的减少报文的体积，提高传输效率</td><td>如果是基于HTTP1.1的协议，请求中会包含很多无用的内容，如果是基于HTTP2.0，那么简单的封装一下是可以作为一个RPC来使用的，这时标准RPC框架更多的是服务治理</td></tr><tr><td>性能消耗</td><td>可以基于thrift实现高效的二进制传输</td><td>大部分是通过json来实现的，字节大小和序列化耗时都比thrift要更消耗性能</td></tr><tr><td>负载均衡</td><td>基本都自带了负载均衡策略</td><td>需要配置Nginx，HAProxy来实现</td></tr><tr><td>服务治理</td><td>能做到自动通知，不影响上游</td><td>需要事先通知，修改Nginx/HAProxy配置</td></tr><tr><td>总结</td><td>主要用于公司内部的服务调用，性能消耗低，传输效率高，服务治理方便。</td><td>主要用于对外的异构环境，浏览器接口调用，APP接口调用，第三方接口调用等。</td></tr></tbody></table><h2 id="6-什么是ProtoBuf">6. 什么是ProtoBuf</h2><p><strong>Protocol Buffers</strong> (Protobuf) 是一种谷歌开发的二进制通信格式，用于序列化结构数据，截至目前，谷歌使用 protobuf 已经超过十年了。<br>Protobuf 的出现并不是为了解决新的问题，而是<strong>用更加现代的方式让网络传输更加高效</strong>，总的来说它有如下几个特点：</p><ol><li>是<strong>二进制格式</strong>，而不是像 JSON 与 XML 是基于文本的，因此非常节省空间。</li><li>对各种模式丰富且易上手的支持。</li><li>支持多种语言下的解析。</li></ol><p><strong>原理</strong>：</p><ul><li><p>使用varint来表示数字，越小的数字占用越少的字节数。</p></li><li><p>使用msb（最高有效位）来进行标识，当msb为1时，下一个字节继续表示这个数字；当msb为0时，这是最后一个字节。</p></li><li><p>对于字符串而言，不需要msb，因为有表示string长度的字段。</p></li></ul><p><strong>具体流程</strong>（以数字2009为例）：</p><ol><li><p>将2009 转换为二进制 11111011001</p></li><li><p>将其分割为 0001111 1011001</p></li><li><p>反转其顺序 1011001 0001111</p></li><li><p>添加 MSB 标识为 01011001 00001111</p></li><li><p>设置MSB ，11011001 00001111</p></li></ol><p>最后用16进制表示为 D9 0F</p><p><strong>小结</strong>：</p><ol><li>在微服务之间通信时，protobuf 更合适，在公开 API 或与浏览器通信时JSON 与 xml 更合适。</li><li>protobuf 更加节省空间，高效。</li><li>protobuf 放弃了可读性。</li><li>protobuf 使用的编码方式可以使数据更加紧凑。</li><li>protobuf 依赖生成的代码，需要一个protobuf 编译器根据你编写的 .proto 定义的数据生成，也称作消息。</li><li>你可以根据生成的代码初始化或解析发生的数据或接受的数据。</li></ol><h2 id="7-几种框架的对比">7. 几种框架的对比</h2><p>待续</p><h1>参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_46742102/article/details/112169275">https://blog.csdn.net/weixin_46742102/article/details/112169275</a></p><p>[2] <a href="https://blog.csdn.net/weixin_41667472/article/details/124703669">https://blog.csdn.net/weixin_41667472/article/details/124703669</a></p><p>[3] <a href="https://zh.wikipedia.org/zh-cn/%E5%BE%AE%E6%9C%8D%E5%8B%99">https://zh.wikipedia.org/zh-cn/%E5%BE%AE%E6%9C%8D%E5%8B%99</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>RPC</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pprof性能分析</title>
    <link href="/wuhlan3/2022/07/31/pprof%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <url>/wuhlan3/2022/07/31/pprof%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1>pprof 性能分析</h1><p>benchmark(基准测试) 可以度量某个函数或方法的性能，也就是说，如果我们知道性能的瓶颈点在哪里，benchmark 是一个非常好的方式。但是面对一个未知的程序，如何去分析这个程序的性能，并找到瓶颈点呢？</p><p>pprof 就是用来解决这个问题的。pprof 包含两部分：</p><ul><li>编译到程序中的 <code>runtime/pprof</code> 包</li><li>性能剖析工具 <code>go tool pprof</code></li></ul><p>windows本地查看腾讯云云服务器上的pprof测试结果，只需远程安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install graphviz<br></code></pre></td></tr></table></figure><h2 id="一、CPU性能分析">一、CPU性能分析</h2><p>启动 CPU 分析时，运行时(runtime) 将每隔 10ms 中断一次（为什么是10ms呢？后面会提到），记录此时正在运行的协程(goroutines) 的堆栈信息。启动 CPU 分析时，运行时(runtime) 将每隔 10ms 中断一次，记录此时正在运行的协程(goroutines) 的堆栈信息。程序运行结束后，可以分析记录的数据找到最热代码路径(hottest code paths)。</p><blockquote><p>编译器热路径是编译器中的代码执行路径，大部分执行时间都花在了这些路径上，并且可能会非常频繁地执行这些路径。</p></blockquote><p>一个函数在性能分析过程中出现的次数越多，说明执行该函数的代码路径(code path)花费的时间占总运行时间的比重越大。</p><h3 id="具体实现方式">具体实现方式</h3><p>在main函数之前添加这两句，可以将性能数据输出到cpu.pprof</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">f, _ := os.OpenFile(<span class="hljs-string">&quot;cpu.pprof&quot;</span>, os.O_CREATE|os.O_RDWR, <span class="hljs-number">0644</span>)<br><span class="hljs-keyword">defer</span> f.Close()<br>pprof.StartCPUProfile(f)    <span class="hljs-comment">//源码中提到：当频率大于500Hz，可能会影响本身的效率，而经过测试，最适合的频率是100Hz，不会影响且会提供有价值的数据。</span><br><span class="hljs-keyword">defer</span> pprof.StopCPUProfile()<br></code></pre></td></tr></table></figure><p>对数据及进行分析：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ go<span class="hljs-built_in"> tool </span>pprof <span class="hljs-attribute">-http</span>=127.0.0.1:6060 cpu.pprof<br></code></pre></td></tr></table></figure><p>之后会自动打开浏览器，如下，可以通过不同的方式查看结果：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220731201857858.png" alt="image-20220731201857858" style="zoom:50%;" /><p>也可以直接通过命令行来分析：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@VM-16-2-centos pprof-<span class="hljs-keyword">test</span>]# go tool pprof cpu.pprof<br><span class="hljs-keyword">File</span>: main<br><span class="hljs-keyword">Type</span>: cpu<br>Time: Jul 31, 2022 at 3:58pm (CST)<br>Duration: 17.34s, <span class="hljs-keyword">Total</span> samples = 17.25s (99.46%)<br>Entering interactive mode (<span class="hljs-keyword">type</span> <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> commands, <span class="hljs-string">&quot;o&quot;</span> <span class="hljs-keyword">for</span> options)<br>(pprof) top<br>Showing nodes accounting <span class="hljs-keyword">for</span> 17.18s, 99.59% of 17.25s <span class="hljs-keyword">total</span><br>Dropped 17 nodes (cum &lt;= 0.09s)<br>      flat  flat%   <span class="hljs-keyword">sum</span>%        cum   cum%<br>    17.18s 99.59% 99.59%     17.21s 99.77%  main.bubbleSort (inline)<br>         0     0% 99.59%     17.22s 99.83%  main.main<br>         0     0% 99.59%     17.22s 99.83%  runtime.main<br>(pprof) top -cum<br>Showing nodes accounting <span class="hljs-keyword">for</span> 17.18s, 99.59% of 17.25s <span class="hljs-keyword">total</span><br>Dropped 17 nodes (cum &lt;= 0.09s)<br>      flat  flat%   <span class="hljs-keyword">sum</span>%        cum   cum%<br>         0     0%     0%     17.22s 99.83%  main.main<br>         0     0%     0%     17.22s 99.83%  runtime.main<br>    17.18s 99.59% 99.59%     17.21s 99.77%  main.bubbleSort (inline)<br>(pprof) <span class="hljs-keyword">help</span><br>  Commands:<br>    callgrind        Outputs a <span class="hljs-keyword">graph</span> <span class="hljs-keyword">in</span> callgrind <span class="hljs-keyword">format</span><br>    comments         Output all profile comments<br>    disasm           Output assembly listings annotated with samples<br>    dot              Outputs a <span class="hljs-keyword">graph</span> <span class="hljs-keyword">in</span> DOT <span class="hljs-keyword">format</span><br>    eog              Visualize <span class="hljs-keyword">graph</span> through eog<br>    evince           Visualize <span class="hljs-keyword">graph</span> through evince<br>    gif              Outputs a <span class="hljs-keyword">graph</span> image <span class="hljs-keyword">in</span> GIF <span class="hljs-keyword">format</span><br>    gv               Visualize <span class="hljs-keyword">graph</span> through gv<br>    kcachegrind      Visualize <span class="hljs-keyword">report</span> <span class="hljs-keyword">in</span> KCachegrind<br>    <span class="hljs-keyword">list</span>             Output annotated source <span class="hljs-keyword">for</span> functions matching regexp<br>    pdf              Outputs a <span class="hljs-keyword">graph</span> <span class="hljs-keyword">in</span> PDF <span class="hljs-keyword">format</span><br>    peek             Output callers/callees of functions matching regexp<br>    png              Outputs a <span class="hljs-keyword">graph</span> image <span class="hljs-keyword">in</span> PNG <span class="hljs-keyword">format</span><br>    proto            Outputs the profile <span class="hljs-keyword">in</span> compressed protobuf <span class="hljs-keyword">format</span><br>    ps               Outputs a <span class="hljs-keyword">graph</span> <span class="hljs-keyword">in</span> PS <span class="hljs-keyword">format</span><br>    raw              Outputs a text representation of the raw profile<br>    svg              Outputs a <span class="hljs-keyword">graph</span> <span class="hljs-keyword">in</span> SVG <span class="hljs-keyword">format</span><br>    tags             Outputs all tags <span class="hljs-keyword">in</span> the profile<br>    text             Outputs top entries <span class="hljs-keyword">in</span> text <span class="hljs-keyword">form</span><br>    top              Outputs top entries <span class="hljs-keyword">in</span> text <span class="hljs-keyword">form</span><br>    topproto         Outputs top entries <span class="hljs-keyword">in</span> compressed protobuf <span class="hljs-keyword">format</span><br>    traces           Outputs all profile samples <span class="hljs-keyword">in</span> text <span class="hljs-keyword">form</span><br>    tree             Outputs a text rendering of call <span class="hljs-keyword">graph</span><br>    web              Visualize <span class="hljs-keyword">graph</span> through web browser<br>    weblist          <span class="hljs-keyword">Display</span> annotated source <span class="hljs-keyword">in</span> a web browser<br>    o/options        <span class="hljs-keyword">List</span> options and their current values<br>    q/quit/<span class="hljs-keyword">exit</span>/^<span class="hljs-keyword">D</span>   <span class="hljs-keyword">Exit</span> pprof<br></code></pre></td></tr></table></figure><h2 id="二、内存分析">二、内存分析</h2><p>内存性能分析(Memory profiling) 记录堆内存分配时的堆栈信息，忽略栈内存分配信息。</p><p>内存性能分析启用时，默认每1000次采样1次，这个比例是可以调整的。因为内存性能分析是基于采样的，因此基于内存分析数据来判断程序所有的内存使用情况是很困难的。</p><h3 id="具体实现方式-2">具体实现方式</h3><p>需要导入<code>&quot;github.com/pkg/profile&quot;</code>然后在main函数之前添加：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">defer profile<span class="hljs-selector-class">.Start</span>(profile<span class="hljs-selector-class">.MemProfile</span>, profile<span class="hljs-selector-class">.MemProfileRate</span>(<span class="hljs-number">1</span>))<span class="hljs-selector-class">.Stop</span>()<br></code></pre></td></tr></table></figure><p>对数据及进行分析：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">go<span class="hljs-built_in"> tool </span>pprof <span class="hljs-attribute">-http</span>=127.0.0.1:6060 /tmp/profile2738765321/mem.pprof<br></code></pre></td></tr></table></figure><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220731204427226.png" alt="image-20220731204427226" style="zoom: 50%;" /><h2 id="三、针对web程序">三、针对web程序</h2><p>针对一直运行的后台服务，比如 web 应用或者分布式应用，我们可以使用 net/http/pprof 库，它能够在应用提供 HTTP 服务时进行分析。</p><p>pprof 采集后台服务，如果使用了默认的 <code>http.DefaultServeMux</code>，通常是代码直接使用<code> http.ListenAndServe(“0.0.0.0:8000”, nil)</code>，这种情况则比较简单，只需要导入包即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> (<br>    _ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>注意该包利用下划线&quot;_&quot;导入，意味着我们只需要该包运行其init()函数即可，如此该包将自动完成信息采集并保存在内存中。</p><p>如果你使用自定义的 ServerMux复用器，则需要手动注册一些路由规则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">r.HandleFunc(<span class="hljs-string">&quot;/debug/pprof/&quot;</span>, pprof.Index)<br>r.HandleFunc(<span class="hljs-string">&quot;/debug/pprof/heap&quot;</span>, pprof.Index)<br>r.HandleFunc(<span class="hljs-string">&quot;/debug/pprof/cmdline&quot;</span>, pprof.Cmdline)<br>r.HandleFunc(<span class="hljs-string">&quot;/debug/pprof/profile&quot;</span>, pprof.Profile)<br>r.HandleFunc(<span class="hljs-string">&quot;/debug/pprof/symbol&quot;</span>, pprof.Symbol)<br>r.HandleFunc(<span class="hljs-string">&quot;/debug/pprof/trace&quot;</span>, pprof.Trace)<br></code></pre></td></tr></table></figure><p>这些路径分别表示：</p><ul><li>/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载，可以通过带参数?=seconds=60进行60秒的数据采集。</li><li>/debug/pprof/block：Goroutine阻塞事件的记录。默认每发生一次阻塞事件时取样一次。</li><li>/debug/pprof/goroutines：活跃Goroutine的信息的记录。仅在获取时取样一次。</li><li>/debug/pprof/heap： 堆内存分配情况的记录。默认每分配512K字节时取样一次。</li><li>/debug/pprof/mutex: 查看争用互斥锁的持有者。</li><li>/debug/pprof/threadcreate: 系统线程创建情况的记录。 仅在获取时取样一次。</li></ul><h3 id="在Gin框架中使用pprof">在Gin框架中使用pprof</h3><p>可以导入包<code>go get github.com/gin-contrib/pprof</code>，之后就可以看到一些新的接口生成：</p><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220731222053015.png" alt="image-20220731222053015"></p><p>profile文件保存在/root/pprof/pprof.api.samples.cpu.001.pb.gz，之后直接使用上述的分析方式即可在windows界面打开：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@VM-16-2-centos api</span>]<span class="hljs-meta"># go tool pprof -http=127.0.0.1:6060 /root/pprof/pprof.api.samples.cpu.001.pb.gz</span><br>Serving web UI <span class="hljs-keyword">on</span> http:<span class="hljs-comment">//127.0.0.1:6060</span><br></code></pre></td></tr></table></figure><blockquote><p>关于火焰图的基本理解方法：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220731222622729.png" alt="image-20220731222622729" style="zoom:67%;" /></blockquote><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://geektutu.com/post/hpg-pprof.html">https://geektutu.com/post/hpg-pprof.html</a></p><p>[2] <a href="https://bbs.huaweicloud.com/blogs/289818">https://bbs.huaweicloud.com/blogs/289818</a></p><p>[3] <a href="https://bytedancecampus1.feishu.cn/docs/doccn4F3nKRdd9Uq7RGl6JPPFWg#">https://bytedancecampus1.feishu.cn/docs/doccn4F3nKRdd9Uq7RGl6JPPFWg#</a></p><p>[4] <a href="http://liumurong.org/2019/12/gin_pprof/">http://liumurong.org/2019/12/gin_pprof/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go语言基础-Proxy实现</title>
    <link href="/wuhlan3/2022/05/14/goproxy/"/>
    <url>/wuhlan3/2022/05/14/goproxy/</url>
    
    <content type="html"><![CDATA[<h1>Go语言基础-Proxy的实现</h1><h2 id="一、前置知识：SOCKS5代理">一、前置知识：SOCKS5代理</h2><p><strong>SOCKS</strong>是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是“SOCKet Secure”的缩写。</p><blockquote><p>某些企业为了安全性，设置了很强的防火墙，带来的副作用是哪怕你是管理员，访问资源也很麻烦。SOCKS5就是开了一个小口子，用来访问资源的。</p></blockquote><p>防火墙内的客户端想要访问外部的服务器时，会跟SOCKS代理服务器进行连接。客户端的请求会通过代理服务器发送到外部的服务器，最终响应也会通过代理服务器发送回客户端。</p><h3 id="基本模型">基本模型</h3><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514220424129.png" alt="image-20220514220424129" style="zoom: 50%;" /><h3 id="协商过程（认证）">协商过程（认证）</h3><p>SOCKS5比SOCKS4a多了验证、IPv6、UDP支持。</p><p>建立与SOCKS5服务器的TCP连接后客户端需要先发送请求来确认协议版本及认证方式，格式为（以字节为单位）：</p><table><thead><tr><th>VER</th><th>NMETHODS</th><th>METHODS</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1-255</td></tr></tbody></table><ul><li>VER是SOCKS版本，这里应该是0x05；</li><li>NMETHODS是METHODS部分的长度；</li><li>METHODS是客户端支持的认证方式列表，每个方法占1字节。基本的有：<ul><li>0x00 不需要认证</li><li>0x01 GSSAPI</li><li>0x02 用户名、密码认证</li></ul></li></ul><p>服务器从客户端提供的方法中选择一个并通过以下消息通知客户端（以字节为单位）：</p><table><thead><tr><th>VER</th><th>METHOD</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr></tbody></table><ul><li>VER是SOCKS版本，这里应该是0x05；</li><li>METHOD是服务端选中的方法。如果返回0xFF表示没有一个认证方法被选中，客户端需要关闭连接。</li></ul><h3 id="请求阶段">请求阶段</h3><p><strong>客户端发送请求的格式</strong></p><p>认证结束后客户端就可以发送请求信息。如果认证方法有特殊封装要求，请求必须按照方法所定义的方式进行封装。</p><p>SOCKS5请求格式（以字节为单位）：</p><table><thead><tr><th>VER</th><th>CMD</th><th>RSV</th><th>ATYP</th><th>DST.ADDR</th><th>DST.PORT</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0x00</td><td>1</td><td>动态</td><td>2</td></tr></tbody></table><ul><li>VER是SOCKS版本，这里应该是0x05；</li><li>CMD是SOCK的命令码<ul><li>0x01表示CONNECT请求</li><li>0x02表示BIND请求</li><li>0x03表示UDP转发</li></ul></li><li>RSV 0x00，保留</li><li>ATYP DST.ADDR类型<ul><li>0x01 IPv4地址，DST.ADDR部分4字节长度</li><li>0x03 域名，DST.ADDR部分第一个字节为域名长度，DST.ADDR剩余的内容为域名，没有\0结尾。</li><li>0x04 IPv6地址，16个字节长度。</li></ul></li><li>DST.ADDR 目的地址</li><li>DST.PORT 网络字节序表示的目的端口</li></ul><p><strong>服务器响应的格式</strong></p><p>服务器按以下格式回应客户端的请求（以字节为单位）：</p><table><thead><tr><th>VER</th><th>REP</th><th>RSV</th><th>ATYP</th><th>BND.ADDR</th><th>BND.PORT</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0x00</td><td>1</td><td>动态</td><td>2</td></tr></tbody></table><ul><li><p>VER是SOCKS版本，这里应该是0x05；</p></li><li><p>REP应答字段</p><ul><li>0x00表示成功</li><li>0x01普通SOCKS服务器连接失败</li><li>0x02现有规则不允许连接</li><li>0x03网络不可达</li><li>0x04主机不可达</li><li>0x05连接被拒</li><li>0x06 TTL超时</li><li>0x07不支持的命令</li><li>0x08不支持的地址类型</li><li>0x09 - 0xFF未定义</li></ul></li><li><p>RSV 0x00，保留</p></li><li><p>ATYP BND.ADDR类型</p><ul><li>0x01 IPv4地址，DST.ADDR部分4字节长度</li><li>0x03域名，DST.ADDR部分第一个字节为域名长度，DST.ADDR剩余的内容为域名，没有\0结尾。</li><li>0x04 IPv6地址，16个字节长度。</li></ul></li><li><p>BND.ADDR 服务器绑定的地址</p></li><li><p>BND.PORT 网络字节序表示的服务器绑定的端口</p></li></ul><h2 id="二、前置知识：bufio包的使用">二、前置知识：bufio包的使用</h2><p>bufio是有缓存的io，避免因为多次写操作而降低程序的性能。</p><p>具体可以参考这个文章：<a href="https://zhuanlan.zhihu.com/p/129781512">https://zhuanlan.zhihu.com/p/129781512</a></p><p>有时间，再自己总结吧…</p><h2 id="三、代码实现">三、代码实现</h2><h3 id="1-v1：简易的echo-server">1. v1：简易的echo server</h3><p>与linuxC++的实现过程类似。</p><ul><li>首先监听IP地址和端口号，调用net.Listen()；</li><li>调用server.Accept()等待并建立连接；</li><li>当有连接建立之后，启动一个协程，来处理这个连接的数据</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">//process部分就不放出了，就是一个简单的数据读取和输出的过程</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   server, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:1080&quot;</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-built_in">panic</span>(err)<br>   &#125;<br>   <span class="hljs-keyword">for</span> &#123;<br>      client, err := server.Accept()<br>      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>         log.Printf(<span class="hljs-string">&quot;Accept failed %v&quot;</span>, err)<br>         <span class="hljs-keyword">continue</span><br>      &#125;<br>      <span class="hljs-keyword">go</span> process(client)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nc安装教程如下：<a href="https://www.cnblogs.com/linyufeng/p/13206252.html">https://www.cnblogs.com/linyufeng/p/13206252.html</a></p><p>使用nc命令可以直接和一个ip端口建立tcp连接。</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514214450225.png" alt="image-20220514214450225" style="zoom:100%;" /><h3 id="2-v2：协商阶段">2. v2：协商阶段</h3><p>main函数不需要修改，在process函数中新增鉴权的部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">//新增的鉴权过程</span><br>err := auth(reader, conn)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>   log.Printf(<span class="hljs-string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)<br>   <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>auth函数的实现流程如下：</p><ol><li>使用reader.ReadByte将版本号读取出来；</li><li>使用reader.ReadByte将mthodsize读取出来，并建立相应大小的method数组；</li><li>使用io.ReadFull将method填充完全；</li><li>往连接中写入版本号和方法<code>conn.Write([]byte&#123;socks5Ver, 0x00&#125;)</code></li></ol><p>运行程序后，在终端执行<code>curl --socks5 127.0.0.1:1080 -v http://www.qq.com</code>，可以显示出版本号、method和认证成功。</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514220635063.png" alt="image-20220514220635063" style="zoom: 80%;" /><h3 id="3-v3：请求阶段">3. v3：请求阶段</h3><p>我们在auth下面再实现一个connect函数，该函数用于读取客户端发送的数据，然后与服务器进行tcp连接；之后将连接的信息发送回给客户端。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Perl">err = <span class="hljs-keyword">connect</span>(reader, conn)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>   log.Printf(<span class="hljs-string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)<br>   <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>读取客户端的数据主要包括版本号Ver、命令码CMD、保留字RSB、ATYP目标地址类型、DST.ADDR 一个可变长度的值、DST.PORT 目标端口。</p><p>写回给客户端的过程属性类似，略。</p><p>运行程序后，可以正确返回ip地址和端口号：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514220524235.png" alt="image-20220514220524235" style="zoom:80%;" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514220512876.png" alt="image-20220514220512876" style="zoom:80%;" /><h3 id="4-v4：relay阶段">4. v4：relay阶段</h3><p>将客户端的请求发送到服务器，将服务器的响应发送回给客户端。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//使用ctx机制来进行同步</span><br>ctx, cancel := context.WithCancel(context.Background())<br><span class="hljs-keyword">defer</span> cancel()<br><br><span class="hljs-comment">//使用io.Copy——死循环将src中的数据读取到dest中</span><br><span class="hljs-comment">//两个goroutine的方向不一样，一个是从浏览器拷贝到服务器，一个是从服务器拷贝到浏览器</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    _, _ = io.Copy(dest, reader)<br>    cancel()<br>&#125;()<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    _, _ = io.Copy(conn, dest)<br>    cancel()<br>&#125;()<br><br><span class="hljs-comment">//使用ctx的机制，来进行同步一下</span><br>    &lt;-ctx.Done()<br></code></pre></td></tr></table></figure><p>运行程序如下所示：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514215014797.png" alt="image-20220514215014797" style="zoom: 80%;" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514220556547.png" alt="image-20220514220556547" style="zoom:50%;" /><h3 id="5-使用插件进行测试">5.使用插件进行测试</h3><p>可以使用Proxy SwitchyOmega插件。</p><p>该软件本身不提供给代理服务器，需要连接我们自己的代理服务器。</p><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514215111141.png" alt="image-20220514215111141" style="zoom: 33%;" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514215047480.png" alt="image-20220514215047480" style="zoom:67%;" /></p><p>在启动右上角的小圈圈后，浏览器访问的网页都会经过我们的代理服务器。</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220514215030250.png" alt="image-20220514215030250" style="zoom:50%;" /><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/129781512">https://zhuanlan.zhihu.com/p/129781512</a></p><p>[2] <a href="https://zh.m.wikipedia.org/zh-hans/SOCKS">https://zh.m.wikipedia.org/zh-hans/SOCKS</a></p><p>[3] 字节青训营《Go语言上手 - 基础语言》</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go依赖管理</title>
    <link href="/wuhlan3/2022/05/09/Go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    <url>/wuhlan3/2022/05/09/Go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1>Go依赖管理</h1><p>实际开发过程中，工程项目不可能都从0到1地开发。所以，依赖库的管理非常重要。</p><h1>一、Go依赖管理的演进</h1><ol><li>GOPATH</li><li>Go Vender</li><li>Go Module</li></ol><p>主要解决两个问题：不同环境依赖的版本不同；控制依赖库的版本</p><h2 id="1-GOPATH">1.GOPATH</h2><p>GOPATH是一个环境变量，是Go的一个工作区。在go的早期版本里，需要将代码放在<code>$GOPATH/src</code>下，而且go get产生的依赖也会自动下载到<code>$GOPATH/src </code>。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">GOPATH<br>├── bin        <span class="hljs-comment">#项目编译的二进制文件</span><br>├── pkg        <span class="hljs-comment">#项目编译的中间产物，加速编译</span><br>├── src        <span class="hljs-comment">#项目源码</span><br>    ├── github.com<br>    <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>GOPATH呈现的特点是：</p><ul><li>项目代码直接依赖src下的代码</li><li>Go get下载最新版本的包到src目录下</li></ul><p>GOPATH的弊端也很明显：就是当projectA依赖于某个包的v1版本，而projectB又依赖于该包的v2版本，就会出现问题——<strong>无法实现package的多版本控制</strong></p><img width="500" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e785f4283acf43908ab920827907c5c1~tplv-k3u1fbpfcp-zoom-1.image"><h2 id="2-Go-Vender">2.Go Vender</h2><p>随着Go的依赖包越来越丰富，版本越来越多。Go 官方在 Go 1.5 的时候提出了实验性质的 vendor 机制——<strong>每个项目都可以有一个</strong><code>``vendor/``</code><strong>目录来存放项目所需版本依赖的拷贝</strong>。</p><ul><li>在项目目录下，增加vendor文件夹，所有依赖包副本形式放在$ProjectRoot/vendor；</li><li>依赖寻址方式：首先查找vendor，再查找GOPATH；</li><li>通过每个项目引入一份依赖符本，解决了多个项目需要同一个package依赖的冲突问题</li></ul><p>Go Vendor依然存在一些弊端——<strong>同一个项目中的package可能依赖于不同版本的包，这也会产生冲突</strong>。</p><img width="500" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06c7f720da094c1c8e4c186cee352556~tplv-k3u1fbpfcp-zoom-1.image"><h2 id="3-Go-Module">3.Go Module</h2><ul><li>通过go.mod文件管理依赖包版本</li><li>通过go get/go mod指令工具管理依赖包</li></ul><p>Go Module实现了最终的目标：<strong>可以定义版本规则和管理项目依赖关系</strong></p><h1>二、依赖管理</h1><h2 id="1-依赖管理的三要素">1.依赖管理的三要素</h2><ol><li>配置文件，描述依赖 go.mod</li><li>中心仓库管理依赖库 Proxy</li><li>本地工具 go get/go mod</li></ol><h2 id="2-配置文件"><strong>2.配置文件</strong></h2><p>go.mod结构如下, 其中version分为两种，语义化版本；基于commit的伪版本</p><img width="500" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb99b58a026d46fb8d248154a3ea2ff2~tplv-k3u1fbpfcp-zoom-1.image"><blockquote><p><code>go.mod</code>文件中出现 <code>+incompatible</code>，说明你引用了一个不规范的 Module，正常情况下，只能说明这个 Module 版本未遵循版本化语义规范。可能会有一些风险</p></blockquote><h2 id="3-中心仓库管理依赖库"><strong>3.中心仓库管理依赖库</strong></h2><p>Go mod中的依赖都可以对应到github上的某一个提交的代码版本，这样就可以直接下载代码来完成依赖分发。但是过度依赖代码托管平台又会导致以下几个问题：</p><ul><li>无法保证构建稳定性：增加/修改/删除软件版本</li><li>无法保证依赖可用性：代码的作者可以删除软件</li><li>增加第三方压力：代码托管平台负载问题</li></ul><p>所以我们可以在中间增加一个proxy，它负责缓存软件版本，保证了依赖的稳定性。</p><p>我们使用GOPROXY来管理proxy的配置：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">GOPROXY=<span class="hljs-string">&quot;https://proxy1.cn, https://proxy2.cn, direct&quot;</span><br><br>#服务站点URL列表，“direct”表示源站<br>#proxy1-&gt;proxy2-&gt;Direct<br>#即会先从proxy1查找依赖，再到proxy2查找依赖，最后回到源站查找<br></code></pre></td></tr></table></figure><h2 id="4-工具go-get"><strong>4.工具go get</strong></h2><p>go get命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包,并自动完成编译和安装</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">get</span> <span class="hljs-built_in">example</span>.org/pkg<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">@update  默认<br>@node    删除依赖<br>@v1.1.2  tag版本，语义版本<br>@23dfdd5 特定的commit<br>@master  分支的最新commit<br></code></pre></td></tr></table></figure><h2 id="5-工具go-mod"><strong>5.工具go mod</strong></h2><h3 id="go-mod-init">go mod init</h3><p>创建空项目后，可以执行这个命令。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-keyword">mod</span> init gitee.<span class="hljs-keyword">com</span>/biexiaoyansudian/my.<span class="hljs-keyword">cn</span><br>#指定了模块导入路径为 gitee.<span class="hljs-keyword">com</span>/biexiaoyansudian/my.<span class="hljs-keyword">cn</span><br></code></pre></td></tr></table></figure><p>这个 init 指定的路径作用是：</p><ul><li><p>作为模块的标识</p></li><li><p>作为模块的import path，当其他项目引用这个模块下的 package 时都会以该 import path 作为共同的前缀<code>import &quot;``gitee.com/biexiaoyansudian/my.cn/mypkg``&quot;</code></p></li></ul><p>go mod init 执行完毕，就初始化了使用 Go modules 的项目，会多出来一个 <strong>go.mod 文件</strong>。它记录了当前项目的模块信息，每一行都以一个关键词开头。</p><h3 id="go-mod-download">go mod download</h3><p>下载依赖包</p><h3 id="go-mod-tidy">go mod tidy</h3><p>拉取缺少的依赖，移除不用的依赖</p><h1>参考资料</h1><p>[1] <a href="https://www.infoq.cn/article/xyjhjja87y7pvu1iwhz3">https://www.infoq.cn/article/xyjhjja87y7pvu1iwhz3</a></p><p>[2] 字节跳动青训营——Go语言上手 - 工程实践</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git基本用法</title>
    <link href="/wuhlan3/2022/05/01/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/wuhlan3/2022/05/01/git%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>git基本用法</h1><h2 id="一、本地仓库操作">一、本地仓库操作</h2><h3 id="1-仓库初始化">1.仓库初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> gitTraining<br><span class="hljs-built_in">cd</span> gitTraining<br>git init<br></code></pre></td></tr></table></figure><h3 id="2-将修改保存到暂存区">2.将修改保存到暂存区</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#添加所有修改  </span><br>git <span class="hljs-built_in">add</span> .  <br><span class="hljs-comment">#添加hello.txt文件  </span><br>git <span class="hljs-built_in">add</span> hello.txt <br></code></pre></td></tr></table></figure><p>查看暂存区状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><p>但是如果你不小心把不想添加的东西添加到暂存区，或者想丢弃已经添加的内容，这个时候你该怎么办呢？不用着急，这个时候<code>git checkout</code>命令就可以大显身手了。丢弃添加的内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout hello.txt  <br></code></pre></td></tr></table></figure><h3 id="3-将修改提交到本地仓库">3.将修改提交到本地仓库</h3><p>当执行完<code>git commit</code>后，如果你试着执行以下<code>git log</code>你可能会得到如下的输出：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">commit <span class="hljs-number">37302</span>ce99137cf30fabc14784d23ea63cadb928b  <br><span class="hljs-symbol">Author:</span> educoder &lt;educoder<span class="hljs-subst">@163</span>.com&gt;  <br><span class="hljs-symbol">Date:</span>   Sun <span class="hljs-keyword">Dec</span> <span class="hljs-number">24</span> <span class="hljs-number">23</span>:<span class="hljs-number">35</span>:<span class="hljs-number">48</span> <span class="hljs-number">2017</span> +<span class="hljs-number">0800</span>    <br><br>添加helloGit.txt<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>“commit 37302ce99137cf30fabc14784d23ea63cadb928b”</code>中的后面这一串字符就是完整的<code>commit id</code>；</li><li><code>“Author”</code>就是这次提交的作者，它就是我们在<code>git config</code>中配置的<code>user.name</code>；</li><li>最后输出的<code>“添加helloGit.txt”</code>，是我们在提交时添加的信息。</li></ul><p>如果有多次提交即<code>commit</code>，在执行<code>git log</code>时，会输出每一次的提交的具体信息。这样的话，什么时候（<code>Date</code>）由什么人（<code>Author</code>）提交了什么内容（“添加<code>helloGit.txt</code>”）就一目了然了。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220504195643301.png" alt="image-20220504195643301"></p><h2 id="二、远程仓库操作">二、远程仓库操作</h2><h3 id="1-克隆远程版本库">1.克隆远程版本库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">##克隆到当前路径</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">xxx</span>.git<br><span class="hljs-comment">##也可以指定克隆到某个目录</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">xxx</span>.git <span class="hljs-string">&quot;指定目录&quot;</span>  <br></code></pre></td></tr></table></figure><p>在团队开发中，<strong>我们必须选用一台主机做为<code>Git</code>服务器来存放远程版本库。<strong>这样团队中的每个开发者，就可以基于一个共同的远程版本库进行开发。目前提供代码托管（即可以将远程版本库存放于其上的）的平台有<code>Github</code>、<code>Gitee</code>等，同时我们也可以</strong>搭建一台私有的运行<code>Git</code>的服务器</strong>，来做为远程<code>Git</code>服务器。<code>Github</code>等平台的使用，及本地<code>Git</code>服务器的搭建，会在后续的实训中具体介绍。本地<code>Git</code>服务器，可以配置不同的连接方式，如<code>shell</code>、<code>git</code>或<code>bash</code>。为了给挑战者提供一个便利的实训环境，我们为每个人配置了一台本地<code>Git</code>服务器，并允许以<code>bash</code>方式进行操作，即可以通过类似于<code>/home/sample.git</code>这种形式的地址，做为远程仓库地址进行操作，而不是像<code>https://sample.git</code>这种形式。</p><h3 id="2-添加到远程版本库">2.添加到远程版本库</h3><blockquote><p>现在你要自己启动一个项目了，你需要将你的代码保存到远程版本中。那么你要做的第一件事就是，需要为你的本地版本库添加一个远程仓库，然后整个团队才能基于这个远程版本库进行协同开发。</p></blockquote><p>添加远程版本库需要用到的命令是<code>git remote add</code>，其命令格式为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">add</span> “远程仓库名” “远程仓库地址”  <br></code></pre></td></tr></table></figure><p>使用示例如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//sample.git  </span><br></code></pre></td></tr></table></figure><p>这样就将<code>https://sample.git</code>添加为远程仓库，并将其命名为<code>origin</code>。   ###编程要求<br>本关的编程任务是，补全右侧代码片段中<code>Begin</code>至<code>End</code>中间的脚本。通过执行你所编写的脚本，来完成为本地仓库添加远程仓库的任务。远程仓库的地址为<code>/tmp/sample.git</code>。具体要求如下：</p><ul><li>创建一个本地版本库；</li><li>为创建的本地仓库添加远程仓库，且将其命名为<code>git</code>。</li></ul><h3 id="3-推送本地仓库到远程仓库">3.推送本地仓库到远程仓库</h3><p>推送本地内容时，会将所有未推送至远程仓库的内容，都提到远程仓库。它用到的命令是<code>git push</code>，使用方法如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 远程仓库名 本地分支名 远程分支名  <br></code></pre></td></tr></table></figure><p>具体的使用方法如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git push origin <span class="hljs-keyword">master</span> <span class="hljs-title">master</span>  <br></code></pre></td></tr></table></figure><p>这样就将本地分支的内容，推送到远程仓库<code>origin</code>的<code>master</code>分支了。</p><h4 id="参数-u的作用">参数-u的作用</h4><p><code>git push</code>的另外一种用法如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> -u 远程仓库名 本地分支名 远程分支名  <br></code></pre></td></tr></table></figure><p><code>-u</code>参数的作用是，建立起本地<code>master</code>分支和远程<code>master</code>分支之间的对应关系，下一次如果再推送<code>master</code>分支，就可以忽略远程分支名了，如下所示：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#初次推送  </span><br>git push -u origin <span class="hljs-keyword">master</span> <span class="hljs-title">master</span>  <br><span class="hljs-comment">#再次推送  </span><br>git push origin <span class="hljs-keyword">master</span>  <span class="hljs-title"></span><br></code></pre></td></tr></table></figure><h3 id="4-拉取远程分支到本地">4.拉取远程分支到本地</h3><p>拉取远程仓库的内容到本地，需要使用<code>git pull</code>命令，其命令格式为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> pull 远程主机名 远程分支名 本地分支名  <br></code></pre></td></tr></table></figure><p>其使用示例如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#将远程仓库origin的master分支的内容拉取到本地master分支  </span><br>git pull origin <span class="hljs-literal">master</span>:<span class="hljs-keyword">master</span>  <span class="hljs-title"></span><br></code></pre></td></tr></table></figure><h4 id="pull过程可能产生冲突">pull过程可能产生冲突</h4><p>但是，在使用过程中，也可能会出现一种情况：远程分支和本地分支对同一内容做了修改，这就会导致将远程分支的修改，合并到本地分支的时候发生冲突。这个时候，可以选择解决冲突，然后合并（解决冲突会在后续的实训中介绍）。也可以选择直接强制拉取，使用远程分支的修改，覆盖本地分支的修改。强制拉取需要用到<code>-f</code>参数，语法格式如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> pull 远程主机名 远程分支名 本地分支名 -f  <br></code></pre></td></tr></table></figure><p>具体的使用示例如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#将远程仓库origin的master分支的内容拉取到本地master分支  </span><br>git pull origin <span class="hljs-literal">master</span>:<span class="hljs-keyword">master</span> <span class="hljs-title">-f</span>  <br></code></pre></td></tr></table></figure><h2 id="三、分支管理">三、分支管理</h2><h3 id="1-创建-切换本地分支">1.创建/切换本地分支</h3><blockquote><p>当你进入一个团队，在获得产品的完整代码之后，你首先要做的就是，在本地创建一个属于自己的分支，然后才能在自己的分支上进行开发。</p></blockquote><p>我们在<code>master</code>分支上，进行了<code>C1</code>、<code>C2</code>、<code>C3</code>三次提交，且当前指针指向<code>C3</code>提交。<br>一般情况下，我们只会将已经成熟的代码存放到<code>master</code>分支，而将正在开发的代码或者测试版的代码放到其他分支。这时，我们就需要新建分支，以在该分支进行开发。如下图：</p><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220504204122931.png" alt="image-20220504204122931"></p><p>当我们在主分支进行了<code>C2</code>提交后，新建了<code>develop</code>分支，并在其上进行了两次提交。此时，工作区指针<code>HEAD</code>指向<code>develop</code>分支。<br>创建本地分支用到的命令是<code>git branch</code>，而分支切换用到的命令是<code>git checkout</code>。<code>git checkout</code>是有很多用途的命令，在这里我们只讲它在分支操作中的使用。下面我们详细介绍这两个命令的使用。</p><ul><li><p><strong>分支切换</strong><br>可以使用<code>git checkout</code> 命令切换到其他分支。如你本地有<code>master</code>分支和<code>develop</code>分支，目前你正处于<code>develop</code>分支进行开发，现在你想切换到<code>master</code>去，则可以执行下面的操作：<br><code>git checkout master</code><br>这样就能切换到<code>master</code>分支继续进行开发。</p></li><li><p><strong>创建新的分支</strong></p><p>当你需要创建一个新的分支的时候，可以使用<code>git branch</code>命令，其具体使用格式为：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>新的分支名字<br></code></pre></td></tr></table></figure><p>使用示例如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#创建名为new_branch的新分支  git branch new_branch  </span><br></code></pre></td></tr></table></figure></li><li><p><strong>创建新分支的同时切换</strong><br>切换到一个新的分支，有一个更为简洁的命令：<code>git checkout -b</code>，它的使用格式为：<br><code>git checkout -b 新的分支 名字</code><br>其具体使用方法如下：<br><code>git checkout -b new_branch</code><br>这样就可以创建，并切换到了<code>new_branch</code>分支。</p></li></ul><h3 id="2-删除本地分支">2.删除本地分支</h3><p>在开发过程中，很可能出现的一个情况是：你为了解决一个紧急<code>bug</code>，而临时创建了一个分支或者分支过于混乱需要丢弃。这时你就需要进行分支删除操作。</p><p>本关任务：删除本地分支。</p><h4 id="相关知识">相关知识</h4><p>现在我们来看一个实际的例子。请看下图：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220504210335362.png" alt="image-20220504210335362" style="zoom:67%;" />  <p>首先，我们在<code>master</code>工作到 <code>C1</code>，然后开始一个新分支<code>develop</code>分支，做为测试版的代码分支。提交到<code>C5</code>的时候，又需要临时解决一个问题，于是从<code>C5</code>的地方又分出一个分支<code>issue</code>。提交到<code>C7</code>的时候，该<code>issue</code>被解决。<code>issue</code>分支已经失去其意义，则需要将其删除，以保持本地版本库分支树的干净。我们将<code>issue</code>分支上的代码，合并到<code>develop</code>上之后，就可将<code>issue</code>分支删除。删除<code>issue</code>分支后的分支树如下：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220504210346301.png" alt="image-20220504210346301" style="zoom:67%;" />  <p>其中，<code>C8</code>为合并<code>issue</code>分支所进行的提交。</p><p>删除本地分支，需要用到<code>git branch</code>命令，且需要<code>-D</code>参数，具体命令格式为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">git</span> <span class="hljs-variable">branch</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> 需要删除的分支的名字<br></code></pre></td></tr></table></figure><p>具体使用示例如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#删除develop分支  </span><br>git <span class="hljs-keyword">branch </span>-D develop  <br></code></pre></td></tr></table></figure><p>示例中的命令，能够将本地分支<code>develop</code>删除。</p><h3 id="3-删除远程分支">3.删除远程分支</h3><blockquote><p>在开发过程中，有时可能由于产品变更，或者版本变更，而需要丢弃远程版本库中某个分支的内容。这个时候，你就需要一系列操作，来确保安全有效地删除远程分支。</p></blockquote><h4 id="两种删除方法">两种删除方法</h4><p>删除分支用到的<code>git</code>命令是<code>git push</code>，在具体的使用过程中有不同的用法。</p><ol><li><strong>通过推送空分支到远程分支，实现删除</strong>：</li></ol><p>一个删除远程分支的方法是，推送一个空分支到远程指定分支，以实现删除。推送本地分支到远程分支的方法是：<br><code>git push 远程主机名 本地分支:远程分支</code></p><p>与之类似，推送空分支实现删除的方法是：<br>　　<code>git push 远程主机名 :远程分支</code><br>即<code>：</code>前没有指定本地分支名。具体的使用示例如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">#删除远程develop分支，其中<span class="hljs-built_in">origin</span>为远程仓库名  <br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> :develop  <br></code></pre></td></tr></table></figure><ol start="2"><li><strong>通过<code>delete</code>参数删除远程分支</strong>：</li></ol><p>除了推送空分支到远程分支外，也可以通过<code>delete</code>参数实现删除。具体的命令格式为：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">git <span class="hljs-keyword">push</span> 远程主机名 --<span class="hljs-keyword">delete</span> 远程分支名<br></code></pre></td></tr></table></figure><p>具体使用示例如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">#删除远程develop分支,其中<span class="hljs-built_in">origin</span>为远程主机名  <br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> --<span class="hljs-built_in">delete</span> develop  <br></code></pre></td></tr></table></figure><h3 id="4-本地分支合并">4.本地分支合并</h3><blockquote><p>在协作开发中，团队中每个人可能都只负责一个模块。所以，很有可能，你在开发过程中，需要用到别人所开发的功能。这个时候就需要将别人分支的内容，合并到你自己的分支；或者，<code>develop</code>分支或者<code>master</code>分支有更新，你也需要将它们的修改，合并到你的分支，以跟上产品开发进程；也有可能你为了解决一个<code>bug</code>，创建临时分支，完成开发后，需要将其合并到你的分支。这些都需要分支合并的知识。</p></blockquote><p>分支合并需要用到<code>git merge</code>命令，具体的命令格式为：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 需要合并的分支<br></code></pre></td></tr></table></figure><p>在具体使用中，如当前处于<code>master</code>分支，需要将<code>develop</code>分支合并到<code>master</code>分支，则具体的使用方式如下：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> develop<br></code></pre></td></tr></table></figure><p>同时，分支合并也分为正常合并和快进式合并，通过为<code>git merge</code>添加参数，即可实现不同操作。</p><ul><li><strong>快进式合并</strong></li></ul><p>具体命令如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git <span class="hljs-built_in">merge</span> <span class="hljs-comment">--no-ff develop</span><br></code></pre></td></tr></table></figure><p>默认情况下，<code>Git</code>执行&quot;快进式合并&quot;，即<code>fast-farward merge</code>，会直接将被合并的分支指向需要合并的分支。如下图：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220504211936606.png" alt="image-20220504211936606" style="zoom: 50%;" /><ul><li><strong>正常合并</strong></li></ul><p>命令具体如下：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> develop<br></code></pre></td></tr></table></figure><p>正常合并的方式如下图：</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220504212319049.png" alt="image-20220504212319049" style="zoom:50%;" /><p>如图所示，<code>Master</code>分支上产生了一次新的提交，也就是说生成一个新节点完成了合并，这样的话，版本演进更清晰。</p><h4 id="示例">示例</h4><p>下面我们以一个具体的例子，来演示一下这两种合并方式的区别：</p><ol><li>创建<code>master</code>分支，并在其上提交<code>hello</code>文件；</li><li>从<code>master</code>分支切换到新分支<code>develop</code>，并进行两次提交，分别将<code>hello1</code>、<code>hello2</code>两个文件提交到<code>develop</code>分支；</li><li>切换回<code>master</code>分支，执行<code>git merge develop</code>进行快进式合并，然后查看<code>master</code>分支的日志，得到如下提示信息：</li></ol><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220504212558452.png" alt="image-20220504212558452"></p><p>如上图可知，<code>master</code>分支多了<code>develop</code>分支上的两次提交信息。</p><ol start="4"><li>将<code>master</code>分支回退到合并前状态，再次执行<code>git merge --no-ff develop</code>，进行非快进式合并，然后再次查看日志：</li></ol><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220504212613766.png" alt="image-20220504212613766"></p><h2 id="四、日志与版本回退">四、日志与版本回退</h2><h3 id="1-回到前一次提交">1.回到前一次提交</h3><blockquote><p>如果提交到本地仓库中的代码发现了<code>bug</code>，就必须将代码回到上一个版本。而在<code>Git</code>中，一次提交就对应着一个版本，因此可以根据日志信息进行版本回退。</p></blockquote><h4 id="日志的基本用法">日志的基本用法</h4><p>在之前，我们已经介绍了<code>git log</code>的基本使用方法，这里我们要进一步介绍<code>git log</code>的使用。</p><ul><li>查看提交的内容差异<br><code>git log</code>提供了<code>-p</code>参数，用于查看每次提交之间的内容差异。<code>git log -p</code>即可显示每次提交之间的变化。</li><li>而如果想限制显示的范围，则可以再添加参数用于限定：<code>git log -p -2</code>这样，则仅显示最近的两次更新。</li><li>其他<code>git log</code>选项：<ol><li>单词层面对比<br><code>Git</code>提供了<code>--word-diff</code>选项，可以显示单词层面的差异。当需要在书籍、论文这种很大的文本文件上，进行对比的时候，这个功能就非常有用。</li><li>显示简要的增改行数<br><code>Git</code>提供了<code>--stat</code>选项，则可以仅显示增加或者减少了多少行。</li><li><code>pretty</code>选项<br>使用<code>--pretty</code> 选项选项，可以指定不同的显示属性，如<code>oneline</code> 将每个提交放在一行显示。 <code>short</code>，<code>full</code> 和 <code>fuller</code> 可以指定展示的信息的多少。</li></ol></li></ul><h4 id="git-revert实现版本回退">git revert实现版本回退</h4><p>版本回退可以用<code>git revert</code>命令。<code>git revert</code>撤销提交时，会保留所撤销的提交的记录和历史，并将撤销操作做为一次新的提交。即提交一个新的版本，将需要<code>revert</code>的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。其具体的使用方法如下：<br>* git revert HEAD          撤销前一次 commit<br>* git revert HEAD^         撤销前前一次 commit<br>* git revert commit （比如：fa042ce57ebbe5b）撤销指定的版本，撤销也会作为一次提交进行保存</p><h4 id="git-reset实现版本回退">git reset实现版本回退</h4><p><code>git reset</code>也能实现版本回退，但是<code>git revert</code> 和 <code>git reset</code>也存在一定的区别 ：</p><ul><li><code>git revert</code>是用一次新的<code>commit</code>来回滚之前的<code>commit</code>，<code>git reset</code>是直接删除指定的<code>commit</code>；</li><li>在回滚这一操作上看，效果差不多。但是，在日后继续<code>merge</code>以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的<code>commit</code>，“中和”之前的提交，因此日后合并老的<code>branch</code>时，导致这部分改变不会再次出现。但是<code>git reset</code>是把某些<code>commit</code>在某个<code>branch</code>上删除，因而和老的<code>branch</code>再次<code>merge</code>时，这些被回滚的<code>commit</code>应该还会被引入；</li><li><code>git reset</code> 是把<code>HEAD</code>向后移动了一下，而<code>git revert</code>是<code>HEAD</code>继续前进，只是新的<code>commit</code>的内容和要<code>revert</code>的内容正好相反，能够抵消要被<code>revert</code>的内容。</li></ul><p><code>git reset</code>用法如下：</p><ul><li><code>git reset HEAD</code><br>回到前一次 <code>commit</code>。也可以用于将错误的文件添加进暂存区后，想回退取消，如：<br>　　<code>git reset HEAD 文件名</code></li><li><code>git reset HEAD^</code><br>回到前前一次 <code>commit</code>。</li><li><code>git reset commit</code><br>比如：<code>commit = fa042ce57ebbe5b</code>，回到指定的版本，撤销也会作为一次提交进行保存。</li></ul><p>另外<code>git reset</code>也可以指定<code>reset</code>的模式：<code>hard</code>、<code>soft</code>、<code>mixed</code>、<code>merged</code>、<code>keep</code>。   这几种模式的差别如下：</p><ul><li><code>--soft</code> 缓存区和工作目录都不会被改变；</li><li><code>--mixed</code> – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响；</li><li><code>--hard</code> – 缓存区和工作目录，都同步到你指定的提交。</li></ul><p>几种模式的具体使用方法如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#直接丢弃工作区和暂存区的修改  </span><br>git reset <span class="hljs-comment">--hard HEAD  </span><br><span class="hljs-comment">#暂存区内容保留，工作区修改丢弃  </span><br>git reset <span class="hljs-comment">--mixed HEAD  </span><br><span class="hljs-comment">#暂存区和工作区内容都保留  </span><br>git reset <span class="hljs-comment">--soft HEAD  </span><br></code></pre></td></tr></table></figure><h3 id="2-删除文件">2.删除文件</h3><blockquote><p>在Git使用过程中，涉及到撤回的操作，还有从暂存区或者分支删除文件。比如你错误地将测试过程中产生的日志文件提交到了暂存区或者分支上面去了，那么你可能就需要删除文件。</p></blockquote><p>删除文件需要用到的命令是<code>git rm</code>，且<code>git rm</code>有参数<code>--cached</code>。   当我们需要删除暂存区或分支上的文件，同时工作区也不再需要这个文件了，可以使用：<br><code>git rm 文件路径</code><br>当我们需要删除暂存区或分支上的文件，<strong>但本地又需要使用</strong>， 只是不希望这个文件被提交到版本库，可以使用：<br><code>git rm --cached 文件路径</code></p><blockquote><p>简单来说就是，一般情况下使用<code>git rm 文件路径</code>；想要保留工作区（本地）的时候，添加–cached。</p></blockquote><h2 id="五、标签">五、标签</h2><h2 id="六、高阶操作">六、高阶操作</h2><h2 id="参考资料">参考资料</h2><p>[1] https://www.educoder.net/paths/41</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探讨智能指针</title>
    <link href="/wuhlan3/2022/04/17/%E6%8E%A2%E8%AE%A8%E4%B8%80%E4%B8%8B%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <url>/wuhlan3/2022/04/17/%E6%8E%A2%E8%AE%A8%E4%B8%80%E4%B8%8B%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1>探讨智能指针</h1><p>C++中，动态内存的管理需要依靠一对运算符来完成：<strong>new</strong>，在动态内存中为对象分配空间并返回一个指向该对象的指针，我们可以选择对对象进行初始化；<strong>delete</strong>，接受一个动态对象的指针，销毁该对象，释放与之关联的内存。</p><p>但是，动态内存的使用很容易出现问题。</p><ul><li>当忘记释放内存时，就会造成内存泄漏；</li><li>若上有指针引用内存，我们就提前释放了该内存，就会产生引用了非法内存的指针（悬空指针）。</li></ul><p>为了更容易地使用动态内存，新的标准库提供了两种智能指针类型来管理动态对象。（定义在memory头文件中）</p><ul><li><code>shared_ptr</code> 允许多个指针指向同一个对象；</li><li><code>unique_ptr</code> 则独占所指向的对象；</li><li><code>weak_ptr</code>，是一种弱引用，指向<code>shared_ptr</code> 管理的对象。</li></ul><h2 id="shared-ptr">shared_ptr</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//空智能指针，</span><br>shared_ptr&lt;string&gt; p1;<br>shared_ptr&lt;list&lt;<span class="hljs-type">int</span>&gt;&gt; p2;<br><br><span class="hljs-comment">//使用的时候需要判断，是否为空</span><br><span class="hljs-keyword">if</span>(p1  &amp;&amp; p1-&gt;<span class="hljs-built_in">empty</span>())<br>    *p1 = <span class="hljs-string">&quot;hi&quot;</span>;<br>    <br><span class="hljs-comment">//更加安全的创建方法是使用make_shared&lt;T&gt;函数</span><br>shared_ptr&lt;<span class="hljs-type">int</span>&gt; p3 = <span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">42</span>);    <span class="hljs-comment">//指向值为42的对象</span><br><span class="hljs-keyword">auto</span> p4 = <span class="hljs-built_in">make_shared</span>&lt;string&gt;(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;9&#x27;</span>);    <span class="hljs-comment">//指向&quot;9999999999&quot;字符串</span><br><span class="hljs-keyword">auto</span> p5 = <span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;();            <span class="hljs-comment">//值为0</span><br><br><span class="hljs-comment">//拷贝构造</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">p6</span><span class="hljs-params">(p5)</span></span>;<br><br><span class="hljs-comment">//赋值运算符</span><br>p3 = p6;<br></code></pre></td></tr></table></figure><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220415222039697.png" alt="image-20220415222039697" style="zoom:50%;" /><div class="note note-success">            <p>需要特别注意的是，当调用拷贝构造函数后，引用计数递增。相当于有两个指针指向对象；</p><p>当进行赋值运算时，如<code>p=q</code>，q的引用计数递增，p的引用计数递减。两个指针都指向q的所指对象。</p>          </div><p><strong>shared_ptr自动销毁所管理的对象</strong><br>当指向一个对象的最后一个shared_ptr被销毁时，shared_ptr类会自动销毁此对象，它是通过析构函数完成销毁工作的。shared_ptr的析构函数会递减它所指向的对象的引用计数。如果引用计数变为0，shared_ptr的析构函数就会销毁对象，并释放它所占用的内存。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//p离开作用域，指向的内存会被自动释放掉</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(T arg)</span></span>&#123;<br>    shared_ptr&lt;Foo&gt; p = <span class="hljs-built_in">factory</span>(arg);<br>&#125;<br><br><span class="hljs-comment">//但是p作为返回值时，内存不会被立刻释放掉</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(T arg)</span></span>&#123;<br>    shared_ptr&lt;Foo&gt; p = <span class="hljs-built_in">factory</span>(arg);<br>    <span class="hljs-keyword">return</span> p;<span class="hljs-comment">//当返回p时，引用计数进行了递增操作</span><br>&#125;<span class="hljs-comment">//p离开了作用域，但它指向的内存不会被释放掉</span><br></code></pre></td></tr></table></figure><p><strong>shared_ptr还会自动释放相关联的内存</strong><br>当动态对象不再被使用时，shared_ptr类还会自动释放动态对象，这一特性使得动态内存的使用变得非常容易。如果你将shared_ptr存放于一个容器中，而后不再需要全部元素，而只使用其中一部分，要记得用erase删除不再需要的那些元素。</p><p><strong>程序使用动态内存的原因</strong>：<br>（1）程序不知道自己需要使用多少对象<br>（2）程序不知道所需对象的准确类型<br>（3）程序需要在多个对象间共享数据</p><p><strong>定义和改变shared_ptr的其他方法</strong>：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220415225733681.png" alt="image-20220415225733681" style="zoom:80%;" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220415225811513.png" alt="image-20220415225811513" style="zoom:80%;" /><h2 id="unique-ptr">unique_ptr</h2><p>一个unique_ptr“拥有”它所指向的对象，某个时刻只能有一个unique_ptr指向一个给定的对象。没有类似<code>make_shared</code>的函数，所以定义unique_ptr的时候要绑定到一个new返回的指针上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">42</span>))</span></span>;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>unique_ptr不支持拷贝、赋值操作</p>          </div><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220415230616073.png" alt="image-20220415230616073" style="zoom: 33%;" /><p><strong>unique_ptr所有权的转移</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//所有权从p1转移给p2</span><br><span class="hljs-function">unique_ptr&lt;string&gt; <span class="hljs-title">p2</span><span class="hljs-params">(p1.release())</span></span>;<br><br><span class="hljs-comment">//将p3所有权转移给p2</span><br><span class="hljs-function">unique_ptr&lt;string&gt; <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-keyword">new</span> string(<span class="hljs-string">&quot;Tom&quot;</span>))</span></span>;<br>p2.<span class="hljs-built_in">reset</span>(p3.<span class="hljs-built_in">release</span>());    <span class="hljs-comment">//reset释放了p2原来指向的内存</span><br></code></pre></td></tr></table></figure><p>不能拷贝unique_ptr有一个例外：我们可以拷贝或赋值一个将要被销毁的unique_ptr.最常见的例子是从函数返回一个unique_ptr.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">clone</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//正确：从int*创建一个unique_ptr&lt;int&gt;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unique_ptr</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(p));<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以返回一个局部对象的拷贝：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">clone</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">unique_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ret</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(p))</span></span>;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="weak-ptr">weak_ptr</h2><p>weak_ptr是一种不控制所指向对象生存期的智能指针，它指向一个由shared_ptr管理的对象。将一个weak_ptr绑定到shared_ptr不会改变引用计数。</p><p>主要是用于解决shared_ptr循环引用的问题。</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/image-20220415231814811.png" alt="image-20220415231814811" style="zoom: 33%;" /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">42</span>);<br><span class="hljs-function">weak_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">wp</span><span class="hljs-params">(p)</span></span>;<br></code></pre></td></tr></table></figure><p>由于对象可能不存在，我们<strong>不能使用weak_ptr直接访问对象</strong>，而必须调用lock，此函数检查weak_ptr指向的对象是否存在。如果存在，lock返回一个指向共享对象的shared_ptr,如果不存在，lock将返回一个空指针。</p><div class="note note-success">            <p>面试官曾经问过。如果shared_ptr都已经释放掉了，那么weak_ptr还能够访问哪个对象吗？</p><p>将一个weak_ptr绑定到一个shared_ptr不会改变shared_ptr的引用计数。一旦最后一个指向对象的shared_ptr被销毁，对象就会被释放。即使有weak_ptr指向对象，对象也还是会被释放。在实际访问中，可以根据lock的返回值来判断对象是否还存在。</p>          </div><p><strong>shared_ptr可以直接赋值给一个weak_ptr，那么如何使用weak_ptr初始化一个shared_ptr呢？</strong></p><p>使用lock函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">shared_ptr&lt;<span class="hljs-type">int</span>&gt; ptr = <span class="hljs-built_in">make_shared</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>);  <br>weak_ptr&lt;<span class="hljs-type">int</span>&gt; ptr1 = ptr; <span class="hljs-comment">// 必须使用shared_ptr初始化weak_ptr  </span><br>shared_ptr&lt;<span class="hljs-type">int</span>&gt; ptr2 = ptr1.<span class="hljs-built_in">lock</span>(); <span class="hljs-comment">// 利用返回的shared_ptr初始化 </span><br></code></pre></td></tr></table></figure><h2 id="其他问题">其他问题</h2><h2 id="参考资料">参考资料</h2><p>[1]《C++ Primer中文版 第五版》</p><p>[2] <a href="https://blog.csdn.net/flowing_wind/article/details/81301001">https://blog.csdn.net/flowing_wind/article/details/81301001</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文解决位运算</title>
    <link href="/wuhlan3/2022/04/15/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <url>/wuhlan3/2022/04/15/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1>一文解决位运算</h1><h2 id="技法1：减一与">技法1：减一与</h2><p>我们先来关注一个特性：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">对于数字1111001000，对其减一可得：<br>1111000111<br>将两个数字做与运算，可得11110000000<br><span class="hljs-code">    1111001000</span><br><span class="hljs-section">&amp;    1111000111</span><br><span class="hljs-section">---------------</span><br><span class="hljs-code">    11110000000</span><br>我们会发现，经过n = n&amp;(n-1)之后，我们可以将最后的一个1消去<br></code></pre></td></tr></table></figure><p>有了这个特性，我们可以解决下面这些题目：</p><h3 id="231-2-的幂"><a href="https://leetcode-cn.com/problems/power-of-two/">231. 2 的幂</a></h3><p>解：2的幂特点就是，1、100、10000、10000000。只有1个“1”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPowerOfTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (n&gt;<span class="hljs-number">0</span>)&amp;&amp;(n&amp;(n<span class="hljs-number">-1</span>))==<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="342-4的幂"><a href="https://leetcode-cn.com/problems/power-of-four/">342. 4的幂</a></h3><p>解：在2的幂基础上，分类讨论。其中$2<sup>{2x+1}mod3==2$、$2</sup>{2x}mod3==1$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPowerOfFour</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n&gt;<span class="hljs-number">0</span> &amp;&amp; (n&amp;(n<span class="hljs-number">-1</span>))==<span class="hljs-number">0</span> &amp;&amp; (n%<span class="hljs-number">3</span> == <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="191-位1的个数"><a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位1的个数</a></h3><p>解：循环地将最后一个1消去，即可数出1的个数。</p><h3 id="461-汉明距离"><a href="https://leetcode-cn.com/problems/hamming-distance/">461. 汉明距离</a></h3><p>解：先取异或，然后统计1的个数。</p><h2 id="技法2：异或相消">技法2：异或相消</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">假设a != <span class="hljs-keyword">b</span><br>那么 a ^ <span class="hljs-keyword">b</span> ^ a = b<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="136-只出现一次的数字"><a href="https://leetcode-cn.com/problems/single-number/">136. 只出现一次的数字</a></h3><blockquote><p>进阶（虽然没有用到异或相消原则）</p><h3 id="137-只出现一次的数字-II"><a href="https://leetcode-cn.com/problems/single-number-ii/">137. 只出现一次的数字 II</a></h3><p>统计每个位是否为3的倍数，如果是，则ans的该位数字为1</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">32</span>; i ++)&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(auto x : nums)&#123;<br>        <span class="hljs-keyword">sum</span>  += (x &gt;&gt; i)&amp;<span class="hljs-number">1</span>;<br>    &#125;<br>    ans += <span class="hljs-keyword">sum</span>%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>? <span class="hljs-number">0</span> : <span class="hljs-number">1</span> &lt;&lt; i;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br></code></pre></td></tr></table></figure></blockquote><h2 id="技法3：正负值异或">技法3：正负值异或</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">low</span> = n &amp; (-n)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样可以获取最低位的1。可以解决下面这样的问题：</p><h3 id="260-只出现一次的数字-III"><a href="https://leetcode-cn.com/problems/single-number-iii/">260. 只出现一次的数字 III</a></h3><h2 id="技法4：数字交换">技法4：数字交换</h2><p><strong>加减数字交换</strong>(可能产生溢出)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = a + b<span class="hljs-comment">;</span><br><span class="hljs-attr">b</span> = a - b<span class="hljs-comment">;</span><br><span class="hljs-attr">a</span> = a - b<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>异或数字交换</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = a^b<span class="hljs-comment">;</span><br><span class="hljs-attr">b</span> = a^b<span class="hljs-comment">;</span><br><span class="hljs-attr">a</span> = a^b<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>为什么可以呢？我们展开来看看：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = a^b<span class="hljs-comment">;</span><br><span class="hljs-attr">b</span> = a^b = a^b^b = a<span class="hljs-comment">;</span><br><span class="hljs-attr">a</span> = a^b = a^b^a = b<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="其他">其他</h2><h3 id="693-交替位二进制数"><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">693. 交替位二进制数</a></h3><p>解：可以使用3（二进制为11）来循环作与运算</p><h3 id="371-两整数之和"><a href="https://leetcode-cn.com/problems/sum-of-two-integers/">371. 两整数之和</a></h3><p>解：使用与来计算进位，使用异或来计算当前为的数字。</p><h3 id="面试题-05-01-插入"><a href="https://leetcode-cn.com/problems/insert-into-bits-lcci/">面试题 05.01. 插入</a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/wuhlan3/2022/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/wuhlan3/2022/04/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1>单例模式</h1><h2 id="什么是单例模式？">什么是单例模式？</h2><p>单例模式是指整个系统生命周期内，保证一个类只能产生一个实例，确保该类的唯一性。</p><blockquote><p>例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p><p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p></blockquote><h2 id="单例模式有什么特点呢？">单例模式有什么特点呢？</h2><p>构造函数和析构函数为私有类型，目的是禁止外部构造和析构。</p><ul><li>构造函数和析构函数为私有类型，目的是禁止外部构造和析构。</li><li>拷贝构造函数和赋值构造函数是私有类型，目的是禁止外部拷贝和赋值，确保实例的唯一性。</li><li>类中有一个获取实例的静态方法，可以全局访问。</li></ul><h2 id="C-单例模式的三种实现">C++单例模式的三种实现</h2><h3 id="1-普通懒汉式单例（线程不安全）">1.普通懒汉式单例（线程不安全）</h3><p>懒汉式：单例实例在第一次被使用时才进行初始化。</p><p>第一次使用实例对象时，创建对象。进程启动无负载。多个单例实例启动顺序自由控制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton* s_instance;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125;;<br>    ~<span class="hljs-built_in">Singleton</span>() &#123;&#125;;<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton&amp;);<br>    Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton&amp;);<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(s_instance == <span class="hljs-literal">nullptr</span>) <br>            s_instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>        <span class="hljs-keyword">return</span> s_instance;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">deleteInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (s_instance)<br>        &#123;<br>            <span class="hljs-keyword">delete</span> s_instance;<br>            s_instance = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br>Singleton* Singleton::s_instance = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><blockquote><p>补充一下，类中static函数的作用：</p><p>在类里的函数前加static，则这个函数就与对象无关了，这个类产生的所有对象共用这一个静态成员函数，<br>静态成员函数可以在尚未创建任何对象时就被调用，他只可以操作类中的静态数据成员。</p></blockquote><h3 id="2-加锁的懒汉式单例（双检锁）">2.加锁的懒汉式单例（双检锁）</h3><p>双检锁，既保证了效率又保证了安全。</p><p>为什么要双检锁呢？假设有两个线程同时调用<code>getInstance()</code>，那么很有可能两个线程都通过了第一个判空，之后两个线程在争抢锁。这个时候里面就需要再次判空。外层的判空，是为了减少争抢锁排队的情况；内层的判空，是为了确保只new一个实例（重复new会导致内存泄漏，且违背单例模式）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> Singleton* s_instance;<br>    <span class="hljs-type">static</span> std::mutex s_mutex;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>() &#123;&#125;;<br>    ~<span class="hljs-built_in">Singleton</span>() &#123;&#125;;<br>    <span class="hljs-built_in">Singleton</span>(<span class="hljs-type">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>;<br>    Singleton&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Singleton&amp;) = <span class="hljs-keyword">delete</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//双检锁，第一次调用时，实例化</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(s_instance == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(s_mutex)</span></span>;<br>            <span class="hljs-keyword">if</span>(s_instance == <span class="hljs-literal">nullptr</span>)&#123;<br>                s_instance = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">return</span> s_instance;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">deleteInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(s_mutex)</span></span>;<br>        <span class="hljs-keyword">if</span> (s_instance)<br>        &#123;<br>            <span class="hljs-keyword">delete</span> s_instance;<br>            s_instance = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br><br>std::mutex Singleton::s_mutex;<br>Singleton* Singleton::s_instance = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><h3 id="3-饿汉模式">3.饿汉模式</h3><p>程序启动时就创建一个唯一的实例对象。</p><p>可能会导致进程启动慢，且如果有多个单例类对象实例启动顺序不确定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton* <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> &amp;s_instance;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-built_in">Singleton</span>()&#123;&#125;;<br>    <span class="hljs-built_in">Singleton</span>(Singleton <span class="hljs-type">const</span>&amp;) = <span class="hljs-keyword">delete</span>;<br>    Singleton&amp; <span class="hljs-keyword">operator</span>=(Singleton <span class="hljs-type">const</span>&amp;) = <span class="hljs-keyword">delete</span>;<br>    <span class="hljs-type">static</span> Singleton s_instance;<br>&#125;;<br>Singleton Singleton::s_instance; <span class="hljs-comment">// 在程序入口之前就完成单例对象的初始化</span><br></code></pre></td></tr></table></figure><h3 id="单例模式是否会被破坏？">单例模式是否会被破坏？</h3><ul><li>反射（虽然C++没有这个机制，但可以了解一下）</li><li>序列化（反序列化的过程中可能再创一个对象）</li><li>克隆</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【加密】2022旧章</title>
    <link href="/wuhlan3/2022/04/10/%E6%97%A5%E8%AE%B0/"/>
    <url>/wuhlan3/2022/04/10/%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="16872c660f542fe76cf5c56d0b6838af1271856f967af2841c2dc3c2d9b2cdea"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嘻嘻，有密码才能看喔</span>      </label>    </div>  </div></div><script data-pjax src="/wuhlan3/lib/hbe.js"></script><link href="/wuhlan3/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划快速</title>
    <link href="/wuhlan3/2021/12/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0/"/>
    <url>/wuhlan3/2021/12/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>动态规划</h1><h2 id="最大子数组和系列">最大子数组和系列</h2><h4 id="53-最大子数组和"><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h4><blockquote><p>我觉得这道题目的思想是： 走完这一生 如果我和你在一起会变得更好，那我们就在一起，否则我就丢下你。 我回顾我最光辉的时刻就是和不同人在一起，变得更好的最长连续时刻</p><p>——coolBoy</p></blockquote><p>一切的一切都是从这个演化而来的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> Max = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;n : nums)&#123;<br>        pre = <span class="hljs-built_in">max</span>(pre+n, n);<br>        Max = <span class="hljs-built_in">max</span>(Max, pre);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Max;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="152-乘积最大子数组"><a href="https://leetcode-cn.com/problems/maximum-product-subarray/">152. 乘积最大子数组</a></h4><p>区别在于，多出一个变量来记录最小的乘积，因为最小的很可能突然变为最大的。</p><h4 id="918-环形子数组的最大和"><a href="https://leetcode-cn.com/problems/maximum-sum-circular-subarray/">918. 环形子数组的最大和</a></h4><p>非常巧妙，用同样的方法分别记录<strong>最小数组和</strong>和<strong>最大数组和</strong>。假设数组没有回环，那么最大数组就是<code>max_sum</code>；假设数组回环了，就进行<code>total-min_sum</code></p><p>最后，还需要判断一下整个子数组都是负数的情况。</p><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/1639228731-hwXkOI-image.png" alt="image.png"></p><h4 id="面试题-17-24-最大子矩阵"><a href="https://leetcode-cn.com/problems/max-submatrix-lcci/">面试题 17.24. 最大子矩阵</a></h4><p>使用<code>top</code>和<code>bottom</code>来遍历不同行数的矩阵。对于每一个固定行数的矩阵，可以采用<strong>前缀和</strong>的方式计算每列的和。之后转化为一维的<strong>最大子数组和</strong>问题。</p><h4 id="363-矩形区域不超过-K-的最大数值和"><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/">363. 矩形区域不超过 K 的最大数值和</a></h4><p>有点困难，之后再细看</p><h2 id="打家劫舍问题">打家劫舍问题</h2><h4 id="198-打家劫舍"><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h4><p>不算特别难，dp[i]设定为到达第i间房子之前能会获得的最大收益。</p><h4 id="213-打家劫舍-II"><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. 打家劫舍 II</a></h4><p>在上个问题的基础上，划分为抢第一间房子；不抢第一间房子。</p><h4 id="740-删除并获得点数"><a href="https://leetcode-cn.com/problems/delete-and-earn/">740. 删除并获得点数</a></h4><p>可以转换为打家劫舍问题</p><h4 id="1388-3n-块披萨"><a href="https://leetcode-cn.com/problems/pizza-with-3n-slices/">1388. 3n 块披萨</a></h4><p>比较麻烦。题意可概括为，求一个3n大小的循环数组中长度为n的不连续子数组的最大和。需要用到打家劫舍II的思想，来处理循环数组问题。</p><p>将<code>dp[i][j]</code>定义为到第i个元素为止，选择j个元素的最大和。</p><h2 id="其他单串dp-i-问题">其他单串dp[i]问题</h2><h4 id="32-最长有效括号"><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/">32. 最长有效括号</a></h4><h4 id="413-等差数列划分"><a href="https://leetcode-cn.com/problems/arithmetic-slices/">413. 等差数列划分</a></h4><h4 id="91-解码方法"><a href="https://leetcode-cn.com/problems/decode-ways/">91. 解码方法</a></h4><h4 id="132-分割回文串-II"><a href="https://leetcode-cn.com/problems/palindrome-partitioning-ii/">132. 分割回文串 II</a></h4>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊蹄甲</title>
    <link href="/wuhlan3/2021/12/07/%E7%BE%8A%E8%B9%84%E7%94%B2/"/>
    <url>/wuhlan3/2021/12/07/%E7%BE%8A%E8%B9%84%E7%94%B2/</url>
    
    <content type="html"><![CDATA[<center><h3>羊蹄甲</h3></center><center>羊蹄甲，羊蹄甲，</center><center>叶子随风摇曳，</center><center>是一只只活泼的小脚丫。</center><center>花开满树满枝桠，</center><center>不畏严冬，灿若云霞。</center><br/><center>紫荆花，紫荆花，</center><center>我的手指在空中比划，</center><center>脑海浮现熟悉的名字，</center><center>我们异口同声地说出“羊蹄甲”。</center><br/><center>我们，我们，</center><center>不过是臆想的我们。</center><center>我眼中独家的回忆，</center><center>她眼中《沉默的尬尬》。</center><br/><center>羊蹄甲花期全年。</center><center>在管理学院外，</center><center>在饭堂边上，</center><center>在格致园前，</center><center>在贝岗街旁，</center><center>红花、白花、宫粉，</center><center>都骄傲放肆地迎风歌唱。</center><center>我有意去寻找，</center><center>又因他人不能发现而失望。</center><br/><center>倒也不必为此悲伤，</center><center>它们为自己而绽放。</center></br><br/>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go学习之路</title>
    <link href="/wuhlan3/2021/10/08/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <url>/wuhlan3/2021/10/08/Go%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1>零、写在前面</h1><p>Go 语言最主要的特性：</p><ul><li>自动垃圾回收</li><li>更丰富的内置类型</li><li>函数多返回值</li><li>错误处理</li><li>匿名函数和闭包</li><li>类型和接口</li><li>并发编程</li><li>反射</li><li>语言交互性</li></ul><p>由于Go和C/C++在最基本的语言方面还是由很多类似的地方的，所以我在学习的时候，对前面的部分仅仅是简单略过。主要抓住该语言最重要的特点，如切片、方法、接口、goroutine、通道等进行深入学习</p><h1>一、基础语法篇</h1><p>注意，与C不同的是：</p><div class="note note-primary">            <p>花括号{不能单独用于一行</p>          </div><h2 id="行分隔符">行分隔符</h2><p>在Go语言中，不需要像<code>;</code>进行语句划分的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;Hello, Wuhlan&quot;</span>)<br></code></pre></td></tr></table></figure><p>当然，如果硬是要写在同一行，可以使用<code>;</code>进行划分，但不推荐</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);fmt.Println(<span class="hljs-string">&quot;Hello, Wuhlan&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="变量声明方式">变量声明方式</h2><h4 id="方法一：指定类型">方法一：指定类型</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> identifier <span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> num <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>如果没有初始化，则设为零值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> num <span class="hljs-type">int</span>            <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span>        <span class="hljs-comment">// &quot;&quot;</span><br><span class="hljs-keyword">var</span> b   <span class="hljs-type">bool</span>        <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>以下的值，都设为<code>nil</code>，类似于C/C++中的<code>NULL</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a *<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> a []<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> a <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> a <span class="hljs-type">error</span> <span class="hljs-comment">// error 是接口</span><br></code></pre></td></tr></table></figure><h4 id="方法二：自动判断类型">方法二：自动判断类型</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="方法三：省略var">方法三：省略var</h4><p>使用<code>:=</code>，这是一个声明语句（左侧如果没有声明新的变量，就产生编译错误）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span><br><span class="hljs-comment">//相等于</span><br><span class="hljs-built_in">num</span> := <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="格式化输出字符串">格式化输出字符串</h2><ul><li><p>使用<code>Printf</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Printf(<span class="hljs-string">&quot;%d,%s&quot;</span>,<span class="hljs-number">666</span>,<span class="hljs-string">&quot;Wuhlan&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Sprintf</code>和<code>Println</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;%d,%s&quot;</span><br>      <span class="hljs-keyword">var</span> num <span class="hljs-type">int</span> = <span class="hljs-number">666</span><br>      <span class="hljs-keyword">var</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;Wuhlan&quot;</span><br>      str = fmt.Sprintf(str,num,name)<br>      fmt.Println(str)<br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">//也可以这样写</span><br>    <span class="hljs-keyword">var</span> num <span class="hljs-type">int</span> = <span class="hljs-number">666</span><br>    <span class="hljs-keyword">var</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;Wuhlan&quot;</span><br>    str := fmt.Sprintf(<span class="hljs-string">&quot;%d,%s&quot;</span>, num, name)<br>    fmt.Println(str)<br></code></pre></td></tr></table></figure></li></ul><h2 id="数据类型">数据类型</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64等，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><strong>派生类型:</strong> 包括：(a) 指针类型(b) 数组类型© 结构化类型(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型(h) Map 类型</td></tr></tbody></table><p>Go是一个强类型语言，混合n使用类型是不允许的。比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">package main</span><br><span class="hljs-function"></span><br><span class="hljs-function">func <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>        var defaultName = <span class="hljs-string">&quot;Sam&quot;</span> <span class="hljs-comment">// 允许</span><br>        type myString string    <span class="hljs-comment">//自定义一个myString类型</span><br>        var customName myString = <span class="hljs-string">&quot;Sam&quot;</span> <span class="hljs-comment">// 允许</span><br>        customName = defaultName <span class="hljs-comment">// 不允许</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并行赋值">并行赋值</h2><p>这是一个很有意思的GO语言的特点。</p><p>如果想交换两个变量的值，我相信大部分人第一时间想到的是使用一个临时变量<code>temp</code>作为中介绍。但是go语言并不需要，你可以猜猜下面这段代码会发生什么？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">2</span><br>a,b = b,a<br>fmt.Println(a,b)<br></code></pre></td></tr></table></figure><p>没错，a和b竟然可以直接交换！！！它是通过<strong>并行</strong>的方式交换的，这种方式还常用于函数的返回值中。</p><p>另外，根据GO语言的特点，我们必须使用到所有声明的函数，所以，如果你不想使用某个变量，可以用<code>_</code>来替代</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> _,b = <span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>fmt.Println(b)<br></code></pre></td></tr></table></figure><h2 id="分支语句">分支语句</h2><p><code>if-else</code>注意的点如下：</p><ul><li>分支判断条件可以不使用<code>()</code>，当然，也可以使用</li><li>花括号必须与<code>if</code>或<code>else</code>在同一行</li><li>无论有几条条件语句，左右 <code>&#123;&#125; </code>花括号不能省略</li></ul><div class="note note-primary">            <p>GO语言没有三目运算符<code>? :</code></p>          </div><p><code>switch-case</code>注意的点如下：</p><ul><li><p>支持多条件匹配</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span>&#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>:<br>   <span class="hljs-keyword">default</span>:<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>不同的 case 之间不使用 break 分隔，默认只会执行一个 case。</p></li><li><p>如果想要执行多个 case，需要使用 fallthrough 关键字，也可用 break 终止。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    ...<br>    <span class="hljs-keyword">if</span>(...)&#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br><br>    <span class="hljs-keyword">fallthrough</span> <span class="hljs-comment">// 此时switch(1)会执行case1和case2，但是如果满足if条件，则只执行case 1</span><br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    ...<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>没有<code>switch</code>的switch，默认<code>switch(true)</code>，这种形式能将一长串<code>if-then-else</code>写得更加清晰。</p></li></ul><h2 id="循环语句">循环语句</h2><p>一般情况注意的点如下：</p><ul><li>初始化语句和后置语句是可选的。比如：<code>for ;i&lt;100;&#123;&#125;</code></li><li>Go中没有while，将for中的<code>;</code>去掉，便相当于while</li><li>无限循环还可以直接省略掉条件，写成<code>for&#123;&#125;</code></li></ul><p><code>for-each range</code>可以对数组和切片进行迭代：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        strings := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;Wuhlan&quot;</span>, <span class="hljs-string">&quot;miaomiaomiao&quot;</span>&#125;<br>        <span class="hljs-keyword">for</span> i, s := <span class="hljs-keyword">range</span> strings &#123;<br>                fmt.Println(i, s)<br>        &#125;<br>        numbers := [<span class="hljs-number">6</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;<br>        <span class="hljs-keyword">for</span> i,x:= <span class="hljs-keyword">range</span> numbers &#123;<br>                fmt.Printf(<span class="hljs-string">&quot;第 %d 位 x 的值 = %d\n&quot;</span>, i,x)<br>        &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">0</span> Wuhlan<br><span class="hljs-number">1</span> miaomiaomiao<br>第 <span class="hljs-number">0</span> 位 x 的值 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>第 <span class="hljs-number">1</span> 位 x 的值 <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>第 <span class="hljs-number">2</span> 位 x 的值 <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>第 <span class="hljs-number">3</span> 位 x 的值 <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br>第 <span class="hljs-number">4</span> 位 x 的值 <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>第 <span class="hljs-number">5</span> 位 x 的值 <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="defer语句">defer语句</h2><p>defer 语句会将函数推迟到外层函数返回之后执行。</p><p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。</p><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;counting&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(i)<br>    &#125;<br><br>    fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">counting<br>done<br><span class="hljs-number">9</span><br><span class="hljs-number">8</span><br><span class="hljs-number">7</span><br><span class="hljs-number">6</span><br><span class="hljs-number">5</span><br><span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="函数">函数</h2><p>函数定义方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">func 函数名(<span class="hljs-selector-attr">[参数列表]</span>) <span class="hljs-selector-attr">[返回值列表]</span> &#123;<br>   函数体<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基本的函数">基本的函数</h3><p>一个简单的加法函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">7</span><br>        fmt.Println(add(a,b))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多返回值函数">多返回值函数</h3><p>返回多个值的函数（随便写的，写的很爽嘿嘿😋）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>,<span class="hljs-type">int</span>) &#123;<br>    a,b = b+b,a+a<br>    <span class="hljs-keyword">return</span> a , b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">7</span><br>        fmt.Println(add(a,b))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">14 </span><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>有的时候我们可能并不需要多个返回值中的某几个值，可以使用<strong>空白符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>    a, b = b+b, a+a<br>    <span class="hljs-keyword">return</span> a, b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">7</span><br>    c, _ := add(a, b)        <span class="hljs-comment">//使用空白符来接收不想要的值</span><br>    fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="命名返回值">命名返回值</h3><p>从函数中可以返回一个命名值。一旦命名了返回值，可以认为这些值在函数第一行就被声明为变量了。</p><p>我们稍微对上面的例子进行修改：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>func <span class="hljs-built_in">add</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> int) (ret1, ret2 int) &#123;<br>    ret1, ret2 = b+<span class="hljs-selector-tag">b</span>, a+<span class="hljs-selector-tag">a</span><br>    return<br>&#125;<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-number">6</span><br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> = <span class="hljs-number">7</span><br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">add</span>(<span class="hljs-selector-tag">a</span>, b))<br>&#125;<br></code></pre></td></tr></table></figure><h1>二、进阶语法篇</h1><p>其实是基础的太多了，用这个来划分一下。下面的还是很基础喔！</p><h2 id="包">包</h2><h3 id="基本编译与运行">基本编译与运行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// geometry.go</span><br><span class="hljs-keyword">package</span> main     <span class="hljs-comment">//指定该文件属于main包</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-comment">//导入一个已存在的包</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;Geometrical shape properties&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在执行<code>go install geometry</code>之后，会在<code>bin</code>文件夹里生成一个<code>geometry.exe</code></p><p>结构如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">src<br>    <span class="hljs-built_in">geometry</span>文件夹<br>        gemometry.go<br>bin<br>    <span class="hljs-built_in">geometry</span>.exe<br></code></pre></td></tr></table></figure><h3 id="调用自定义包">调用自定义包</h3><p>文件夹结构如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">src<br>    geometry<br>        geometry.<span class="hljs-built_in">go</span><br>        <span class="hljs-built_in">rectangle</span><br>            rectprops.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p>rectprops.go如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// rectprops.go</span><br><span class="hljs-keyword">package</span> rectangle<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;math&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Area</span><span class="hljs-params">(<span class="hljs-built_in">len</span>, wid <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>    area := <span class="hljs-built_in">len</span> * wid<br>    <span class="hljs-keyword">return</span> area<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Diagonal</span><span class="hljs-params">(<span class="hljs-built_in">len</span>, wid <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>    diagonal := math.Sqrt((<span class="hljs-built_in">len</span> * <span class="hljs-built_in">len</span>) + (wid * wid))<br>    <span class="hljs-keyword">return</span> diagonal<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，rectangle包里的函数都是首字母大写的。在Go中，任何以<strong>大写字母</strong>开头的变量或者函数都是<strong>被导出的变量名/函数名</strong>。只有这些名字才可以在main包中进行访问。</p><h3 id="init函数">init函数</h3><p>每一个包里都可以包含一个init函数。是在一个包初始化的时候自动运行的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// geometry.go</span><br><span class="hljs-function">package main</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">import</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-string">&quot;fmt&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-string">&quot;geometry/rectangle&quot;</span> <span class="hljs-comment">// 导入自定义包</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-string">&quot;log&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="hljs-function"> * 1. 包级别变量</span></span><br><span class="hljs-comment"><span class="hljs-function"> */</span></span><br><span class="hljs-function">var rectLen, rectWidth float64 </span>= <span class="hljs-number">6</span>, <span class="hljs-number">7</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*2. init 函数会检查长和宽是否大于0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">func <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;main package initialized&quot;</span>)<br>    <span class="hljs-keyword">if</span> rectLen &lt; <span class="hljs-number">0</span> &#123;<br>        log.<span class="hljs-built_in">Fatal</span>(<span class="hljs-string">&quot;length is less than zero&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> rectWidth &lt; <span class="hljs-number">0</span> &#123;<br>        log.<span class="hljs-built_in">Fatal</span>(<span class="hljs-string">&quot;width is less than zero&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function">func <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-string">&quot;Geometrical shape properties&quot;</span>)<br>    fmt.<span class="hljs-built_in">Printf</span>(<span class="hljs-string">&quot;area of rectangle %.2f\n&quot;</span>, rectangle.<span class="hljs-built_in">Area</span>(rectLen, rectWidth))<br>    fmt.<span class="hljs-built_in">Printf</span>(<span class="hljs-string">&quot;diagonal of the rectangle %.2f &quot;</span>, rectangle.<span class="hljs-built_in">Diagonal</span>(rectLen, rectWidth))<br>&#125;<br></code></pre></td></tr></table></figure><p>如果将<code>rectLen</code>将改为-6。则会有日志报错：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PS E:\go\src&gt; go run geometry    <br>main package initialized<br><span class="hljs-number">2021</span>/<span class="hljs-number">10</span>/<span class="hljs-number">09</span> <span class="hljs-number">14</span>:<span class="hljs-number">28</span>:<span class="hljs-number">40</span> length is less than zero<br><span class="hljs-keyword">exit</span> status <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="导入包而不使用">导入包而不使用</h3><p>一般情况下，导入某个包而不使用它，将会报错。有两种方法可以先导入而暂不使用：</p><p><strong>1.使用错误屏蔽器</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;geometry/rectangle&quot;</span> <br>)<br><br><span class="hljs-keyword">var</span> _ = rectangle.Area <span class="hljs-comment">// 错误屏蔽器</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.使用空白标识符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <br><br><span class="hljs-keyword">import</span> (<br>    _ <span class="hljs-string">&quot;geometry/rectangle&quot;</span> <br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组">数组</h2><p>初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>]<span class="hljs-type">float32</span>&#123;<span class="hljs-number">1000.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">50.0</span>&#125;<br></code></pre></td></tr></table></figure><p>快速初始化数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">arr := [<span class="hljs-number">5</span>]<span class="hljs-type">float32</span>&#123;<span class="hljs-number">1000.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">50.0</span>&#125;<br></code></pre></td></tr></table></figure><p>长度不确定时：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> arr = [...]<span class="hljs-type">float32</span>&#123;<span class="hljs-number">1000.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">50.0</span>&#125;<br>或<br>arr := [...]<span class="hljs-type">float32</span>&#123;<span class="hljs-number">1000.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">50.0</span>&#125;<br></code></pre></td></tr></table></figure><p>使用下标来初始化元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">balance := [<span class="hljs-number">5</span>]<span class="hljs-type">float32</span>&#123;<span class="hljs-number">1</span>:<span class="hljs-number">2.0</span>,<span class="hljs-number">3</span>:<span class="hljs-number">7.0</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="指针">指针</h2><p>与C类似，需要注意的有两点：</p><ul><li><code>* int</code>，这是反过来的！！！</li><li>空指针，<code>nil</code></li><li>Go并不支持指针运算。比如说如果p是一个指针，<code>p++</code>是不被允许的。</li></ul><h2 id="切片">切片</h2><p>Go 语言切片是对数组的抽象。切片本身不拥有任何数据。它们只是对现有数组的引用。</p><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p><h3 id="切片的定义">切片的定义</h3><ul><li><p>使用未指定大小的数组来定义：<code>var 标识符 []类型</code></p></li><li><p>使用<code>make()</code>函数来创建切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> slice1 []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>)<br>或<br>slice1 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure></li><li><p>也可以指定容量<code>make([]int, len, capacity)</code></p></li></ul><h3 id="切片初始化">切片初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-type">int</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;                <span class="hljs-comment">//直接初始化切片，[]是切片类型</span><br>s := arr[:]                        <span class="hljs-comment">//对arr的引用</span><br>s := arr[startIndex:endIndex]    <span class="hljs-comment">//将 arr 中从下标 startIndex 到 endIndex-1 创建一个新的切片。</span><br>s := arr[startIndex:] <br>s := arr[:endIndex] <br>s1 := s[startIndex:endIndex]     <span class="hljs-comment">//切片初始化为s1</span><br>s :=<span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-built_in">len</span>,<span class="hljs-built_in">cap</span>)         <br></code></pre></td></tr></table></figure><h3 id="切片的长度和容量">切片的长度和容量</h3><p><code>len()</code>和<code>cap()</code>可以获取切片的长度和容量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> arr =  []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br>    slice1 := arr[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br>    fmt.Println(slice1)<br>    fmt.Println(<span class="hljs-built_in">len</span>(slice1))<br>    fmt.Println(<span class="hljs-built_in">cap</span>(slice1))<br><br>    <span class="hljs-keyword">var</span> slice2 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>)<br>    slice2 = arr[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>]<br>    fmt.Println(slice2)<br>    fmt.Println(<span class="hljs-built_in">len</span>(slice2))<br>    fmt.Println(<span class="hljs-built_in">cap</span>(slice2))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1 2 3]</span><br><span class="hljs-number">3</span><br><span class="hljs-number">7</span><br><span class="hljs-string">[2 3 4 5]</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>可以观察一下，cap到底是怎么计算的</p><div class="note note-success">            <p>切片的长度是切片中的元素数。<strong>切片的容量是从创建切片索引开始的底层数组中元素数。</strong></p>          </div><h3 id="切片的扩充和拷贝">切片的扩充和拷贝</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> numbers []<span class="hljs-type">int</span><br>   printSlice(numbers)<br><br>   <span class="hljs-comment">// 向切片添加一个元素 </span><br>   numbers = <span class="hljs-built_in">append</span>(numbers, <span class="hljs-number">0</span>)<br>   printSlice(numbers)<br><br>   <span class="hljs-comment">// 同时添加多个元素</span><br>   numbers = <span class="hljs-built_in">append</span>(numbers, <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>   printSlice(numbers)<br><br>   <span class="hljs-comment">//创建切片 numbers1 是之前切片的两倍容量</span><br>   numbers1 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(numbers), (<span class="hljs-built_in">cap</span>(numbers))*<span class="hljs-number">2</span>)<br><br>   <span class="hljs-comment">// 拷贝 numbers 的内容到 numbers1</span><br>   <span class="hljs-built_in">copy</span>(numbers1,numbers)<br>   printSlice(numbers1)  <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printSlice</span><span class="hljs-params">(x []<span class="hljs-type">int</span>)</span></span>&#123;<br>   fmt.Printf(<span class="hljs-string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="hljs-built_in">len</span>(x),<span class="hljs-built_in">cap</span>(x),x)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">len</span>=<span class="hljs-number">0</span> cap=<span class="hljs-number">0</span> slice=[]<br><span class="hljs-attribute">len</span>=<span class="hljs-number">1</span> cap=<span class="hljs-number">1</span> slice=[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">len</span>=<span class="hljs-number">5</span> cap=<span class="hljs-number">6</span> slice=[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br><span class="hljs-attribute">len</span>=<span class="hljs-number">5</span> cap=<span class="hljs-number">12</span> slice=[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h3 id="切片与数组的区别">切片与数组的区别</h3><p>切片文法类似于没有长度的数组文法。</p><p>这是一个数组文法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">[<span class="hljs-number">3</span>]<span class="hljs-type">bool</span>&#123;<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure><p>下面这样则会创建一个和上面相同的数组，然后构建一个引用了它的切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">[]<span class="hljs-type">bool</span>&#123;<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>切片并不存储任何数据，它只是描述了底层数组中的一段。</li><li>更改切片的元素会修改其底层数组中对应的元素。</li><li>与它共享底层数组的切片都会观测到这些修改。</li></ul><p>观察下面的程序，猜猜会发生什么？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">change</span><span class="hljs-params">(s ...<span class="hljs-type">string</span>)</span></span> &#123;<br>    s[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Go&quot;</span><br>    s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">&quot;playground&quot;</span>)<br>    fmt.Println(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    welcome := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;<br>    change(welcome...)<br>    fmt.Println(welcome)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存优化">内存优化</h3><p>切片持有对底层数组的引用。只要切片在内存中，数组就不能被垃圾回收。在内存管理方面，这是需要注意的。让我们假设我们有一个非常大的数组，我们只想处理它的一小部分。然后，我们由这个数组创建一个切片，并开始处理切片。这里需要重点注意的是，<strong>在切片引用时数组仍然存在内存中</strong>。</p><p>一种解决方法是使用 copy 函数 <code>func copy(dst，src[]T)int</code> 来生成一个切片的副本。这样我们可以使用新的切片，原始数组可以被<strong>垃圾回收</strong>。</p><h2 id="Map">Map</h2><h3 id="Map的创建与初始化">Map的创建与初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/* 声明变量，默认 map 是 nil */</span><br><span class="hljs-keyword">var</span> map_variable <span class="hljs-keyword">map</span>[key_data_type]value_data_type<br><br><span class="hljs-comment">/* 使用 make 函数 */</span><br>map_variable := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[key_data_type]value_data_type)<br></code></pre></td></tr></table></figure><p>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对。</p><p>所以必须进行初始化</p><h3 id="使用range迭代">使用range迭代</h3><p>使用键进行遍历即可</p><h3 id="查看是否Key存在">查看是否Key存在</h3><p>可以使用<code>key,ok := mymap[value]</code></p><p>若key存在，则<code>ok == true</code>；否则<code>ok == false</code></p><h3 id="范围Range">范围Range</h3><p>range 可用于迭代数组、切片、通道、集合</p><h3 id="delete-函数">delete()函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">delete</span>(mymap, Key)<br></code></pre></td></tr></table></figure><h3 id="参考例程">参考例程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//创建并初始化</span><br>    countryCapitalMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)        <br><br>    countryCapitalMap [ <span class="hljs-string">&quot;France&quot;</span> ] = <span class="hljs-string">&quot;巴黎&quot;</span><br>    countryCapitalMap [ <span class="hljs-string">&quot;Italy&quot;</span> ] = <span class="hljs-string">&quot;罗马&quot;</span><br>    countryCapitalMap [ <span class="hljs-string">&quot;Japan&quot;</span> ] = <span class="hljs-string">&quot;东京&quot;</span><br>    countryCapitalMap [ <span class="hljs-string">&quot;India &quot;</span> ] = <span class="hljs-string">&quot;新德里&quot;</span><br>    <span class="hljs-comment">//使用range进行遍历</span><br>    <span class="hljs-keyword">for</span> country := <span class="hljs-keyword">range</span> countryCapitalMap &#123;<br>        fmt.Println(country, <span class="hljs-string">&quot;首都是&quot;</span>, countryCapitalMap [country])<br>    &#125;<br>    <span class="hljs-comment">//可以判断key是否存在</span><br>    capital, ok := countryCapitalMap [ <span class="hljs-string">&quot;American&quot;</span> ]<br>    <span class="hljs-keyword">if</span> (ok) &#123;<br>        fmt.Println(<span class="hljs-string">&quot;American 的首都是&quot;</span>, capital)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;American 的首都不存在&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//删除某个map</span><br>    <span class="hljs-built_in">delete</span>(countryCapitalMap, <span class="hljs-string">&quot;France&quot;</span>)<br>    fmt.Println()<br>    <span class="hljs-keyword">for</span> country := <span class="hljs-keyword">range</span> countryCapitalMap &#123;<br>        fmt.Println(country, <span class="hljs-string">&quot;首都是&quot;</span>, countryCapitalMap [country])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">package main</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">import</span> <span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-string">&quot;fmt&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">func <span class="hljs-title">printBytes</span><span class="hljs-params">(s string)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>        fmt.<span class="hljs-built_in">Printf</span>(<span class="hljs-string">&quot;%x &quot;</span>, s[i])<br>    &#125;<br>&#125;<br><br><span class="hljs-function">func <span class="hljs-title">printChars</span><span class="hljs-params">(s string)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>        fmt.<span class="hljs-built_in">Printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,s[i])<br>    &#125;<br>&#125;<br><br><span class="hljs-function">func <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    name = <span class="hljs-string">&quot;Señor&quot;</span><br>    <span class="hljs-built_in">printBytes</span>(name)<br>    fmt.<span class="hljs-built_in">Printf</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-built_in">printChars</span>(name)<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">53</span> <span class="hljs-number">65</span> c3 b1 <span class="hljs-number">6</span>f <span class="hljs-number">72</span><br>S e Ã ± o r<br></code></pre></td></tr></table></figure><p>可以看到，出现了一个小bug。这是因为<code>ñ</code>在UTF-8中是占用了两个字节的。那么我们该如何获取每一个字符呢？</p><h3 id="rune">rune</h3><p>rune 是 Go 语言的内建类型，它也是 int32 的别称。在 Go 语言中，<strong>rune 表示一个代码点</strong>。代码点无论占用多少个字节，都可以用一个 rune 来表示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printBytes</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%x &quot;</span>, s[i])<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printChars</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br>    runes := []<span class="hljs-type">rune</span>(s)<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(runes); i++ &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%c &quot;</span>,runes[i])<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    name := <span class="hljs-string">&quot;Señor&quot;</span><br>    printBytes(name)<br>    fmt.Printf(<span class="hljs-string">&quot;\n&quot;</span>)<br>    printChars(name)<br>&#125;<br></code></pre></td></tr></table></figure><p>更简单的遍历字符串方法是使用<code>for range</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printCharsAndBytes</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> index, <span class="hljs-type">rune</span> := <span class="hljs-keyword">range</span> s &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%c starts at byte %d\n&quot;</span>, <span class="hljs-type">rune</span>, index)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串是不可修改的">字符串是不可修改的</h3><p>要想修改，需要先将字符串转换为一个rune切片。然后这个切片可以进行任何想要的改变，然后再转化为一个字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mutate</span><span class="hljs-params">(s []<span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">string</span> &#123;  <br>    s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span> <br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(s)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    h := <span class="hljs-string">&quot;hello&quot;</span><br>    fmt.Println(mutate([]<span class="hljs-type">rune</span>(h)))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法">方法</h2><p>Go 没有类。不过你可以为结构体类型定义方法。(当然也可以为非结构体类型定义方法)</p><p>方法就是一类带特殊的 <strong>接收者</strong> 参数的函数。</p><p>方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</p><p>在此例中，<code>Abs</code> 方法拥有一个名为 <code>v</code>，类型为 <code>Vertex</code> 的接收者。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>    X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Vertex)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    v := Vertex&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>    fmt.Println(v.Abs())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="值接收器和指针接收器">值接收器和指针接收器</h3><p>经过测试，我总结了他们的特性：</p><ul><li>无论是值接收器还是指针接收器，既可以使用指向结构体的指针来调用，也可以直接使用结构体来调用。（Go语言或许是想减少我们的错误，两种方法都可以）</li><li>而最终的效果——方法内部的改变对于调用者是否可见，取决于方法是<strong>值接收器</strong>和<strong>指针接收器</strong>，而和调用者没有关系。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用值接收器的方法。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span></span> changeName(newName <span class="hljs-type">string</span>) &#123;<br>    e.name = newName<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用指针接收器的方法。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Employee)</span></span> changeAge(newAge <span class="hljs-type">int</span>) &#123;<br>    e.age = newAge<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    e := Employee&#123;<br>        name: <span class="hljs-string">&quot;Mark Andrew&quot;</span>,<br>        age:  <span class="hljs-number">50</span>,<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Employee name before change: %s&quot;</span>, e.name)<br>    e.changeName(<span class="hljs-string">&quot;Michael Andrew&quot;</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;\nEmployee name after change: %s&quot;</span>, e.name)<br><br>    fmt.Printf(<span class="hljs-string">&quot;\n\nEmployee age before change: %d&quot;</span>, e.age)<br>    e.changeAge(<span class="hljs-number">51</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;\nEmployee age after change: %d&quot;</span>, e.age)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq">Employee name <span class="hljs-built_in">before</span> <span class="hljs-built_in">change</span>: Mark Andrew<br>Employee name <span class="hljs-built_in">after</span> <span class="hljs-built_in">change</span>: Mark Andrew<br><br>Employee age <span class="hljs-built_in">before</span> <span class="hljs-built_in">change</span>: <span class="hljs-number">50</span><br>Employee age <span class="hljs-built_in">after</span> <span class="hljs-built_in">change</span>: <span class="hljs-number">51</span><br></code></pre></td></tr></table></figure><h2 id="接口">接口</h2><p>接口主要是用于对不同的结构体，赋予<strong>同一个名称的函数</strong>（该函数针对不同结构体可以有不同的操作）</p><p>通过下面这个程序，我们可以看看到调用Test接口的类型为<code>main.MyFloat</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">interface</span> &#123;  <br>    Tester()<br>&#125;<br><br><span class="hljs-keyword">type</span> MyFloat <span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m MyFloat)</span></span> Tester() &#123;  <br>    fmt.Println(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(t Test)</span></span> &#123;  <br>    fmt.Printf(<span class="hljs-string">&quot;Interface type %T value %v\n&quot;</span>, t, t)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> t Test<br>    f := MyFloat(<span class="hljs-number">89.7</span>)<br>    t = f<br>    describe(t)<br>    t.Tester()<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Interface</span> <span class="hljs-keyword">type</span> <span class="hljs-type">main.MyFloat </span>value <span class="hljs-number">89.7</span>  <br><span class="hljs-number">89.7</span><br></code></pre></td></tr></table></figure><h3 id="空接口">空接口</h3><p>没有包含方法的接口称为空接口。空接口表示为 <code>interface&#123;&#125;</code>。由于空接口没有方法，因此所有类型都实现了空接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;  <br>    fmt.Printf(<span class="hljs-string">&quot;Type = %T, value = %v\n&quot;</span>, i, i)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    s := <span class="hljs-string">&quot;Hello World&quot;</span><br>    describe(s)<br>    i := <span class="hljs-number">55</span><br>    describe(i)<br>    strt := <span class="hljs-keyword">struct</span> &#123;<br>        name <span class="hljs-type">string</span><br>    &#125;&#123;<br>        name: <span class="hljs-string">&quot;Naveen R&quot;</span>,<br>    &#125;<br>    describe(strt)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Type</span> <span class="hljs-type">= </span>string, value = Hello World  <br><span class="hljs-keyword">Type</span> <span class="hljs-type">= </span>int, value = <span class="hljs-number">55</span>  <br><span class="hljs-keyword">Type</span> <span class="hljs-type">= </span>struct &#123; name string &#125;, value = &#123;Naveen R&#125;<br></code></pre></td></tr></table></figure><h1>三、并行相关</h1><h2 id="Goroutine">Goroutine</h2><p>goroutine是由Go运行时管理的轻量级线程。</p><ul><li>Go 协程会复用（Multiplex）数量更少的 OS 线程。即使程序有数以千计的 Go 协程，也可能只有一个线程。如果该线程中的某一 Go 协程发生了阻塞（比如说等待用户输入），那么系统会再创建一个 OS 线程，并把其余 Go 协程都移动到这个新的 OS 线程。</li><li>使用信道（channel）来进行通信</li></ul><p>当我们直接运行以下代码的时候，会发现和我们想象的不一样，程序只输出了&quot;main&quot;，这是为什么捏？这是因为<code>go hello()</code>启动了一个新的协程，然后<code>main()</code>运行在一个特殊的协程上，称为 Go 主协程<code>Main Goroutine</code>。</p><div class="note note-success">            <p>如果 Go 主协程终止，则程序终止，于是其他 Go 协程也不会继续运行。</p>          </div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">go</span> hello()<br>    fmt.Println(<span class="hljs-string">&quot;main&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法，可以是使主协程延迟一段时间，等其他协程运行结束后，再终止主协程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">go</span> hello()<br>    fmt.Println(<span class="hljs-string">&quot;main&quot;</span>)<br>    time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用多个goroutine同样可以使用延迟的方式来控制运行的顺序</p><h2 id="信道channel">信道channel</h2><h3 id="什么是信道">什么是信道</h3><p>信道可以想象成 Go 协程之间通信的管道。如同管道中的水会从一端流到另一端，通过使用信道，数据也可以从一端发送，在另一端接收。</p><h3 id="信道的定义">信道的定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-keyword">var</span> a <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>            <span class="hljs-comment">//定义一个int类型的信道</span><br> a = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)        <span class="hljs-comment">//分配内存</span><br><span class="hljs-comment">//或</span><br>a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br></code></pre></td></tr></table></figure><h3 id="信道的发送与接收">信道的发送与接收</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">data := &lt;- a <span class="hljs-comment">// 读取信道 a  </span><br>a &lt;- data <span class="hljs-comment">// 写入信道 a</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>信道的发送与接收默认是<strong>阻塞</strong>的</p>          </div><p>即：写入信道时，若没有读取，就会阻塞； 读取信道时，若没有写入，就会阻塞</p><p>我们可以将这个特性应用到前面的代码中，不再需要时间延迟</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(done <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span>&#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>    done &lt;- <span class="hljs-literal">true</span>                <span class="hljs-comment">//写入信道，说明该go协程已经运行完毕</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)    <span class="hljs-comment">//定义一个bool类型的信道</span><br>    <span class="hljs-keyword">go</span> hello(done)<br>    &lt;- done                       <span class="hljs-comment">//当信道尚未被写入时，该读取信道的语句将会被阻塞</span><br>    fmt.Println(<span class="hljs-string">&quot;main&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="死锁">死锁</h3><p>需要特别注意的是，如果只写入信道或者只读取信道，就会造成死锁，程序会触发panic并报错。</p><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>    ch &lt;- <span class="hljs-number">5</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">fatal error: all goroutines are asleep - deadlock!<br><br>goroutine <span class="hljs-number">1</span> [chan send]:<br>main.main()<br><span class="hljs-function">        E:/<span class="hljs-title">go</span>/<span class="hljs-title">src</span>/<span class="hljs-title">main.go</span>:5 +0<span class="hljs-title">x57</span></span><br><span class="hljs-function"><span class="hljs-title">exit</span> <span class="hljs-title">status</span> 2</span><br></code></pre></td></tr></table></figure><h3 id="单向信道">单向信道</h3><ul><li>只收信道（Receive Only）        <code>chan&lt;- int</code></li><li>只送信道（Send Only）            <code>&lt;-chan int</code></li></ul><p>那么为什么需要单向信道呢？如果一个通道只收不送或者只送不收，哪还有什么意义！事实上，双向通道可以转换为单向信道，所以可以正常使用（个人认为，大概是用于协程传参的时候，单向信道可以限制某个协程对通道的操作，减少出错。）</p><p>上面的程序可以简单修改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(done <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">bool</span>)</span></span>&#123;    <span class="hljs-comment">//这是单向的 只送信道</span><br>    fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>    done &lt;- <span class="hljs-literal">true</span>                <span class="hljs-comment">//写入信道，说明该go协程已经运行完毕</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)    <span class="hljs-comment">//定义一个bool类型的信道</span><br>    <span class="hljs-keyword">go</span> hello(done)<br>    &lt;- done                       <span class="hljs-comment">//当信道尚未被写入时，该读取信道的语句将会被阻塞</span><br>    fmt.Println(<span class="hljs-string">&quot;main&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>双向信道可以转换为单向信道，但是反过来不可以</p>          </div><h3 id="关闭信道">关闭信道</h3><p>使用多一个变量来判断信道是否已经关闭</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">v,</span> ok := &lt;- ch<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">producer</span><span class="hljs-params">(chnl <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        chnl &lt;- i<br>    &#125;<br>    <span class="hljs-built_in">close</span>(chnl)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">go</span> producer(ch)<br>    <span class="hljs-keyword">for</span> &#123;<br>        v, ok := &lt;-ch<br>        <span class="hljs-keyword">if</span> ok == <span class="hljs-literal">false</span> &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        fmt.Println(<span class="hljs-string">&quot;Received &quot;</span>, v, ok)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用for-range遍历">使用for range遍历</h3><p>使用for range，会自动判断信道是否已经关闭，若已经关闭，则会自动结束循环</p><p>上述代码可以修改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">producer</span><span class="hljs-params">(chnl <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        chnl &lt;- i<br>    &#125;<br>    <span class="hljs-built_in">close</span>(chnl)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">go</span> producer(ch)<br>    <span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> ch &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Received &quot;</span>,v)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缓冲信道和工作池">缓冲信道和工作池</h2><h3 id="缓冲信道特点">缓冲信道特点</h3><ul><li>只有在缓冲已满的情况，才会阻塞向缓冲信道发送数据。</li><li>只有在缓冲为空的时候，才会阻塞从缓冲信道接收数据。</li></ul><h3 id="创建缓冲信道">创建缓冲信道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">type</span>, capacity)<br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">2</span>)<br>    ch &lt;- <span class="hljs-string">&quot;naveen&quot;</span><br>    ch &lt;- <span class="hljs-string">&quot;paul&quot;</span><br>    fmt.Println(&lt;- ch)<br>    fmt.Println(&lt;- ch)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="waitGroup来实现工作池">waitGroup来实现工作池</h3><p><code>WaitGroup</code> 用于等待一批 Go 协程执行结束。程序控制会一直阻塞，直到这些协程全部执行完毕。</p><p><code>waitGroup</code>使用的基本流程</p><ul><li>首先需要调用<code>sync</code>包</li><li>声明一个waitGroup：<code>var wg sync.WaitGroup</code></li><li>每运行一个子协程，传递int给<code>waitGroup</code>，使其计数器增加：<code>wg.Add(1)</code></li><li>取<code>waitGroup</code>的地址来传递函数：<code>go process(i, &amp;wg)</code></li><li>每一个子协程运行结束后，计数器自减：<code>wg.Done()</code></li><li>当所有子协程运行结束后，才能继续运行：<code>wg.Wait()</code></li></ul><p><strong>工作池的作用是什么呢？</strong></p><p>在golang编写服务程序过程中，如果每次都启动一个goroutine去处理任务，处理一个任务后就退出，这样势必会造成资源浪费。构建一个工作goroutine池来处理任务相对资源利用会少些，具体的情况需对比测试。</p><p><strong>示例</strong>，使用工作池来计算，每个随机数每一位加起来的和：</p><p>这里工作池的作用是：</p><ul><li>创建一个 Go 协程池，监听一个等待作业分配的输入型缓冲信道。</li><li>将作业添加到该输入型缓冲信道中。</li><li>作业完成后，再将结果写入一个输出型缓冲信道。</li><li>从输出型缓冲信道读取并打印结果。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math/rand&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Job <span class="hljs-keyword">struct</span> &#123;  <br>    id       <span class="hljs-type">int</span><br>    randomno <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-keyword">type</span> Result <span class="hljs-keyword">struct</span> &#123;  <br>    job         Job<br>    sumofdigits <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> jobs = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Job, <span class="hljs-number">10</span>)  <br><span class="hljs-keyword">var</span> results = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Result, <span class="hljs-number">10</span>)<br><span class="hljs-comment">//对一个数字的每位数求和</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">digits</span><span class="hljs-params">(number <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>    sum := <span class="hljs-number">0</span><br>    no := number<br>    <span class="hljs-keyword">for</span> no != <span class="hljs-number">0</span> &#123;<br>        digit := no % <span class="hljs-number">10</span><br>        sum += digit<br>        no /= <span class="hljs-number">10</span><br>    &#125;<br>    time.Sleep(<span class="hljs-number">2</span> * time.Second)<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-comment">//调用digits函数，将结构体输入到results信道中，并且waitGroup的计数器减一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(wg *sync.WaitGroup)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> job := <span class="hljs-keyword">range</span> jobs &#123;<br>        output := Result&#123;job, digits(job.randomno)&#125;<br>        results &lt;- output<br>    &#125;<br>    wg.Done()<br>&#125;<br><span class="hljs-comment">//创建工作池，调用worker函数（进行计算并输出），当所有go程都运行结束后才停止</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorkerPool</span><span class="hljs-params">(noOfWorkers <span class="hljs-type">int</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; noOfWorkers; i++ &#123;<br>        wg.Add(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">go</span> worker(&amp;wg)<br>    &#125;<br>    wg.Wait()<br>    <span class="hljs-built_in">close</span>(results)<br>&#125;<br><span class="hljs-comment">//初始化，生成随机数并且输入到jobs信道中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">allocate</span><span class="hljs-params">(noOfJobs <span class="hljs-type">int</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; noOfJobs; i++ &#123;<br>        randomno := rand.Intn(<span class="hljs-number">999</span>)<br>        job := Job&#123;i, randomno&#125;<br>        jobs &lt;- job<br>    &#125;<br>    <span class="hljs-built_in">close</span>(jobs)<span class="hljs-comment">//关闭信道，告诉接收方不再有数据发来</span><br>&#125;<br><span class="hljs-comment">//输出结果，当全部输出完成后，done信道才会接收true信息，主go程&lt;-done才能运行。这是用来避免过早地结束主程序。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">result</span><span class="hljs-params">(done <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;Job id %d, input random no %d , sum of digits %d\n&quot;</span>, result.job.id, result.job.randomno, result.sumofdigits)<br>    &#125;<br>    done &lt;- <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    startTime := time.Now()<br>    noOfJobs := <span class="hljs-number">20</span><br>    <span class="hljs-keyword">go</span> allocate(noOfJobs)<br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br>    <span class="hljs-keyword">go</span> result(done)<br>    noOfWorkers := <span class="hljs-number">10</span><br>    createWorkerPool(noOfWorkers)<br>    <span class="hljs-comment">//go result(done)也可以放在这里，没有影响</span><br>    &lt;-done<br>    endTime := time.Now()<br>    diff := endTime.Sub(startTime)<br>    fmt.Println(<span class="hljs-string">&quot;total time taken &quot;</span>, diff.Seconds(), <span class="hljs-string">&quot;seconds&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Job</span> id <span class="hljs-number">3</span>, input random no <span class="hljs-number">983</span> , sum of digits <span class="hljs-number">20</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">1</span>, input random no <span class="hljs-number">636</span> , sum of digits <span class="hljs-number">15</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">7</span>, input random no <span class="hljs-number">998</span> , sum of digits <span class="hljs-number">26</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">0</span>, input random no <span class="hljs-number">878</span> , sum of digits <span class="hljs-number">23</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">5</span>, input random no <span class="hljs-number">735</span> , sum of digits <span class="hljs-number">15</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">2</span>, input random no <span class="hljs-number">407</span> , sum of digits <span class="hljs-number">11</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">9</span>, input random no <span class="hljs-number">150</span> , sum of digits <span class="hljs-number">6</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">8</span>, input random no <span class="hljs-number">904</span> , sum of digits <span class="hljs-number">13</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">6</span>, input random no <span class="hljs-number">520</span> , sum of digits <span class="hljs-number">7</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">4</span>, input random no <span class="hljs-number">895</span> , sum of digits <span class="hljs-number">22</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">19</span>, input random no <span class="hljs-number">914</span> , sum of digits <span class="hljs-number">14</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">10</span>, input random no <span class="hljs-number">212</span> , sum of digits <span class="hljs-number">5</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">17</span>, input random no <span class="hljs-number">506</span> , sum of digits <span class="hljs-number">11</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">11</span>, input random no <span class="hljs-number">538</span> , sum of digits <span class="hljs-number">16</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">12</span>, input random no <span class="hljs-number">750</span> , sum of digits <span class="hljs-number">12</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">16</span>, input random no <span class="hljs-number">630</span> , sum of digits <span class="hljs-number">9</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">15</span>, input random no <span class="hljs-number">215</span> , sum of digits <span class="hljs-number">8</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">18</span>, input random no <span class="hljs-number">20</span> , sum of digits <span class="hljs-number">2</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">13</span>, input random no <span class="hljs-number">362</span> , sum of digits <span class="hljs-number">11</span><br><span class="hljs-attribute">Job</span> id <span class="hljs-number">14</span>, input random no <span class="hljs-number">436</span> , sum of digits <span class="hljs-number">13</span><br><span class="hljs-attribute">total</span> time taken  <span class="hljs-number">4</span>.<span class="hljs-number">0083858</span> seconds<br></code></pre></td></tr></table></figure><h2 id="Select">Select</h2><p>直接来看一下参考程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">server1</span><span class="hljs-params">( str1 <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span>&#123;<br>    time.Sleep(<span class="hljs-number">3</span>*time.Second)<br>    str1 &lt;- <span class="hljs-string">&quot;message from server1&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">server2</span><span class="hljs-params">( str2 <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span>&#123;<br>    time.Sleep(<span class="hljs-number">1</span>*time.Second)<br>    str2 &lt;- <span class="hljs-string">&quot;message from server2&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    output1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>    output2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>    <span class="hljs-keyword">go</span> server1(output1)<br>    <span class="hljs-keyword">go</span> server2(output2)<br>    <span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> s1 := &lt;- output1:<br>        fmt.Println(s1)<br>    <span class="hljs-keyword">case</span> s2 := &lt;- output2:<br>        fmt.Println(s2)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">message</span> <span class="hljs-keyword">from</span> server2<br></code></pre></td></tr></table></figure><p>主程序当运行到<code>select</code>就会一直阻塞，直到出现符合要求的<code>case</code>出现。由于<code>server1</code>延迟3秒，<code>server2</code>延迟1秒，所以<code>select</code>会先接收到信道<code>output2</code>，进行输出后，程序结束。（不会管<code>server1</code>啦）</p><p>这有什么用呢？假设我们现在向两台服务器发送申请，并等待它们的回复。为了节省时间，当我们接收到最快的回复时，就继续接下来的步骤。这可以使反应达到最快的速度。</p><div class="note note-success">            <p>类似于switch，使用default关键字来表示默认的情况。可用来避免死锁的出现。</p><p>！！！当信道仅含有nil时，也会触发<code>dafault</code>！！！</p>          </div><h3 id="随机选取">随机选取</h3><p>当多个case被同时选取时，会随机选择一个去执行。</p><p>下面这个程序使用了延迟一秒来同步两个go协程。</p><p>输出结果是<code>from server1</code>和<code>from server2</code>两种都有可能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">server1</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;  <br>    ch &lt;- <span class="hljs-string">&quot;from server1&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">server2</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123;  <br>    ch &lt;- <span class="hljs-string">&quot;from server2&quot;</span><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    output1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>    output2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>    <span class="hljs-keyword">go</span> server1(output1)<br>    <span class="hljs-keyword">go</span> server2(output2)<br>    time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>    <span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> s1 := &lt;-output1:<br>        fmt.Println(s1)<br>    <span class="hljs-keyword">case</span> s2 := &lt;-output2:<br>        fmt.Println(s2)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mutex">Mutex</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">increment</span><span class="hljs-params">(wg *sync.WaitGroup)</span></span>&#123;<br>    x++<br>    wg.Done()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>        wg.Add(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">go</span> increment(&amp;wg)<br>    &#125;<br>    wg.Wait()<br>    fmt.Println(x)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">982</span>/<span class="hljs-number">984</span>/<span class="hljs-number">992</span><br></code></pre></td></tr></table></figure><h3 id="使用mutex解决临界区问题"><strong>使用mutex解决临界区问题</strong></h3><p>外部定义互斥锁<code>var m sync.Mutex</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">m.Lock()<br>x++<br>m.Unlock()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h3 id="使用信道解决临界区问题">使用信道解决临界区问题</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">ch &lt;- <span class="hljs-literal">true</span><br>x++<br>&lt;- ch<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>关于互斥锁和信道的选择问题。</p><p>当 Go 协程需要与其他协程通信时，可以使用信道。而当只允许一个协程访问临界区时，可以使用 Mutex。</p>          </div><h1>参考资料</h1><p><a href="https://www.runoob.com/go">https://www.runoob.com/go</a></p><p><a href="https://tour.go-zh.org/">https://tour.go-zh.org/</a></p><p><a href="https://studygolang.com/subject/2">https://studygolang.com/subject/2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HPClab2</title>
    <link href="/wuhlan3/2021/09/30/HPClab2/"/>
    <url>/wuhlan3/2021/09/30/HPClab2/</url>
    
    <content type="html"><![CDATA[<h1>高性能计算 lab2</h1><p>！！！</p><p>源代码可以参考这个仓库喔<a href="https://gitee.com/Wuhlan3/hpc">https://gitee.com/Wuhlan3/hpc</a></p><p>！！！</p><h2 id="一、基于MPI点对点通信的矩阵乘法">一、基于MPI点对点通信的矩阵乘法</h2><h3 id="基本思路">基本思路</h3><p>我们可以将矩阵B分配给所有的进程，并将矩阵A进行划分，将每一部分分配给对应的进程。在每个进程完成自己那一部分的计算之后，汇总到主进程，组合成最终目标矩阵C。</p><p>其中涉及到的主要的MPI函数包括：</p><ul><li>初始化、获取进程数目与当前进程号</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Init</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;comm_sz);    <br><span class="hljs-built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;my_rank);<br></code></pre></td></tr></table></figure><ul><li>路障函数，用于同步</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Barrier</span>(MPI_COMM_WORLD); <br></code></pre></td></tr></table></figure><ul><li>点对点通信函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Send</span>(&amp;A[i*row_range][<span class="hljs-number">0</span>], A_size, MPI_DOUBLE, i, i, MPI_COMM_WORLD); <br><br><span class="hljs-built_in">MPI_Recv</span>(&amp;buf_A[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], A_size, MPI_DOUBLE, <span class="hljs-number">0</span>, my_rank,   MPI_COMM_WORLD, MPI_STATUS_IGNORE);<br></code></pre></td></tr></table></figure><ul><li>MPI获取时间的函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">double</span> start, end;<br><span class="hljs-built_in">MPI_Barrier</span>(MPI_COMM_WORLD); <br>start = <span class="hljs-built_in">MPI_Wtime</span>();<br>end = <span class="hljs-built_in">MPI_Wtime</span>();<br></code></pre></td></tr></table></figure><ul><li>MPI的释放</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Finalize</span>();<br></code></pre></td></tr></table></figure><p><strong>详情可以参考文件中的源码<code>mpi_matrix_mul1.cpp</code></strong></p><h3 id="编译与运行">编译与运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mpicxx -g -Wall -o m1 mpi_matrix_mul1.cpp<br>mpiexec -oversubscribe  -n 4 ./m1<br></code></pre></td></tr></table></figure><h3 id="运行结果">运行结果</h3><table><thead><tr><th>核数\矩阵大小</th><th>512</th><th>1024</th><th>1536</th><th>2048</th></tr></thead><tbody><tr><td>1</td><td>0.810431</td><td>11.400184</td><td>54.643829</td><td>166.500494</td></tr><tr><td>2</td><td>0.503364</td><td>5.933909</td><td>27.939495</td><td>83.671942</td></tr><tr><td>4</td><td>0.608522</td><td>6.119340</td><td>28.566730</td><td>85.674031</td></tr><tr><td>8</td><td>0.675070</td><td>6.000397</td><td>27.530209</td><td>87.848682</td></tr></tbody></table><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109281529906.png" alt="image-20210928152819031"></p><h2 id="二、基于MPI集合通信的矩阵乘法">二、基于MPI集合通信的矩阵乘法</h2><h3 id="基本思路-2">基本思路</h3><p>基本流程同一类似。只不过改用集合通信函数，可以更加方便地进行进程间的通信，而不需要使用for循环、关注进程的编号等等。集合通信函数可以自行划分内存块。感觉用到类型派生的函数的话反而变得更加麻烦，所以在另一个文件中使用了一下，权当练习练习，可以查看文件<code>mpi_matrix_mul3.cpp</code>。</p><p>其中涉及到的主要的MPI函数包括：</p><ul><li>广播函数，用于将B矩阵发给所有进程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Bcast</span>(&amp;B[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], n*k, MPI_DOUBLE, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure><ul><li>散射函数，将A矩阵划分，发给对应的进程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Scatter</span>(&amp;A[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], A_size, MPI_DOUBLE, &amp;buf_A[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], A_size, MPI_DOUBLE, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure><ul><li>聚集函数，收集所有计算好的C矩阵，组合成完整的C矩阵</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Gather</span>(&amp;buf_C[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], C_size, MPI_DOUBLE, &amp;C[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], C_size, MPI_DOUBLE, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure><p><strong>详情可以参考文件中的源码<code>mpi_matrix_mul2.cpp</code></strong></p><h3 id="编译与运行-2">编译与运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mpicxx -g -Wall -o m1 mpi_matrix_mul2.cpp<br>mpiexec -oversubscribe  -n 4 ./m2<br></code></pre></td></tr></table></figure><h3 id="运行结果-2">运行结果</h3><table><thead><tr><th>核数\矩阵大小</th><th>512</th><th>1024</th><th>1536</th><th>2048</th></tr></thead><tbody><tr><td>1</td><td>0.914887</td><td>15.457199</td><td>89.563702</td><td>232.458000</td></tr><tr><td>2</td><td>0.555392</td><td>9.096576</td><td>51.484947</td><td>134.997501</td></tr><tr><td>4</td><td>0.502040</td><td>9.375724</td><td>51.218516</td><td>149.110322</td></tr><tr><td>8</td><td>0.617615</td><td>11.616788</td><td>51.633731</td><td>140.564852</td></tr></tbody></table><p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109281529243.png" alt="image-20210928152915051"></p><h3 id="两种通信方式的比较">两种通信方式的比较</h3><p>可以很明显地看到，集合通信方式比点对点通信方式慢上许多，集合通信的运行时长多了接近一倍。这貌似与预先设想的不太一样。具体原因可能在于，在进行点对点通信的时候，我也对矩阵进行了手动的平均划分，而集合通信的过程很可能需要函数内部进行自己判断如何平均划分。所以虽然集合通信写起来更加方便，但性能比不上点对点的通信方式。</p><h2 id="三、定义自己的MPI类型">三、定义自己的MPI类型</h2><h3 id="基本步骤">基本步骤</h3><ol><li><p>定义一个结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">double</span> A[SIZE][SIZE];<br>    <span class="hljs-type">double</span> B[SIZE][SIZE];<br>&#125; AandB;<br></code></pre></td></tr></table></figure></li><li><p>使用MPI_Type_create_struct函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> count = <span class="hljs-number">2</span>;<span class="hljs-comment">//块数</span><br>    <span class="hljs-type">int</span> blocklengths[count] = &#123;m * n, n * k&#125;;<span class="hljs-comment">//每个块的长度</span><br>    MPI_Aint offsets[count];<span class="hljs-comment">//块偏移量</span><br>    <span class="hljs-built_in">MPI_Get_address</span>(aandb.A, &amp;offsets[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">MPI_Get_address</span>(aandb.B, &amp;offsets[<span class="hljs-number">1</span>]);<br>    offsets[<span class="hljs-number">1</span>] = offsets[<span class="hljs-number">1</span>] - offsets[<span class="hljs-number">0</span>];<br>    offsets[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    MPI_Datatype types[count] = &#123;MPI_DOUBLE, MPI_DOUBLE&#125;;<span class="hljs-comment">//块类型</span><br>    MPI_Datatype aandbtype;<span class="hljs-comment">//自定义MPI类型</span><br>    <span class="hljs-built_in">MPI_Type_create_struct</span>(count, blocklengths, offsets, types, &amp;aandbtype);<span class="hljs-comment">//创造属于自己的类型</span><br>    <span class="hljs-built_in">MPI_Type_commit</span>(&amp;aandbtype);<span class="hljs-comment">//提交，使得该类型可以被使用</span><br></code></pre></td></tr></table></figure></li><li><p>在集合通信中的使用。发送给所有进程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Bcast</span>(&amp;aandb, <span class="hljs-number">1</span>, aandbtype, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure></li></ol><p><strong>详情可以参考文件中的源码<code>mpi_matrix_mul3.cpp</code></strong></p><h3 id="编译与运行-3">编译与运行</h3><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109301551742.png" alt="image-20210930143230675" style="zoom:80%;box-shadow:none" /><p>结果正确。</p><h2 id="四、改造Lab1成矩阵乘法库函数">四、改造Lab1成矩阵乘法库函数</h2><h3 id="动态链接库">动态链接库</h3><p>动态链接库提供了<strong>Lab1</strong>中三种矩阵的乘法函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MATRIXMUL_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MATRIXMUL_H__</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Strassen</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">double</span>** MatrixA, <span class="hljs-type">double</span>** MatrixB, <span class="hljs-type">double</span>** MatrixC)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">based_on_software_mul</span><span class="hljs-params">(<span class="hljs-type">double</span>** A, <span class="hljs-type">double</span> ** B, <span class="hljs-type">double</span> ** C, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">general_mul</span><span class="hljs-params">(<span class="hljs-type">double</span>** A, <span class="hljs-type">double</span> ** B, <span class="hljs-type">double</span> ** C, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">cout_matrix</span><span class="hljs-params">(<span class="hljs-type">double</span> ** C, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">cin_matrix</span><span class="hljs-params">(<span class="hljs-type">double</span> ** A, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="逐步编译与链接">逐步编译与链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -c -fPIC matrixmul.cpp<br>g++ -shared -o libmatrixmul.so matrixmul.o<br>g++ -L/home/wuhlan3/Desktop/mpi -o main main.cpp -lmatrixmul<br>export LD_LIBRARY_PATH=/home/wuhlan3/Desktop/mpi/libmatrixmul:$LD_LIBRARY_PATH<br>./main<br></code></pre></td></tr></table></figure><h3 id="makefile文件">makefile文件</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#######################</span><br><span class="hljs-comment"># Makefile</span><br><span class="hljs-comment">#######################</span><br><br><span class="hljs-comment"># compile and lib parameter</span><br>CC      := g++<br>LIBS    := <br>LDFLAGS := <br>DEFINES :=<br>INCLUDE := -I/home/wuhlan3/Desktop/mpi/matrixmul.h<br>CFLAGS  := <br>CXXFLAGS:= <br><br><span class="hljs-comment"># link parameter</span><br>LIB := libmatrixmul.so<br><br><span class="hljs-comment">#link</span><br><span class="hljs-variable">$(LIB)</span>:matrixmul.o<br>    <span class="hljs-variable">$(CC)</span> -shared -o -fPIC -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><br><br><span class="hljs-comment">#compile</span><br><span class="hljs-section">matrixmul.o:matrixmul.cpp</span><br>    <span class="hljs-variable">$(CC)</span> -c -fPIC <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span> <br><br><span class="hljs-comment"># clean</span><br><span class="hljs-section">clean:</span><br>    rm -fr *.o<br></code></pre></td></tr></table></figure><p>使用后生成<code>.so</code>文件：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109301552957.png" alt="image-20210928142657323" style="zoom:80%;box-shadow:none" /><p>编译main文件可以正常运行：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109301551113.png" alt="image-20210928142817059" style="zoom:80%;box-shadow:none" /><h2 id="遇到的问题">遇到的问题</h2><h3 id="1-内存不足">1.内存不足</h3><p>对于点对点通信，一开始我使用的是一维数组存储矩阵的方式，我想着一维数组寻址会更加方便，使用<code>MPI_Send()</code>和<code>MPI_Recv()</code>函数时也会更加方便。小于512的矩阵还是能够正常计算的，但是当大小足够大时就会出现报错了。这是因为<code>double A[1024*1024]</code>这样的数组很可能已经超过了数组的上限（其中double是8字节的）。 只好改成二维数组的方式来存储。但是静态分配内存还是会出现segment fault的错误。最终只能使用动态分配内存。</p><p>此外，我还发现在mpi中使用malloc很容易出现错误，实在搞不明白具体原因。在经过大半天的调试后仍然失败。最后使用c++中的new和delete组合，就成功了。</p><h3 id="2-编译遇到的问题">2.编译遇到的问题</h3><p>在linux上编译可能需要添加oversubscribe</p><h3 id="3-二维矩阵在集合通信函数中的使用">3.二维矩阵在集合通信函数中的使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">MPI_Scatter</span>(&amp;A[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], A_size, MPI_DOUBLE, &amp;buf_A[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], A_size, MPI_DOUBLE, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure><p>比如说，假设A矩阵有8行，有4个进程。那么这种写法，是能够将其中的每两行分配个对应的进程的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>超算</tag>
      
      <tag>linux</tag>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>惊散楼头飞雪</title>
    <link href="/wuhlan3/2021/09/27/%E6%83%8A%E6%95%A3%E6%A5%BC%E5%A4%B4%E9%A3%9E%E9%9B%AA/"/>
    <url>/wuhlan3/2021/09/27/%E6%83%8A%E6%95%A3%E6%A5%BC%E5%A4%B4%E9%A3%9E%E9%9B%AA/</url>
    
    <content type="html"><![CDATA[<h1>惊散楼头飞雪</h1><p>事情是这样的。</p><p>看到一个学弟发的tape，主题差不多是“想不出一句诗作为标题”。</p><p>也就跟风发了一句：</p><blockquote><p>我病君来高歌饮，惊散楼头飞雪。笑富贵千钧如发。硬语盘空谁来听？</p><p>这是我最喜欢的一句，只是找不到一个人可以使我说出这句话。</p></blockquote><p>他回了一句：</p><blockquote><p>龙共虎，应声裂。</p></blockquote><p>没看懂，我好奇的搜了一搜。原来是陈亮写给辛弃疾的词，而我所写的是辛弃疾回写给陈亮的。突然间像点燃了什么，我的整个世界明媚起来。可能是最近太自闭了吧，我似乎有很多很多东西想找人倾诉，没有人愿意听，他们也未必听得懂。这种情况下，突然听到了一声令人满意的回应，该是多么值得激动的事情！</p><p>分享一下这两首词：</p><center><h4>贺新郎·同父见和再用韵答之</h4></center><center><h5>辛弃疾</h5></center><center>老去凭谁说。</center><center>似而今、元龙臭味，孟公瓜葛。</center><center>我病君来高歌饮，惊散楼头飞雪。</center><center>笑富贵千钧如发。硬语盘空谁来听？</center><center>记当时、只有西窗月。</center><center>重进酒，换鸣瑟。</center><br/><center>事无两样人心别。</center><center>问渠侬：神州毕竟，几番离合？</center><center>汗血盐车无人顾，千里空收骏骨。</center><center>正目断关河路绝。</center><center>我最怜君中宵舞，道“男儿到死心如铁”。</center><center>看试手，补天裂。</center><center><h4>贺新郎·寄辛幼安和见怀韵</h4></center><center><h5>陈亮</h5></center><center>老大那堪说。</center><center>看几番、神奇臭腐，夏裘冬葛。</center><center>父老长安今余几，后死无仇可雪。</center><center>犹未燥、当时生发。</center><center>二十五弦多少恨，算世间、那有平分月。</center><center>胡妇弄，汉宫瑟。</center><br/><center>树犹如此堪重别。</center><center>只使君、从来与我，话头多合。</center><center>行矣置之无足问，谁换妍皮痴骨。</center><center>但莫使、伯牙弦绝。</center><center>九转丹砂牢拾取，管精金、只是寻常铁。</center><center>龙共虎，应声裂。</center>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(四)Semantics_and_Embeddings</title>
    <link href="/wuhlan3/2021/09/26/Semantics-and-Embeddings/"/>
    <url>/wuhlan3/2021/09/26/Semantics-and-Embeddings/</url>
    
    <content type="html"><![CDATA[<h1>Semantics&amp;Embeddings</h1><h2 id="Relations">Relations</h2><p>Lemmas can be polysemous (多义性，have multiple senses)，比如说mouse：</p><ul><li>指一种小型啮齿动物</li><li>鼠标…</li></ul><p>单词之间的关系：</p><ul><li>Synonymy(同义词)：couch / sofa、big / large、automobile / car</li><li>Antonymy(反义词)：dark / light、up / down</li><li>Similarity(相似性)：car / bicycle、cow / horse</li><li>Relatedness(关联性)：coffee / tea</li><li>Connotation(内涵)：感情上的（happy/sad）、隐含的意义(褒贬)（copy/fake）、评价(great/terrible)</li></ul><div class="note note-success">            <p>The meaning of a word is its use in the language</p>          </div><h2 id="Connotation">Connotation</h2><p>单词可以从三个维度来看待：</p><ol><li>Valence（警觉度）：the pleasantness of the stimulus</li><li>Arousal（唤醒度）：the intensity of emotion provoked by the stimulus</li><li>Dominance（支配度）：the degree of control exerted by the stimulus</li></ol><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109262248476.png" alt="image-20210926224807705" style="zoom:100%;box-shadow: none" /><h2 id="Vector-Semantics">Vector Semantics</h2><p>我们是否可以建立一种方法来表达词义呢？接下来就介绍一种常用的模型vector semantics。</p><blockquote><p>“The meaning of a word is its use in the language”</p></blockquote><ol><li><p>通过语言的分布决定语义</p></li><li><p>从多个维度来看待语义（空间中的某个点）</p></li></ol><p>我们使用一个向量来表示每一个词语。相似的词语在<strong>语义空间</strong>(<strong>semantic space</strong>)上是<strong>邻近</strong>的。</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109262305164.png" alt="image-20210926230518609" style="zoom:100%;box-shadow:none" /><p>对于情绪分析，如果<strong>基于单词本身</strong>：</p><ul><li>单词特征就是用单词来标识的</li><li>比如说在之前遇到一个单词为“terrible”</li><li>那么我们在训练集和测试集中<strong>只能使用完全相同的单词</strong></li></ul><p>如果<strong>基于词向量(Embedding)</strong>：</p><ul><li>单词特征就是一个向量来表示的</li><li>前一个单词是向量vector[35,22,17…]；现在测试集中我们可能看到相似的向量vector[34,21,14]</li><li>此时我们就可以将其概括为<strong>similar but unseen words</strong>（不再局限于单一的单词，可以是相似的单词）</li></ul><p>我们将会讨论<strong>两种词向量算法</strong>：</p><ol><li><strong>Tf-idf</strong>（特征：用于<strong>信息检索</strong>；一种基线模型；<strong>稀疏向量</strong>；单词用附近的单词计数表示）</li><li><strong>Word2vec</strong>（特征：<strong>密集向量</strong>；通过训练分类器来<strong>预测</strong>单词是否可能出现在附近；上下文嵌入contextual embeddings）</li></ol><blockquote><p>荃者所以在鱼，得鱼而忘荃；</p><p>言者所以在意，得意而忘言。</p><p>——庄子</p></blockquote><h2 id="Words-and-Vectors">Words and Vectors</h2><h3 id="文本间的关系">文本间的关系</h3><p>每个文本都可以表示成一个单词的向量。比如说下面莎士比亚的文章就分别记录了相关单词的出现次数：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109262347161.png" alt="image-20210926234152207" style="zoom:80%;box-shadow:none" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109262347863.png" alt="image-20210926234200465" style="zoom:80%;box-shadow:none" /><p>可以看到，《亨利五世》和《裘力斯·凯撒》的相关性更强，《皆大欢喜》和《第十二夜》更加相似。</p><h3 id="单词间的关系">单词间的关系</h3><p>两个单词如果它们的上下文相似，这两个单词也是相似的。</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109262347232.png" alt="image-20210926234555455" style="zoom:80%;box-shadow:none" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109262347994.png" alt="image-20210926234638018" style="zoom:80%;box-shadow:none" /><h2 id="cos计算单词相似性">cos计算单词相似性</h2><p>对两个向量进行点乘：<br>$$<br>dot\ product(v,w) = v·w=\sum^{N}_{i=1}v_iw_i = v_1w_1+v_2w_2…<br>$$<br>但是这可能会引起一些问题：如果维数过大，乘积可能会非常大</p><p>向量长度是：</p><p>$$<br>|v| = \sqrt{\sum ^ N _{i=1}v_i ^ 2}<br>$$</p><p>我们可以计算出：</p><p>$$<br>cosine(\hat v , \hat w) = \frac{\hat v · \hat w}{|\hat v||\hat w|}= \frac{\sum ^ N_{i=1}v_i w_i}{\sqrt{\sum ^ N_{i=1}v_i ^ 2}\sqrt{\sum ^ N_{i=1}w_i ^ 2}}<br>$$<br>样例：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109270000427.png" alt="image-20210927000014433" style="zoom:80%;box-shadow:none" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109270001875.png" alt="image-20210927000051712" style="zoom:80%;box-shadow:none" /><h2 id="TF-IDF">TF-IDF</h2><p>TF-IDF（term frequency–inverse document frequency）是一种用于信息检索与数据挖掘的常用<strong>加权</strong>技术。TF是<strong>词频</strong>(Term Frequency)，IDF是<strong>逆文本频率指数</strong>(Inverse Document Frequency)。</p><p>对于单词t在文本d中的<strong>ti-idf值</strong>，如下：<br>$$<br>w_{t,d} = tf_{t,d} \times idf_i<br>$$<br>其中，像“the”或“it”的<strong>idf值</strong>将会非常小</p><h3 id="tf的计算方法">tf的计算方法</h3><p>$$<br>tf_{t,d}=count(t,d)<br>$$</p><p>通常不使用原始数据，我们将其压缩一下：<br>$$<br>tf_{t,d}=log_{10}({count(t,d)+1})<br>$$</p><h3 id="idf的计算方法">idf的计算方法</h3><p>注意df不是指该单词在所有文档中出现的总次数(collection Frequency)，而是指该单词出现在了多少个文档中(Document Frequency)</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109272204110.png" alt="image-20210927220135195" style="zoom:100%;box-shadow:none" />$$idf_t = log_{10}(\frac{N}{df_t})其中N是总的文本数$$可以注意到，加入一个单词在所有训练的文本中都有出现，那么它的idf就会是0。而出现的频率越低，它的idf就越大。<img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109272212407.png" alt="image-20210927221238680" style="zoom:90%;box-shadow:none" /><h2 id="PMI">PMI</h2><p>经常会用到PMI（Pointwise Mutual Information，逐点互信息）这个指标来衡量两个事物之间的相关性（比如两个词）：<br>$$<br>PMI(w_1,w_2) = log\frac{p(w_1,w_2)}{p(w_1)p(w_2)}<br>$$<br>虽然PMI的取值是负无穷到正无穷，但是取负值是有问题的。</p><p>所以我们用0取代负的PMI，得到PPMI：<br>$$<br>PPMI(w_1,w_2) = max(log\frac{p(w_1,w_2)}{p(w_1)p(w_2)},0)<br>$$</p><h3 id="举例，计算过程">举例，计算过程</h3><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109272228918.png" alt="image-20210927222604844" style="zoom:80%;box-shadow:none" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109272228966.png" alt="image-20210927222523541" style="zoom:80%;box-shadow:none" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109272228347.png" alt="image-20210927222536175" style="zoom:80%;box-shadow:none" /><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109272228752.png" alt="image-20210927222704853" style="zoom:80%;box-shadow:none" /><h2 id="Word2vec">Word2vec</h2><h3 id="稠密向量">稠密向量</h3><p>相比于tf-idf更加稠密，且大部分元素不为零。</p><p>为什么要使用稠密向量：</p><ul><li>维度更小可以更好地用于机器学习(需要调整的权重更少)</li><li>稠密向量可能比显式计数更通用</li><li>维度过大可能拟合到一些噪音。维度更小的向量可以缓解<strong>过拟合</strong>的问题</li><li>更好地获取同义词之间的关系</li><li>实践证明，Word2vec可以做的更好</li></ul><p>获取稠密向量的方法：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109282237909.png" alt="image-20210927164801858" style="zoom:100%;box-shadow:none" /><h3 id="基本思路">基本思路</h3><ul><li><p>基于<strong>二进制预测任务</strong>来训练一个<strong>分类器</strong>：w会喜欢出现在c的附近吗？(true/false)</p></li><li><p>寻找到一个中心词$target$，在设定一个窗口大小（如下图为+/-2）下，如果$c$出现在$target$周围，就设为T，否则为F。</p></li><li><p>我们并不关心这个分类器本身，而是将其权重作为词向量。</p></li><li><p><strong>自监督</strong>的学习方式。标签不是人为设置的，而是根据单词是否出现在窗口中自己形成的。c和w之间是非常弱的标签关系(它们可能在某个地方邻近，在其它可能又没有)。</p></li></ul><blockquote><p>一个简单地例子：</p><p>“她们 夸 吴彦祖 帅 到 没朋友”</p><p>“她们 夸 我 帅 到 没朋友”</p><p>由于“吴彦祖”和“我”使用邻近的词语表示的词向量是非常近似的，所以“我”约等于“吴彦祖”</p></blockquote><h3 id="基本流程">基本流程</h3><ol><li>通过邻居词语context word来获取<strong>正面例子</strong>(true)</li><li>随机获取其他词汇来作为<strong>负面例子</strong>(false)</li><li>训练<strong>逻辑回归分类器</strong>来区分这两种情况</li><li>学习到的权重，最终作为词向量。</li></ol><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109282239534.png" alt="image-20210927165913777" style="zoom:100%;box-shadow:none" /><p>预测出$P(+|w,c)$的概率。</p><p>如果两个向量是相似的，那么它们的点积是会非常大的。cosine只是一种标准化的点积。所以我们可以直接使用点积来表示相似性：<br>$$<br>Similarity(w,c) \approx w · c<br>$$<br>使用逻辑回归分类器中的$\sigma$将其变为概率：<br>$$<br>P(+|w,c) = \sigma(c·w) = \frac{1}{1+exp(-c·w)}<br>$$</p><p>$$<br>P(-|w,c) = 1- P(+|w,c) =\sigma(-c·w) = \frac{1}{1+exp(c·w)}<br>$$</p><p>上面的公式，只是针对一个context word，但是我们需要针对很多个context word。我们可以假设每个context word之间是相互独立的，所以可以将他们直接乘起来喔：<br>$$<br>P(+|w,c_{1:L})=\Pi_{i=1}^ {L} \sigma(c_i · w)<br>$$</p><p>$$<br>log P(+|w,c_{1:L})=\sum_{i=1}^ {L} log\sigma(c_i · w)<br>$$</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109282336861.png" alt="image-20210928233333561" style="zoom:100%;box-shadow:none" /><p>学习的目标是：</p><ul><li>最大化正例中的target word和context word之间的相似性</li><li>最小化反例中的target word和non-neighbor word之间的相似性</li></ul><p>可得到损失函数如下：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109282337596.png" alt="image-20210928233633250" style="zoom:100%;box-shadow:none" /><p>如何学习？</p><p>使用随机梯度下降法(Stochastic gradient descent)；针对整个训练集，使正例的可能性更大，使反例的可能性更小。</p><p>对于每一步：</p><ul><li>方向：从损失函数的梯度向相反方向移动</li><li>梯度幅值：我们移动的梯度值为$\frac{d}{dw}L(f(x;w),y)$，乘以一个learning rate $\eta$</li><li>learning rate 越大就意味着下降得越快：</li></ul><p>$$<br>w^{t+1} = w^{t}-\eta \frac{d}{dw}L(f(x;w),y)<br>$$</p><p>转过头来看看，损失函数要怎么求导：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202110071634380.png" alt="image-20211007163357969" style="zoom:80%;box-shadow:none" /><p>所以我们可以先随机地初始化$c$和$w$矩阵，然后根据刚刚提到的<strong>梯度下降法</strong>来进行不断地更新：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202110071636297.png" alt="image-20211007163616109" style="zoom:80%;box-shadow:none" /><h3 id="总结流程">总结流程</h3><ul><li>以一个随机d维地向量V作为初始词向量</li><li>基于向量的相似度来对分类器进行训练<ul><li>基于一个语料库，将同时出现的一对对词作为<strong>正例</strong></li><li>以不同时出现的一对对词作为<strong>反例</strong></li><li>通过<strong>梯度下降</strong>的方式来训练分类器，最终提高分类器区分这些词向量的性能</li><li>扔掉分类器的代码，仅仅保留词向量(<strong>词嵌入</strong> embeddings)</li></ul></li></ul><h3 id="词嵌入的特性">词嵌入的特性</h3><h4 id="1-窗口大小">1. 窗口大小</h4><ul><li>小窗口$(C=+/-2)$，邻近的单词是同一分类法下语法相似的词。比如Hogwarts和其他虚构学院</li><li>大窗口$(C=+/-5)$，邻近的单词是同一语义领域下的。比如Hogwarts和Dumbledore</li></ul><h4 id="2-类比关系-analogical-relations">2. 类比关系(analogical relations)</h4><p>使用向量的平行关系来进行类比推理</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202110071854110.png" alt="image-20211007184623878" style="zoom:80%;box-shadow:none" /><p>对于稀疏的词向量或稠密的词向量都可以使用这种方法：</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202110071854906.png" alt="image-20211007184835881" style="zoom:80%;box-shadow:none" /><div class="note note-success">            <p>平行四边形法则需要注意的事项：</p><ul><li><p>它似乎只适用于频繁使用的单词、小距离和特定的语言关系（如国家与首都等），但对于其他的无效</p></li><li><p>此外，如何理解类比关系是开放的，多样化的。</p></li></ul>          </div>]]></content>
    
    
    
    <tags>
      
      <tag>自然语言处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(三)Text Classification</title>
    <link href="/wuhlan3/2021/09/24/Text-Classification/"/>
    <url>/wuhlan3/2021/09/24/Text-Classification/</url>
    
    <content type="html"><![CDATA[<h1>Text Classification</h1><h2 id="基本任务">基本任务</h2><ul><li><p>识别垃圾邮件(spam)</p></li><li><p>给杂志、论文贴上标签</p></li><li><p>划出句子中的正面、负面的词汇，从而把握整体的情感：</p><img src="image-20210915110828809.png" alt="image-20210915110828809" style="zoom: 50%;" /></li></ul><p>情绪分析(sentiment analysis)包括:</p><ul><li>Movie : is this review positive or negative?</li><li>Products : what do people think about the new iPhone?</li><li>Public sentiment : how is consumer confidence?</li><li>Politics : what do people think about this candidate or issue?</li><li>Prediction : predict market trends from sentiment</li></ul><p>情绪分析是对attitude的检测，主要关注两个方面：</p><ol><li>positive or negative</li><li>classification</li></ol><h2 id="基本模型">基本模型</h2><p><strong>Input</strong>:</p><ul><li>a document $d$</li><li>a fixed set of classes $C = {c_1, c_2, c_3…}$</li></ul><p><strong>Output</strong> :</p><ul><li>a predicted class $c\in C$</li></ul><p>简单来说就是确定好几个类别，将新的一个文本分进一个类别。</p><h3 id="解决办法">解决办法</h3><ol><li><p>手动制定规则：</p><ul><li>基于单词的组合或其他特征（垃圾邮件地下有网址或其中的重复关键句）</li><li>可以非常准确</li><li>但规则制定的过程成本昂贵</li></ul></li><li><p>基于深度学习</p><p>Input:</p><ul><li><p>文档：A document d</p></li><li><p>定义好的一些类：A fixed set of classes $C={c_1,c_2,…,c_n}$</p></li><li><p>训练集：A training set of m hand-labeled documents $(d_1,c_1),…,(d_m,c_m)$</p></li></ul><p>Output:</p><ul><li>分类器：A learned classifier $f: d \rightarrow c$</li></ul></li></ol><p>一些知名的分类器：</p><ul><li>Naïve Bayes</li><li>Logistic regression</li><li>Neural networks</li><li>k-Nearest Neighbors</li></ul><h2 id="朴素贝叶斯分类器">朴素贝叶斯分类器</h2><p>朴素贝叶斯分类器是基于贝叶斯规则的。依赖于一个简单的文档表示方法——Bag of words：</p><img src="image-20210919185219007.png" alt="image-20210919185219007" style="zoom:80%;" /><p>Bag of words中包含每个单词的出现频率，我们可以通过它来计算、学习出一个分类器。</p><img src="image-20210919185313308.png" alt="image-20210919185313308" style="zoom:80%;" /><p>对于一个文档d和一个类c有：<br>$$<br>P(c|d)=\frac{P(dc)}{P(d)}=\frac{P(d|c)P©}{P(d)}<br>$$</p><p>$$<br>\begin{align}<br>c_{map}&amp;=argmax_{c\in C}P(c|d)<br>\\ &amp;=argmax_{c\in C}\frac{P(d|c)P©}{P(d)}<br>\\ &amp;=argmax_{c\in C}P(d|c)P©<br>\\ &amp;=argmax_{c\in C}P(x_1,x_2,…,x_n | c)P©<br>\\ &amp;c_{NB}=argmax_{c\in C}P©\prod_{x_i\in X}P(x_i|c)<br>\\ &amp;=argmax_{c\in C}\big[logP©+\sum_{i\in positions}logP(x_i|c)\big]<br>\end{align}<br>$$</p><p>上面的公式中：</p><ul><li>map指的是maximum a posteriori最大后验概率，即我们要找出一个最大可能的类；</li><li>由于所有类的算出的$c_{map}$的分母都是$P(d)$，所以可以省去</li><li>$P©$是先验概率，即某一个类的出现概率</li><li>如何估算$P(x_1,x_2,…,x_n | c)$，我们可以假设单词的位置、顺序是无关紧要的，且假设$P(x_i|c)$之间相互独立，则我们可以得到最后一条式子。</li><li>positions指的是所有单词再文本中的位置</li><li>考虑小数精度问题、计算的方便性，我们可以取log</li></ul><h2 id="Learning">Learning</h2><p>在上面的式子中，主要求两个值：$P©$和$P(x_i|c)$</p><p>我们可以单纯的使用单词出现的频率来表示这两个值：<br>$$<br>\hat P(c_j) = \frac{N_{c_j}}{N_{total}}\<br>\hat P(w_i|c_j)=\frac{count(w_i,c_j)}{\sum_{w\in V}count(w,c_j)}<br>$$<br>考虑有的单词没有出现在训练集中，可能出现P等于0的情况，所以需要进行拉普拉斯平滑：<br>$$<br>\hat P(w_i|c_j)=\frac{count(w_i,c_j)+1}{\sum_{w\in V}count(w,c_j)+|V|}<br>$$</p><h2 id="Unknown-words">Unknown words</h2><p>对于在测试集中出现了我们训练集中没有遇到过的单词怎么办？</p><ul><li>将他们从测试集文档中移除</li><li>假装他们不存在</li><li>Don’t include any probability for them at all</li></ul><h2 id="Stop-words">Stop words</h2><p>一些系统会忽略掉stop words——非常频繁出现的词汇比如the、a</p><ul><li>在训练集中对所有的单词进行频率的排序</li><li>将出现次数最多的前10~50个单词列入stopword list</li><li>在训练集和测试集中移除这些词语，假装他们从未出现过</li></ul><p>但是移除停用词也未必起到很好的效果，在实践过程中常常使用所有单词而不会设置stopword list</p><h2 id="实例sentiment-example">实例sentiment example</h2><img src="image-20210919225343885.png" alt="image-20210919225343885" style="zoom: 100%;" /><p>基本过程总结：</p><ol><li>计算每个类的出现频率</li><li>删除每个文档中的重复项（停用词）</li><li>使用拉普拉斯平滑计算$\hat P(w_i|c_j)$</li><li>计算$c_{NB}$或者说$c_{MAP}$</li></ol><h3 id="Optimizing-for-sentiment-analysis">Optimizing for sentiment analysis</h3><p>对于情绪分析，似乎单词的出现次数并不能告诉我们更多信息，比如说fantastic出现五次和出现一次没有太大区别。</p><p>所以我们可以将其优化成Binary multinominal Naive B ayes 或者 binary NB：</p><p>即将所有的单词计数记为1。</p><h2 id="Naive-Bayes-Relationship-toLanguage-Modeling">Naïve Bayes: Relationship toLanguage Modeling</h2><p>朴素贝叶斯分类器可用于多种分类：URL、email address、字典等</p><p>我们只使用了单词的特征，且使用了文本中所有的单词。</p><p>这与之前文章中<a href="http://localhost:4000/Wuhlan3/2021/09/06/n-gram%E6%A8%A1%E5%9E%8B/">《N-gram语言模型》</a>提到的language modeling中的unigram模型有很多相似之处。</p><h2 id="Precision-Recall-and-F-measure">Precision, Recall, and F measure</h2><p>让我们考虑二进制文本分类任务。</p><p>假设你是戴尔的首席执行官，你想知道人们对你的笔记本电脑的看法，所以你建立了一个“戴尔笔记本电脑”推特检测器：</p><ul><li>正面类：关于戴尔笔记本电脑的推文</li><li>负面类：所有其他推文</li></ul><img src="image-20210919231408871.png" alt="image-20210919231408871" style="zoom:100%;" /><p>我们为什么不把<strong>accuracy</strong>作为衡量标准呢？</p><p>想象一下，我们看到了100万条推特，其中100人谈论戴尔笔记本电脑，999900谈了些别的事<br>我们可以建立一个愚蠢的分类器，只标记每个不关于戴尔笔记本电脑的tweet。</p><p>它将获得99.99%的准确率！！！但是这并不是我们需要寻找的东西。这就是为什么需要引入<strong>precision</strong>和<strong>recall</strong>了。我们使用以下公式来计算<br>$$<br>F_{ \beta } = \frac {( {\beta } ^ 2+1)PR}{\beta ^2P+R}<br>$$</p><p>大部分情况下使用balanced $F_1取\beta=1$</p><p>$$<br>F_{\beta} = \frac{2PR}{P+R}<br>$$</p><h2 id="交叉测试">交叉测试</h2><img src="image-20210919233044082.png" alt="image-20210919233044082" style="zoom:100%;" /><p>在训练集上训练，在development集上调整，在测试集上进行验证、报告：</p><ul><li>相比于在<strong>训练集上调整</strong>这样可以防止过拟合</li><li>但是想要尽可能多的数据进行测试，又有尽可能多的数据作为development该怎么做呢？</li></ul><img src="image-20210919233659699.png" alt="image-20210919233659699" style="zoom:100%;" />]]></content>
    
    
    
    <tags>
      
      <tag>自然语言处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(二)N-gram模型</title>
    <link href="/wuhlan3/2021/09/22/n-gram%E6%A8%A1%E5%9E%8B/"/>
    <url>/wuhlan3/2021/09/22/n-gram%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1>N-gram语言模型</h1><p><strong>语言模型</strong>：简单来说就是用于判断一个句子是否通顺，我们的目标是要给一个句子赋予一个概率。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//机器翻译</span><br><span class="hljs-function"><span class="hljs-title">P</span><span class="hljs-params">(high winds tonite)</span></span> &gt; <span class="hljs-built_in">P</span>(large winds tonite)<br><span class="hljs-comment">//正确拼写</span><br><span class="hljs-function"><span class="hljs-title">P</span><span class="hljs-params">(about fifteen minutes from)</span></span> &gt; <span class="hljs-built_in">P</span>(about fifteen minuets from)<br><span class="hljs-comment">//语言识别</span><br><span class="hljs-function"><span class="hljs-title">P</span><span class="hljs-params">(I saw a van)</span></span> &gt;&gt; <span class="hljs-built_in">P</span>(eyes awe of an)<br></code></pre></td></tr></table></figure><p>可以提炼成两个问题：</p><ul><li>最终问题：计算一个句子或一系列单词的概率$P(W)=P(w_1,w_2,w_3,w_4…w_n)$</li><li>相关问题：预测下一个单词出现的概率$P(w_n | w_1,w_2,w_3…w_n-1)$</li></ul><blockquote><p>将概率最大的作为预测结果返回。再比如机器翻译中，‘I like Tom so much.’ ===&gt;{‘我’，‘喜欢’，‘汤姆’，‘非常’} 将这个集合里的字词排列组合成句子，然后用语言模型去计算形成句子的概率大小。概率越大，说明翻译越顺畅，越好，就作为最终的答案返回。</p></blockquote><img src="image-20210906214136251.png" alt="image-20210906214136251" style="zoom: 50%;" /><h1>Markov Assumption</h1><p>我们一般不会这样判断：</p><p>$P(the|its\ water\ is\ so\ transparent\ that)=\frac{Count(its\ water\ is\ so\ transparent\ that\ the)}{Count(its\ water\ is\ so\ transparent\ that)}$</p><p>因为涉及到太多可能的句子了。</p><p>直接这么计算，是有很大困难的，我们可以将其简化为求：</p><p>$P(the|its\ water\ is\ so\ transparent\ that)∪P(the|that)$</p><p>或者：<br>$P(the|its\ water\ is\ so\ transparent\ that)∪P(the|transparent\ that)$</p><p>这里引入的就是<strong>马尔科夫假设，即：一个item的出现概率，只与其前m个items有关，当m=0时，就是unigram，m=1时，是bigram模型。</strong></p><p>$P(w_1w_2w_3…w_n)=\prod_{i=1}^{n}P(w_i|w_1w_2w_3…w_{i-1})$</p><ul><li>unigram模型：$P(w_1w_2w_3…w_n)=\prod_{i=1}^{n}P(w_i)$</li><li>bigram模型：$P(w_i|w_1w_2w_3…w_{n-1})\approx P(w_i|w_{i-1})$</li></ul><div class="note note-success">            <p><strong>局限性</strong>：比如说，两个词语有长距离依赖关系时，起不了作用。</p>          </div><h2 id="计算流程">计算流程</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">数出现的频数——&gt;建表——&gt;计算某个句子的概率<br></code></pre></td></tr></table></figure><img src="image-20210906224947161.png" alt="image-20210906224947161" style="zoom: 67%;" /><img src="image-20210906173428485.png" alt="image-20210906173428485" style="zoom: 50%;" /><p>由于句子可能会很长，这个概率就会变得非常小，可能会出现下界(underflow)的问题。所以可以修改直接相乘为log相加：$log(p_1·p_2·p_3·p_4)=logp_1+logp_2+logp_3+logp_4$</p><p><strong>两个工具包</strong>：</p><p><a href="http://www.speech.sri.com/projects/srilm/">http://www.speech.sri.com/projects/srilm/</a></p><p><a href="https://kheafield.com/code/kenlm/">https://kheafield.com/code/kenlm/</a></p><h2 id="效果评估">效果评估</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">一般方法是：<br><span class="hljs-number">1</span>. 在训练集(training set)中训练我们的模型参数<br><span class="hljs-number">2</span>. 使用区别于训练集的数据集作为测试集(test set)<br><span class="hljs-number">3</span>. 评估指标告诉我们模型在测试集上的表现如何<br><br>比较两个模型<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>的最佳评估方法是：<br><span class="hljs-number">1</span>. 将每个模型放入一个任务中——拼写校正器、语音识别器、机器翻译系统<br><span class="hljs-number">2</span>. 运行任务，获得<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>的精度，包括<br>  o 正确纠正了多少拼写错误的单词<br>  o 有多少单词翻译正确<br><span class="hljs-number">3</span>. 比较<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>的精确度<br></code></pre></td></tr></table></figure><p>Shannon Game：香农游戏。即给出前面n个单词，猜出第n+1个单词。</p><p><strong>困惑度</strong>（Perplexity）。PPL是用在自然语言处理领域（NLP）中，衡量语言模型好坏的指标。</p><img src="image-20210906175128920.png" alt="image-20210906175128920" style="zoom:50%;" /><h2 id="Generalization-and-Zeros">Generalization and Zeros</h2><p>如果出现从未见到过的单词，就可能出现0除的情况，困惑度无法计算。所以我们引入<strong>Laplace Smoothing</strong>。</p><p>每个部分减去一点点，分给所有没有出现过的情况。或者称为<strong>加1法</strong>（在出现次数表里，设置所有的初始值为1）。</p><img src="image-20210906175721810.png" alt="image-20210906175721810" style="zoom:50%;" /><img src="image-20210906175734929.png" alt="image-20210906175734929" style="zoom: 50%;" /><img src="image-20210906230732145.png" alt="image-20210906230732145" style="zoom: 67%;" /><img src="image-20210906230755996.png" alt="image-20210906230755996" style="zoom: 80%;" /><h2 id="参考资料">参考资料</h2><p>[1] https://www.jianshu.com/p/e91f061d6d91</p><p>[2] 权小军 nlp课程</p>]]></content>
    
    
    
    <tags>
      
      <tag>自然语言处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(一)Introduction and Tokenization</title>
    <link href="/wuhlan3/2021/09/20/tokenization/"/>
    <url>/wuhlan3/2021/09/20/tokenization/</url>
    
    <content type="html"><![CDATA[<h1>Introduction</h1><p>自然语言处理（Natural language processing，NLP）是<strong>语言学</strong>、<strong>计算机科学</strong>和<strong>人工智能</strong>的一个分支领域，研究计算机与人类语言之间的关系、相互作用，特别是如何编程计算机来<strong>处理</strong>和<strong>分析自然语言数据</strong>。</p><p>目标：使计算机能够理解文本的内容，包括上下文之间的细微差别(contextual nuances)</p><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109261720623.png" alt="image-20210926171930451" style="zoom:80%;box-shadow: none" /><h2 id="NLP的一些难题">NLP的一些难题</h2><p>Difficulty 1: Ambiguty</p><ul><li>Lexical ambiguity：词汇歧义——门把手弄坏了</li><li>Part-of-speech ambiguity：词性歧义——Time flies like an arrow.</li><li>Structural ambiguity：结构歧义——关于鲁迅的文章 。</li></ul><p>Difficulty 2: unknown language phenomena</p><ul><li>新的术语、人名、地名——裸退、非典</li><li>新的含义——苹果、凡尔赛</li><li>新的语法——百度一下、Google it</li></ul><h2 id="NLP的应用场景">NLP的应用场景</h2><ul><li>Information Retrieval：百度、Google、Bing</li><li>Text Generation :九歌——人工智能诗歌写作系统</li><li>Machine Translation：百度翻译、谷歌翻译</li><li>Question Answering &amp; Dialogue Systems：天猫精灵、小度</li><li>Knowledge Graph</li><li>Automatic Summarization</li><li>Sentiment Analysis</li><li>…</li></ul><h2 id="Corpora">Corpora</h2><p>corpora语料库，是可以是单个文档或多个文档的集合</p><p>一个text是由这些组成的：</p><ul><li>特定的作者</li><li>特定的事件</li><li>特定的类型</li><li>特定的语言</li><li>特定的功能</li></ul><p>语言不是凭空出现的，所以我们需要语料库来进行学习。</p><h2 id="Text-Normalization">Text Normalization</h2><p>所有自然语言处理都涉及到文本的规范化：</p><ul><li>Tokenizing words</li><li>Normalizing word formats</li><li>Segmenting sentences</li></ul><h3 id="Tokenization">Tokenization</h3><p>简单的方法：</p><ol><li>根据space characters来划分</li></ol><p>使用Unix/Linux的工具来进行space-based tokenization</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tr -sc ’A Za z’ ’ n’ &lt; shakes.txt | head<br>tr ‘A Z’ ‘a z ’ &lt; shakes.txt | tr sc ‘A Za z’ ‘ n’ | sort | uniq c<br>tr ‘A Z’ ‘a z ’ &lt; shakes.txt | tr sc ‘A Za z’ ‘ n’ | sort | uniq c | sort n r<br></code></pre></td></tr></table></figure><ol start="2"><li>当然，不能仅仅依靠标点符号来划分</li></ol><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109261826405.png" alt="image-20210926182526049" style="zoom:80%;box-shadow: none" /><ol start="3"><li>还有很多语言，比如说中文和日文是不使用空格来分隔单词的，那么又该如何划分呢？</li></ol><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109261845190.png" alt="image-20210926184536649" style="zoom:80%;box-shadow: none" /><ol start="4"><li>使用数据来进行划分</li></ol><p>常用算法有：</p><ul><li>Byte Pair Encoding (BPE)</li><li>Unigram language modeling tokenization</li><li>WordPiece (Schuster and Nakajima,</li></ul><p>它们都具有两个部分：</p><ol><li>token learner：以一套原始的语料库进行学习并生成一个词汇表</li><li>token segmenter：根据词汇表来对一个测试句子进行划分</li></ol><h3 id="BPE-token-learner">BPE token learner</h3><p>基本步骤：</p><ol><li>词汇表记录所有的单独的字符</li><li>循环：<ul><li>选择两个在训练语料库中出现频率最高的相邻符号（say ‘A’,‘B’）</li><li>将一个新的’AB’加入词汇表</li><li>取代所有相邻的’A’和’B’</li></ul></li><li>直到有k个合并完成</li></ol><p>由于大部分subword算法都是基于空格的划分，所以我们常常先向词汇表加入一个符号’_’</p><h3 id="例子">例子</h3><img src="image-20210926185638796.png" alt="image-20210926185638796" style="zoom:80%;box-shadow: none" /><img src="image-20210926185728642.png" style="zoom:80%;box-shadow: none" /><img src="image-20210926185744391.png" style="zoom:80%;box-shadow: none" /><img src="image-20210926185803240.png" style="zoom:80%;box-shadow: none;"/><h3 id="Normalizing-word-formats">Normalizing word formats</h3><ul><li>U.S.A. or USA</li><li>uhhuh or uh-huh</li><li>Fed or fed</li><li>am, is, be, are</li></ul><p>Lemmatization：转换为lemma词根</p><p>Stemming：将单词后缀删去，化繁为简</p><h2 id="小项目">小项目</h2><p>使用python进行网页的爬取、分词、写入excel表格。<br>URL: <a href="https://news.ifeng.com/c/89TNORdIths">https://news.ifeng.com/c/89TNORdIths</a><br>Crawler: <a href="www.topcoder.com/thrive/articles/web">www.topcoder.com/thrive/articles/web</a> crawler in python<br>Chinese word tokenization: <a href="https://github.com/fxsjy/jieba">https://github.com/fxsjy/jieba</a></p><p>总体来说不算难，根据爬虫和结巴两个包的示范代码，进行稍微的修改就可以实现了。</p><h3 id="代码：">代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> lxml<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> xlwt <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> jieba<br>workbook = Workbook(encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>table = workbook.add_sheet(<span class="hljs-string">&#x27;data&#x27;</span>)<br>table.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;URL&#x27;</span>)<br>table.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Title&#x27;</span>)<br>table.write(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Content&#x27;</span>)<br>url = <span class="hljs-string">&quot;https://news.ifeng.com/c/89TNORdIths&quot;</span><br>headers = &#123;<br>  <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span><br>&#125;<br>f = requests.get(url, headers = headers)<br><span class="hljs-comment">#开始获取html</span><br>soup = BeautifulSoup(f.content, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#往excel写入URL</span><br>table.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, url)<br><span class="hljs-comment">#获取标题</span><br>heading = soup.find(<span class="hljs-string">&#x27;h1&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;topic-2Eq5D0Zm&#x27;</span><br>  &#125;)<br>head_list = jieba.cut(heading.string.strip(<span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span>), cut_all=<span class="hljs-literal">False</span>)<br>token_heading = <span class="hljs-string">&quot;/ &quot;</span>.join(head_list)<br><span class="hljs-built_in">print</span>(token_heading)  <br>table.write(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, token_heading)<br><span class="hljs-comment">#获取文章</span><br>article = <span class="hljs-string">&quot;&quot;</span> <br>paragraphs = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>    <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;main_content-28C-Fj2p&#x27;</span><br>  &#125;).find_all(<span class="hljs-string">&#x27;p&#x27;</span>)<br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> paragraph <span class="hljs-keyword">in</span> paragraphs:<br>  article = article + paragraph.string.strip(<span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span>)<br>seg_list = jieba.cut(article, cut_all=<span class="hljs-literal">False</span>)<br>token_article = <span class="hljs-string">&quot;/ &quot;</span>.join(seg_list)<br><span class="hljs-built_in">print</span>(token_article) <br>table.write(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, token_article)<br>workbook.save(<span class="hljs-string">&#x27;text_token.xls&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="运行结果：">运行结果：</h3><img src="https://wuhlan3-1307602190.cos.ap-guangzhou.myqcloud.com/img/202109261914148.png" alt="image-20210926191356508" style="zoom:80%;box-shadow: none" />]]></content>
    
    
    
    <tags>
      
      <tag>自然语言处理</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>死水</title>
    <link href="/wuhlan3/2021/09/17/%E6%AD%BB%E6%B0%B4/"/>
    <url>/wuhlan3/2021/09/17/%E6%AD%BB%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<center><h3>死水</h3></center><center>这是一滩死水，</center><center>绝望得没有一丝生机，</center><center>平静得没有半点漪沦，</center><center>仅有盐绣出几朵白花。</center><br/><center>任凭他人称它为“天空之镜”，</center><center>说它包容万象也好，</center><center>说它善于模仿也罢，</center><center>它终究是一滩死水，</center><center>没有一丝生机。</center><br/><center>鸟儿的啼声划破天际，</center><center>离开时不带一点犹豫。</center><center>然而，</center><center>人呐，</center><center>争先恐后地用身上的色彩为它点缀，</center><center>看他们造出个什么世界。</center><br/><br/><blockquote><p>自然不敢与闻一多先生的《死水》相提并论。</p><p>这是我人生中最宝贵的一次旅行——毕业旅行，当时确确实实为眼前的景象所触动。</p><p>凌晨时分，寒风凛冽，我们一行人赶往景点希望迎来一场日出。眼前的景象却令我有些失望。茶卡盐湖的浓度非常高，能在里面生存的生物少之又少。它是死的，就那么静静地躺在那里。相比于气势磅礴、汹涌澎湃的大江大河，我觉得茶卡盐湖有一股小家子气。</p><p>当时茶卡盐湖貌似也是网红打卡景点，红色的裙子与冷清的环境形成强烈对比，更能显出女孩子们的美丽。</p><p>诗的最后一句既有着我对于网红景点、跟风……的厌恶；又有着一丝欣喜，似乎也因为人们的到来给这个冰冷死寂的环境带来了生机。这是一种自然而又矛盾的心态，不必说非得找出个答案。</p><p>这首诗就像是自己的孩子一样，不管它是好是坏都值得珍爱。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-1字典树解决[不含连续1的非负整数]</title>
    <link href="/wuhlan3/2021/09/11/0-1%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <url>/wuhlan3/2021/09/11/0-1%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="不含连续1的非负整数"><a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/">不含连续1的非负整数</a></h2><p>在该链接的基础上添加自己的理解<a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/suan-fa-xiao-ai-wo-lai-gei-ni-jie-shi-qi-4nh4/">https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/suan-fa-xiao-ai-wo-lai-gei-ni-jie-shi-qi-4nh4/</a></p><p><img src="image-20210911231521950.png" alt="image-20210911231521950"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findIntegers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">//初始化一棵树，直接使用动态规划计算每一层的 所求整数</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-number">31</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>] = dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">31</span>; ++i) &#123;<br>            dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-comment">//pre用于记录上一层的值:0或1</span><br>        <span class="hljs-comment">//res用于返回</span><br>        <span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">29</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            <span class="hljs-type">int</span> val = <span class="hljs-number">1</span> &lt;&lt; i;    <span class="hljs-comment">//取某一位</span><br>            <span class="hljs-keyword">if</span> ((n &amp; val) != <span class="hljs-number">0</span>) &#123;    <span class="hljs-comment">//判断是否与这一位有关，即该层是否有右子树</span><br>                <br>                n -= val;    <span class="hljs-comment">//清除这一位</span><br>                res += dp[i + <span class="hljs-number">1</span>];    <span class="hljs-comment">//有右子树的时候，把左子树的相关值添加到res</span><br>                <br>                <span class="hljs-comment">//如果上一层为1且该层为1，则直接结束遍历</span><br>                <span class="hljs-keyword">if</span> (pre == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                pre = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">//若无右子树，则进入左子树，到下一层继续判断</span><br>                pre = <span class="hljs-number">0</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                ++res;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="关于如何使用graphviz绘制二叉树">关于如何使用graphviz绘制二叉树</h2><h3 id="下载方式">下载方式</h3><p>linux:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install graphviz<br></code></pre></td></tr></table></figure><p>windows:</p><p><a href="https://www.graphviz.org/download/">https://www.graphviz.org/download/</a></p><h3 id="绘制方式">绘制方式</h3><p>测试程序：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">digraph binaryTree&#123;<br>    node[shape=<span class="hljs-built_in">circle</span>,<span class="hljs-built_in">color</span>=red,fontcolor=blue,fontsize=<span class="hljs-number">10</span>];<br>    root[<span class="hljs-built_in">color</span>=blue,fontcolor=black,fontsize=<span class="hljs-number">20</span>];<br>    <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span>a[style=dotted];<br>    <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span>b;<br>    <span class="hljs-function"><span class="hljs-title">a</span>-&gt;</span>c;<br>    <span class="hljs-function"><span class="hljs-title">a</span>-&gt;</span>d;<br>    <span class="hljs-function"><span class="hljs-title">b</span>-&gt;</span>e;<br>    <span class="hljs-function"><span class="hljs-title">b</span>-&gt;</span>f;<br>&#125;<br></code></pre></td></tr></table></figure><p>linux直接在终端输入/windows需要加入环境变量，在cmd输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">dot -Tpng -o <span class="hljs-built_in">tree</span>.png test.dot<br></code></pre></td></tr></table></figure><h3 id="生成效果">生成效果</h3><p><img src="tree.png" alt="tree"></p><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/62777936">https://zhuanlan.zhihu.com/p/62777936</a></p><p>[2] <a href="https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/suan-fa-xiao-ai-wo-lai-gei-ni-jie-shi-qi-4nh4/">https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/suan-fa-xiao-ai-wo-lai-gei-ni-jie-shi-qi-4nh4/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【置顶】Hexo更新日志</title>
    <link href="/wuhlan3/2021/09/09/Hexo%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <url>/wuhlan3/2021/09/09/Hexo%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h2 id="一、添加emoji显示功能">一、添加emoji显示功能</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">npm un hexo-renderer-marked <span class="hljs-comment">--save</span><br>npm i hexo-renderer-markdown-<span class="hljs-keyword">it</span> <span class="hljs-comment">--save</span><br>npm install markdown-<span class="hljs-keyword">it</span>-emoji <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>一般需要卸载原来的插件，但是我发现我的文件夹里并没有<code>hexo-renderer-marked</code>也就没有删了。</p><p>在_config.yml中添加以下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-ins</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span>  <span class="hljs-comment"># add emoji</span><br><span class="hljs-comment">#  anchors:</span><br><span class="hljs-comment">#    level: 2</span><br><span class="hljs-comment">#    collisionSuffix: &#x27;v&#x27;</span><br><span class="hljs-comment">#    permalink: false</span><br><span class="hljs-comment">#    permalinkClass: header-anchor</span><br><span class="hljs-comment">#    permalinkSymbol: ¶</span><br></code></pre></td></tr></table></figure><p>由于那个链接的东西实在是太丑了，我就注释掉了😣</p><p>使用<code>:persevere:</code>这样的语法就可以显示上面那个表情啦。具体可以参考<a href="https://www.cnblogs.com/zhaoruiqing/articles/12870209.html">https://www.cnblogs.com/zhaoruiqing/articles/12870209.html</a></p><h2 id="二、添加live2D">二、添加live2D</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-helper-live2d</span><br></code></pre></td></tr></table></figure><p>在_config.yml中添加以下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">live2d:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否启动</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span>  <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span>  <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span>  <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-tororo</span>  <span class="hljs-comment">## 模型文件</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span> <span class="hljs-comment"># 定位方向 left right top bottom</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span>  <span class="hljs-comment"># 小人宽度</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span> <span class="hljs-comment">#  小人高度</span><br>    <span class="hljs-attr">hOffset:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 向 偏移</span><br>    <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-60</span>  <span class="hljs-comment"># 像 偏移</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 手机端是否显示</span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacity:</span> <span class="hljs-number">1.0</span>  <span class="hljs-comment"># 模型透明度</span><br></code></pre></td></tr></table></figure><p>再使用cmd命令下载模型</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> live2d-widget-model-tororo<br></code></pre></td></tr></table></figure><p>其他模型可以参考该仓库：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p><p>在根目录里新建一个文件夹<code>live2d_models</code>，然后把模型放进去即可</p><h2 id="三、添加音乐播放器（具有收入侧栏的功能）">三、添加音乐播放器（具有收入侧栏的功能）</h2><p>事实上，我选用的主题fluid自带有aplayer音乐播放器</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">aplayer:</span>  <span class="hljs-comment"># 音乐播放器，注意不能与 hexo-tag-aplayer 插件共用</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 音频自动播放</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-string">&#x27;all&#x27;</span>  <span class="hljs-comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-string">&#x27;random&#x27;</span>  <span class="hljs-comment"># 播放顺序，可选值: &#x27;list&#x27;, &#x27;random&#x27;</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;#b7daff&#x27;</span>  <span class="hljs-comment"># 主题色</span><br>  <span class="hljs-attr">songs:</span>  <span class="hljs-comment"># 歌曲列表，必须传入下列各参数，其中 url 与 cover 在本地需存于 source 目录，更多参数见文档：https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Flaming&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;郑晟河&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/song1.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/song1.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;流れ行く雲&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;岸部真明&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/song2.m4a&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/song2.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;奇迹の山&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;岸部真明&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/song3.m4a&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/song2.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Sunflower&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;孙培博&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/song5.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/song3.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;少年の梦&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;岸部真明&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/song4.m4a&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/song2.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;like a star&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;Youngso Kim&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/like a star.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/like a star.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;境&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;刘嘉卓&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/境.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/刘嘉卓.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;翼~you are the HERO~&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;押尾コータロー&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/Wuhlan3/mp3/wings.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/Wuhlan3/img/押尾.jpg&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>只需要稍微修改一下参数就🆗啦，当然，我们会发现，播放器小框框一直显示在左下角，很碍眼。</p><p>通过该路径：<code>\blog\themes\hexo-theme-fluid\source\css</code>，新建一个文件<code>custom.css</code>，在里面放下这段代码即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.aplayer</span><span class="hljs-selector-class">.aplayer-fixed</span><span class="hljs-selector-class">.aplayer-narrow</span> <span class="hljs-selector-class">.aplayer-body</span> &#123;<br>  <span class="hljs-attribute">left</span>: -<span class="hljs-number">66px</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span><br>&#125;<br><br><span class="hljs-selector-class">.aplayer</span><span class="hljs-selector-class">.aplayer-fixed</span><span class="hljs-selector-class">.aplayer-narrow</span> <span class="hljs-selector-class">.aplayer-body</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>  <span class="hljs-comment">/* 鼠标悬停时左侧缩进归零，完全显示按钮 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、添加动态效果">四、添加动态效果</h2><p>添加动态效果的方法非常简单，在<code>_config.yml</code>中找到该代码块：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">custom_js:</span>  <span class="hljs-meta"># 指定自定义 js 文件路径，路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js，支持列表</span><br>    - <span class="hljs-keyword">/js/</span>dongtaicaidai.js <span class="hljs-meta"># 动态彩带</span><br>    <span class="hljs-meta"># - /js/bubble.js  #头部上升气泡</span><br>    <span class="hljs-meta">#- <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxuehua.js </span></span><br>    <span class="hljs-meta">#- <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/daxuehua.js</span></span><br></code></pre></td></tr></table></figure><p>可以直接按照格式调用JS代码，也可以通过本地的路径来调用JS代码</p><p>分享一个小仓库：<a href="https://cdn.jsdelivr.net/gh/bynotes/texiao@latest/source/js/">https://cdn.jsdelivr.net/gh/bynotes/texiao@latest/source/js/</a></p><h2 id="五、给Fluid添加一言">五、给Fluid添加一言</h2><p>首先，我们如何进行句子的筛选呢？</p><h4 id="句子类型（参数）">句子类型（参数）</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>动画</td></tr><tr><td>b</td><td>漫画</td></tr><tr><td>c</td><td>游戏</td></tr><tr><td>d</td><td>文学</td></tr><tr><td>e</td><td>原创</td></tr><tr><td>f</td><td>来自网络</td></tr><tr><td>g</td><td>其他</td></tr><tr><td>h</td><td>影视</td></tr><tr><td>i</td><td>诗词</td></tr><tr><td>j</td><td>网易云</td></tr><tr><td>k</td><td>哲学</td></tr><tr><td>l</td><td>抖机灵</td></tr><tr><td>其他</td><td>作为 动画 类型处理</td></tr></tbody></table><blockquote><p>可选择多个分类，例如： <code>?c=a&amp;c=c</code></p><p>最终我是用的是&quot;https://v1.hitokoto.cn?c=i&amp;max_length=20&quot;</p></blockquote><p>之后，我们只需要修改_config.yml就可以设置slogan为一言：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;少年何妨梦摘星,敢挽桑弓射玉衡&#x27;</span><br>  <span class="hljs-attr">api:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn?c=i&amp;max_length=20&quot;</span><br>    <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>    <span class="hljs-attr">headers:</span> &#123;&#125;<br>    <span class="hljs-attr">keys:</span> [<span class="hljs-string">&#x27;hitokoto&#x27;</span>]<br></code></pre></td></tr></table></figure><p>但是这样子限制得比较死，且只能够打印出诗句，而没有诗人和出处。可以通过修改typed.ejs来解决。该文件位于<code>hexo-theme-fluid\layout\_partials\plugins\typed.ejs</code>，修改为如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(theme.<span class="hljs-property">fun_features</span>.<span class="hljs-property">typing</span>.<span class="hljs-property">enable</span> &amp;&amp; <span class="hljs-title function_">in_scope</span>(theme.<span class="hljs-property">fun_features</span>.<span class="hljs-property">typing</span>.<span class="hljs-property">scope</span>) &amp;&amp; page.<span class="hljs-property">subtitle</span> !== <span class="hljs-literal">false</span>) &#123; %&gt;<br>  &lt;%- <span class="hljs-title function_">js_ex</span>(theme.<span class="hljs-property">static_prefix</span>.<span class="hljs-property">typed</span>, <span class="hljs-string">&#x27;/typed.min.js&#x27;</span>) %&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    (<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> typing = <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">plugins</span>.<span class="hljs-property">typing</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> subtitle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;subtitle&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (!subtitle || !typing) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> text = subtitle.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-typed-text&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &lt;% <span class="hljs-keyword">if</span> (<span class="hljs-title function_">is_home</span>() &amp;&amp; theme.<span class="hljs-property">index</span>.<span class="hljs-property">slogan</span>.<span class="hljs-property">api</span> &amp;&amp; theme.<span class="hljs-property">index</span>.<span class="hljs-property">slogan</span>.<span class="hljs-property">api</span>.<span class="hljs-property">enable</span>) &#123; %&gt;</span></span><br><span class="language-javascript"><span class="language-xml">        jQuery.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;&lt;%= theme.index.slogan.api.method %&gt;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&lt;%- theme.index.slogan.api.url %&gt;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">headers</span>: &lt;%- <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(theme.<span class="hljs-property">index</span>.<span class="hljs-property">slogan</span>.<span class="hljs-property">api</span>.<span class="hljs-property">headers</span> || &#123;&#125;) %&gt;,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> apiText;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> hitokoto = <span class="hljs-string">&#x27;少年何妨梦摘星,敢挽桑弓射玉衡&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> <span class="hljs-keyword">from</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> from_who = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (result) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">var</span> keys = <span class="hljs-string">&#x27;&lt;%= theme.index.slogan.api.keys %&gt;&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                result = result[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">of</span> keys) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">var</span> value = result[k];</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  <span class="hljs-keyword">if</span>(k == <span class="hljs-string">&#x27;hitokoto&#x27;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    hitokoto = value</span></span><br><span class="language-javascript"><span class="language-xml">                  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-string">&#x27;from&#x27;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-keyword">from</span> = value</span></span><br><span class="language-javascript"><span class="language-xml">                  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-string">&#x27;from_who&#x27;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    from_who = value</span></span><br><span class="language-javascript"><span class="language-xml">                  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">if</span>(<span class="hljs-keyword">from</span> == <span class="hljs-string">&#x27;&#x27;</span> || from_who == <span class="hljs-string">&#x27;&#x27;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                apiText = <span class="hljs-string">`<span class="hljs-subst">$&#123;hitokoto&#125;</span>`</span></span></span><br><span class="language-javascript"><span class="language-xml">              &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                apiText = <span class="hljs-string">`<span class="hljs-subst">$&#123;hitokoto&#125;</span>&lt;br&gt;——<span class="hljs-subst">$&#123;from_who&#125;</span>《<span class="hljs-subst">$&#123;<span class="hljs-keyword">from</span>&#125;</span>》`</span></span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            apiText ? <span class="hljs-title function_">typing</span>(apiText) : <span class="hljs-title function_">typing</span>(text);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (error) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to request &lt;%= theme.index.slogan.api.url %&gt;:&#x27;</span>, error);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">typing</span>(text);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      &lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">typing</span>(text);</span></span><br><span class="language-javascript"><span class="language-xml">      &lt;% &#125; %&gt;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">&lt;% &#125; %&gt;</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>这里，我修改了keys的用法，所以_config.yml文件中的keys也要相应改变：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;少年何妨梦摘星,敢挽桑弓射玉衡&#x27;</span><br>  <span class="hljs-attr">api:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;https://v1.hitokoto.cn?c=i&amp;max_length=20&quot;</span><br>    <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br>    <span class="hljs-attr">headers:</span> &#123;&#125;<br>    <span class="hljs-attr">keys:</span> [<span class="hljs-string">&#x27;hitokoto&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;from_who&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="六、对文章进行加密">六、对文章进行加密</h2><blockquote><p>加入这个功能，会不会违背写博客这个初心呢？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//安装插件<br>yarn add hexo-blog-encrypt<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#文章加密</span><br><span class="hljs-attr">encrypt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>在文章开头加入一些信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs keyvalue">password: XXXXXX<br>message: 嘻嘻，有密码才能看喔<br>excerpt: 旧的文章概要<br>abstract: 新的文章概要<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【置顶】数据库系统概念</title>
    <link href="/wuhlan3/2021/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    <url>/wuhlan3/2021/09/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/04/数据库系统概念1/" title="title">一、引言</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/06/数据库系统概念2/" title="title">二、关系型数据库</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/08/数据库系统概念3/" title="title">三、SQL</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/18/数据库系统概念4/" title="title">四、中级SQL</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/09/07/databasehomework1/" title="title">第二章课后习题</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/16/databasehomework2/" title="title">第三章课后习题</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/19/databasehomework3/" title="title">第四章课后习题</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/06/lab2-表、列、索引的创建/" title="title">lab2_表、列、索引的创建</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/09/13/lab3-select基础/" title="title">lab3_select基础</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>学习笔记，SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>icc和mkl的安装与编译</title>
    <link href="/wuhlan3/2021/09/01/mkl%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BC%96%E8%AF%91/"/>
    <url>/wuhlan3/2021/09/01/mkl%E5%AE%89%E8%A3%85%E4%B8%8E%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="icc的安装">icc的安装</h2><ol><li><p>注册intel官网账号，进入该网址安装<a href="https://registrationcenter-download.intel.com/akdlm/irc_nas/17928/l_dpcpp-cpp-compiler_p_2021.3.0.3168_offline.sh">https://registrationcenter-download.intel.com/akdlm/irc_nas/17928/l_dpcpp-cpp-compiler_p_2021.3.0.3168_offline.sh</a></p></li><li><p>在linux中执行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">./l_dpcpp-cpp-compiler_p_2021<span class="hljs-number">.3</span><span class="hljs-number">.0</span><span class="hljs-number">.3168</span>_offline.sh<br>#如果没有权限可以<br>chmod +x l_dpcpp-cpp-compiler_p_2021<span class="hljs-number">.3</span><span class="hljs-number">.0</span><span class="hljs-number">.3168</span>_offline.sh<br>./l_dpcpp-cpp-compiler_p_2021<span class="hljs-number">.3</span><span class="hljs-number">.0</span><span class="hljs-number">.3168</span>_offline.sh<br>#或者使用sh命令<br>sh l_dpcpp-cpp-compiler_p_2021<span class="hljs-number">.3</span><span class="hljs-number">.0</span><span class="hljs-number">.3168</span>_offline.sh<br></code></pre></td></tr></table></figure></li><li><p>然后根据图形化界面一步步安装</p></li><li><p>检验是否安装成功</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">wuhlan3<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/matrix</span><span class="hljs-variable">$ </span>. /opt/intel/oneapi/setvars.sh<br><br>:: initializing oneAPI environment ...<br>   <span class="hljs-symbol">bash:</span> <span class="hljs-title class_">BASH_VERSION</span> = <span class="hljs-number">5.0</span>.<span class="hljs-number">17</span>(<span class="hljs-number">1</span>)-release<br>:: compiler -- latest<br>:: debugger -- latest<br>:: dev-utilities -- latest<br>:: mkl -- latest<br>:: tbb -- latest<br>:: oneAPI environment initialized ::<br></code></pre></td></tr></table></figure></li></ol><h2 id="mkl的安装">mkl的安装</h2><p>mkl，即英特尔数学核心函数库Intel Math Kernel Library</p><p>之前不懂oneapi怎么安装，所以先使用apt安装了mkl~😑</p><h3 id="1-直接安装官网上的-sh文件">1.直接安装官网上的.sh文件</h3><p><a href="https://registrationcenter-download.intel.com/akdlm/irc_nas/17901/l_onemkl_p_2021.3.0.520_offline.sh">https://registrationcenter-download.intel.com/akdlm/irc_nas/17901/l_onemkl_p_2021.3.0.520_offline.sh</a></p><p>与icc的安装方法类似</p><h3 id="2-apt的安装方法">2.apt的安装方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB<br>sudo sh -c &#x27;echo deb https://apt.repos.intel.com/mkl all main /etc/apt/sources.list.d/intel-mkl.list&#x27;<br>sudo apt-get update<br>sudo apt-get install intel-mkl-64bit-2020.2<br>source /opt/intel/compilers_and_libraries_2020/linux/mkl/bin/mklvars.sh intel64 ilp64<br></code></pre></td></tr></table></figure><h2 id="测试程序">测试程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(x,y) (((x) &lt; (y)) ? (x) : (y))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mkl.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">double</span> *A, *B, *C;<br>    <span class="hljs-type">int</span> m, n, k, i, j;<br>    <span class="hljs-type">double</span> alpha, beta;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n This example computes real matrix C=alpha*A*B+beta*C using \n&quot;</span><br>            <span class="hljs-string">&quot; Intel(R) MKL function dgemm, where A, B, and  C are matrices and \n&quot;</span><br>            <span class="hljs-string">&quot; alpha and beta are double precision scalars\n\n&quot;</span>);<br><br>    m = <span class="hljs-number">2000</span>, k = <span class="hljs-number">200</span>, n = <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot; Initializing data for matrix multiplication C=A*B for matrix \n&quot;</span><br>            <span class="hljs-string">&quot; A(%ix%i) and matrix B(%ix%i)\n\n&quot;</span>, m, k, k, n);<br>    alpha = <span class="hljs-number">1.0</span>; beta = <span class="hljs-number">0.0</span>;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot; Allocating memory for matrices aligned on 64-byte boundary for better \n&quot;</span><br>            <span class="hljs-string">&quot; performance \n\n&quot;</span>);<br>    A = (<span class="hljs-type">double</span> *)mkl_malloc( m*k*<span class="hljs-keyword">sizeof</span>( <span class="hljs-type">double</span> ), <span class="hljs-number">64</span> );<br>    B = (<span class="hljs-type">double</span> *)mkl_malloc( k*n*<span class="hljs-keyword">sizeof</span>( <span class="hljs-type">double</span> ), <span class="hljs-number">64</span> );<br>    C = (<span class="hljs-type">double</span> *)mkl_malloc( m*n*<span class="hljs-keyword">sizeof</span>( <span class="hljs-type">double</span> ), <span class="hljs-number">64</span> );<br>    <span class="hljs-keyword">if</span> (A == <span class="hljs-literal">NULL</span> || B == <span class="hljs-literal">NULL</span> || C == <span class="hljs-literal">NULL</span>) &#123;<br>      <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;\n ERROR: Can&#x27;t allocate memory for matrices. Aborting... \n\n&quot;</span>);<br>      mkl_free(A);<br>      mkl_free(B);<br>      mkl_free(C);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot; Intializing matrix data \n\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; (m*k); i++) &#123;<br>        A[i] = (<span class="hljs-type">double</span>)(i+<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; (k*n); i++) &#123;<br>        B[i] = (<span class="hljs-type">double</span>)(-i<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; (m*n); i++) &#123;<br>        C[i] = <span class="hljs-number">0.0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot; Computing matrix product using Intel(R) MKL dgemm function via CBLAS interface \n\n&quot;</span>);<br>    cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, <br>                m, n, k, alpha, A, k, B, n, beta, C, n);<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n Computations completed.\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot; Top left corner of matrix A: \n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;min(m,<span class="hljs-number">6</span>); i++) &#123;<br>      <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;min(k,<span class="hljs-number">6</span>); j++) &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%12.0f&quot;</span>, A[j+i*k]);<br>      &#125;<br>      <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n Top left corner of matrix B: \n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;min(k,<span class="hljs-number">6</span>); i++) &#123;<br>      <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;min(n,<span class="hljs-number">6</span>); j++) &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%12.0f&quot;</span>, B[j+i*n]);<br>      &#125;<br>      <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n Top left corner of matrix C: \n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;min(m,<span class="hljs-number">6</span>); i++) &#123;<br>      <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;min(n,<span class="hljs-number">6</span>); j++) &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%12.5G&quot;</span>, C[j+i*n]);<br>      &#125;<br>      <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n Deallocating memory \n\n&quot;</span>);<br>    mkl_free(A);<br>    mkl_free(B);<br>    mkl_free(C);<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot; Example completed. \n\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译与运行">编译与运行</h2><p>gcc编译方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">. /opt/intel/bin/compilervars.sh intel64</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gcc matrix.c -lmkl_rt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./a.out</span><br></code></pre></td></tr></table></figure><p>icc编译方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">. /opt/intel/oneapi/setvars.sh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">icc -mkl matrix.c</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./a.out</span><br></code></pre></td></tr></table></figure><p>使用icc编译器，可以达到性能优化的效果</p><h2 id="小插曲">小插曲</h2><p>ubuntu虚拟机的磁盘空间不足：</p><ol><li>在VMware那里手动设置磁盘空间</li><li>下载gparted进行分区</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">sudo apt-get install gparted<br>sudo gparted<br></code></pre></td></tr></table></figure><p><img src="image-20210901102704269.png" alt="image-20210901102704269"></p><p><img src="image-20210901102644127.png" alt="image-20210901102644127"></p>]]></content>
    
    
    
    <tags>
      
      <tag>超算</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Linux高性能服务器》学习笔记</title>
    <link href="/wuhlan3/2021/08/09/%E3%80%8ALinux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%8B%E6%B8%B8%E5%8F%8C%E8%91%97%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/wuhlan3/2021/08/09/%E3%80%8ALinux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%8B%E6%B8%B8%E5%8F%8C%E8%91%97%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/10/Linux高性能服务器一/" title="title">一、TCP/IP通信案例：访问Internet上的Web服务器</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/10/Linux高性能服务器二/" title="title">二、Linux服务器程序规范</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/10/Linux高性能服务器三/" title="title">三、高性能服务器程序框架 </a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>linux</tag>
      
      <tag>C/C++</tag>
      
      <tag>Web</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinuxCpp实现Webserver</title>
    <link href="/wuhlan3/2021/08/06/LinuxCpp%E5%AE%9E%E7%8E%B0Webserver/"/>
    <url>/wuhlan3/2021/08/06/LinuxCpp%E5%AE%9E%E7%8E%B0Webserver/</url>
    
    <content type="html"><![CDATA[<p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/06/RAII%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%87%BD%E6%95%B0%E7%9A%84%E5%B0%81%E8%A3%85/" title="title">一、RAII与线程函数的封装</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/09/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%8D%8A%E5%8F%8D%E5%BA%94%E5%A0%86%E7%BA%BF%E7%A8%8B%E6%B1%A0/" title="title">二、半同步半反应堆线程池</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/09/epoll/" title="title">三、epoll</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/wuhlan3/2021/08/09/%E3%80%8ALinux%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%8B%E6%B8%B8%E5%8F%8C%E8%91%97%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" title="title">四、HTTP基础</a></p><p><a class="btn" href="" title="title">五、HTTP报文处理流程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>C/C++</tag>
      
      <tag>Web</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UNIX网络编程导航</title>
    <link href="/wuhlan3/2021/08/04/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA/"/>
    <url>/wuhlan3/2021/08/04/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA/</url>
    
    <content type="html"><![CDATA[<p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/07/29/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/" title="title">一、UNIX网络编程——introduction</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/07/29/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/" title="title">二、UNIX网络编程——传输层</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/07/30/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/" title="title">三、UNIX网络编程——socket编程</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/07/30/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/" title="title">四、UNIX网络编程——TCP编程</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/08/03/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89/" title="title">五、UNIX网络编程——echo服务器</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/08/04/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89/" title="title">六、UNIX网络编程——I/O复用，select，shutdown，pselect，poll</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/08/06/UNIX网络编程（七）/" title="title">七、UNIX网络编程——socket选项</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/08/06/UNIX网络编程（八）/" title="title">八、UNIX网络编程——UDP编程</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/08/10/UNIX网络编程（九）/" title="title">九、UNIX网络编程——守护进程与inetd超级服务器</a></p><p><a class="btn" href="https://wuhlan3.gitee.io/Wuhlan3/2021/08/10/UNIX网络编程（十）/" title="title">十、UNIX网络编程——高级I/O函数</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>linux</tag>
      
      <tag>C/C++</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/wuhlan3/2021/07/27/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/wuhlan3/2021/07/27/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1>Linux</h1><h4 id="一些名词：">一些名词：</h4><ul><li><p>Unix：</p></li><li><p>Minix：</p></li><li><p>GNU：GNU是&quot;GNU’s Not Unix&quot;的递归缩写</p><p>GNU几个重要的软件：</p><ul><li>Emacs</li><li>GNU C（GCC）</li><li>GNU C Library （glibc）</li><li>Bash shell</li></ul></li><li><p>FSF：自由软件基金会（FSF, Free Software Foundation）</p></li><li><p>GPL：通用公共许可证（General Public License, GPL）</p></li><li><p>LGPL：(GNU Lesser General Public License) <em>LGPL</em>是GPL的一个为主要为类库使用设计的开源协议。</p></li><li><p>Open source：</p></li><li><p>POSIX：可携式操作系统接口（Portable Operating System Interface）的缩写，重点在 规范核心与应用程序之间的接口</p></li><li><p>Linux distribution：（Kernel + Softwares + Tools + 可完整安装程序）</p></li><li><p>问：发展Linux distributions的公司那么多，是否每一个都不相同呢？</p><p>答：这就不需要担心了，因为每个Linux distributions使用的kernel都是http://www.kernel.org所释出的，而他们所选择的软件，几乎都是目前很知名的软件，重复性相当的高， 例如网页服务器的Apache，电子邮件服务器的Postfix/sendmail，文件服务器的Samba等等。</p></li><li><p>distributions的分类：</p><table><thead><tr><th></th><th>RPM软件管理</th><th><strong>DPKG</strong> 软件管理</th><th>其他</th></tr></thead><tbody><tr><td>商业公司</td><td>RHEL (Red Hat 公司) SuSE (Micro Focus)</td><td>Ubuntu (CanonicalLtd.)</td><td></td></tr><tr><td>社群单位</td><td>Fedora CentOS OpenSuSE</td><td>Debian B2D</td><td>Gentoo</td></tr></tbody></table></li><li><p>X Window System：X Window即X Window图形用户接口，是一种计算机软件系统和网络协议，提供了一个基础的图形用户界面（GUI）和丰富的输入设备能力联网计算机。</p></li></ul><h2 id="文件权限">文件权限</h2><h3 id="查看权限">查看权限</h3><ul><li>user（用户）</li><li>group（群组）</li><li>others（其他）</li><li>root（万能的神）</li></ul><p>root的相关信息记录在<code>/etc/passwd</code>这个文件内。</p><p>个人的密码则是记录 在<code>/etc/shadow</code>这个文件内。</p><p>Linux所有的群组名称都记录在<code>/etc/group</code>内</p><p>这三个文件 可以说是Linux系统里面帐号、密码、群组信息的集中地。</p><p>使用<code>ls -al</code>可以查看文件的权限信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/*类型与权限(permission) 连结数 文件拥有者 文件所属群组 文件大小 最后修改时间 文件名*/<br>wuhlan3@wuhlan3-VMware-Virtual-Platform:~/桌面$ sudo ls -al<br>[sudo] wuhlan3 的密码：<br>总用量 <span class="hljs-number">3768</span><br>drwxr-xr-x  <span class="hljs-number">3</span> wuhlan3 wuhlan3    <span class="hljs-number">4096</span> <span class="hljs-number">7</span>月  <span class="hljs-number">26</span> <span class="hljs-number">15</span>:<span class="hljs-number">20</span>  .<br>drwx------ <span class="hljs-number">22</span> wuhlan3 wuhlan3    <span class="hljs-number">4096</span> <span class="hljs-number">7</span>月  <span class="hljs-number">27</span> <span class="hljs-number">11</span>:<span class="hljs-number">08</span>  ..<br>-rw-rw-r--  <span class="hljs-number">1</span> wuhlan3 wuhlan3 <span class="hljs-number">3240860</span> <span class="hljs-number">7</span>月  <span class="hljs-number">23</span> <span class="hljs-number">16</span>:<span class="hljs-number">28</span>  <span class="hljs-number">666</span>.mp4<br>drwx------ <span class="hljs-number">16</span> wuhlan3 wuhlan3    <span class="hljs-number">4096</span> <span class="hljs-number">7</span>月  <span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">18</span>  ffmpeg-<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br>-rw-rw-r--  <span class="hljs-number">1</span> wuhlan3 wuhlan3  <span class="hljs-number">226961</span> <span class="hljs-number">7</span>月  <span class="hljs-number">26</span> <span class="hljs-number">10</span>:<span class="hljs-number">39</span>  index.html<br>-rw-rw-r--  <span class="hljs-number">1</span> wuhlan3 wuhlan3  <span class="hljs-number">368871</span> <span class="hljs-number">7</span>月  <span class="hljs-number">26</span> <span class="hljs-number">13</span>:<span class="hljs-number">58</span>  output.mp4<br>lrwxrwxrwx  <span class="hljs-number">1</span> wuhlan3 wuhlan3      <span class="hljs-number">37</span> <span class="hljs-number">7</span>月  <span class="hljs-number">26</span> <span class="hljs-number">15</span>:<span class="hljs-number">20</span> &#x27; qtcreator&#x27; -&gt; /opt/Qt/Tools/QtCreator/bin/qtcreator<br></code></pre></td></tr></table></figure><ol><li><p>第一栏：<strong>类型与权限</strong>，总共有十个字符，第一个字符表示目录、文件或链接文件等：</p><ul><li><p>当为[ d ]则是<strong>目录</strong>，例如上表文件名为“.config”的那一行；</p></li><li><p>当为[ - ]则是<strong>文件</strong>，例如上表文件名为“initial-setup-ks.cfg”那一行；</p></li><li><p>若是[ l ]则表示为<strong>链接文件</strong>（link file）；</p></li><li><p>若是[ b ]则表示为设备文件里面的可供<strong>储存</strong>的周边<strong>设备</strong>（可随机存取设备）；</p></li><li><p>若是[ c ]则表示为设备文件里面的<strong>序列埠</strong>(bu)/<strong>串行端口</strong>设备，例如键盘、鼠标（一次性读取设 备）。</p></li></ul><p>接下来的字符均为“rwx” 的三个参数的组合。其中，[ r ]代表<strong>可读</strong>、[ w ]代表<strong>可写</strong>、[ x ]代表<strong>可执行</strong>。</p><p>第一组为user，第二组为group，第三组为others</p></li><li><p>第二栏：表示有多少文件名链接到此节点（<strong>i-node</strong>）</p></li><li><p>第三栏：表示这个文件（或目录）的“拥有者帐号”</p></li><li><p>第四栏：表示这个文件的所属群组</p></li><li><p>第五栏：为这个文件的容量大小，默认单位为Bytes</p></li><li><p>第六栏：为这个文件的创建日期或者是最近的修改日期</p></li><li><p>第七栏：为这个文件的文件名</p></li></ol><h3 id="修改权限">修改权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp ：改变文件所属群组<br>chown ：改变文件拥有者<br>chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性    change file mode bits<br></code></pre></td></tr></table></figure><p>由于权限是三个三个一组的，所以我们可以用二进制再转为十进制表示：<code>&gt; r:4 &gt; w:2 &gt; x:1 </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> [-R] xyz 文件或目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">其中-R用来表示对该目录下的所有文件进行递归地修改权限（Recursive）</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">xyz 写做777时，全部权限开启</span><br></code></pre></td></tr></table></figure><h4 id="权限对于文件和文件夹的意义：">权限对于文件和文件夹的意义：</h4><table><thead><tr><th>类型</th><th>内容</th><th>r</th><th>w</th><th>x</th></tr></thead><tbody><tr><td>文件</td><td>详细数据</td><td>读取文件内容</td><td>修改文件内容</td><td>执行文件内容</td></tr><tr><td>文件夹（目录）</td><td>文件名</td><td>读取文件名</td><td>修改文件名</td><td>进入该目录(cd)</td></tr></tbody></table><h4 id="文件类型：">文件类型：</h4><table><thead><tr><th>文件类型</th><th>细分</th><th>备注</th></tr></thead><tbody><tr><td>正规文件（regular file ）</td><td>纯文本文件（ASCII）</td><td>[ - ]</td></tr><tr><td></td><td>二进制档（binary）</td><td>[ - ]</td></tr><tr><td></td><td>数据格式文件（data）</td><td>[ - ]</td></tr><tr><td>目录（directory）</td><td></td><td>[ d ]</td></tr><tr><td>链接文件（link）</td><td></td><td>[ l ]</td></tr><tr><td>设备与设备文件（device）</td><td>区块（block）设备文件</td><td>[ b ]</td></tr><tr><td></td><td>字符（character）设备文件</td><td>[ c ]</td></tr><tr><td>数据接口文件（sockets）</td><td></td><td>[ s ]</td></tr><tr><td>数据输送档（FIFO, pipe）</td><td></td><td>[ p ]</td></tr></tbody></table><div class="note note-success">            <p>Linux的文件是没有所谓的“扩展名”的，一个Linux文件能不能被执行，与他的第一栏的十个属性有关，与文件名根本一点关系都没有。具有“可执行的权限”以及“具有可执行的程序码”是两回事！</p>          </div><h3 id="目录配置">目录配置</h3><p>FHS：Filesystem Hierarchy Standard 。FHS的重点在于规范每个特定的目录下应该要 放置什么样的数据而已。主要分为四种交互作用的形态：shareable, unshareable, static, variable</p><p>事实上，FHS针对目录树架构仅定义出三层目录下面应该放置什么数据而已，分别是下面这 三个目录的定义：</p><ul><li><p>/       （root, 根目录）：与开机系统有关；</p></li><li><p>/usr （unix software resource）：与软件安装/执行有关；</p></li><li><p>/var （variable）：与系统运行过程有关。</p></li></ul><img src="image-20210728103045651.png" alt="image-20210728103045651" style="zoom:100%;" /><p>详情可回顾《鸟哥的linux私房菜 第四版》p282</p><h4 id="绝对路径与相对路径">绝对路径与相对路径</h4><p>绝对路径：由根目录<code>/</code>开始写起的文件名或目录名称， 例如 <code>/home/dmtsai/.bashrc</code>；</p><p>相对路径：相对于目前路径的文件名写法。 例如 <code>./home/dmtsai</code> 或 <code>../../home/dmtsai/ </code>等 等。反正开头不是 / 就属于相对路径的写法</p><h2 id="目录">目录</h2><h4 id="特殊的目录">特殊的目录</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">.             </span>代表此层目录 <br><span class="hljs-bullet">..             </span>代表上一层目录 <br><span class="hljs-bullet">-             </span>代表前一个工作目录 <br>~             代表“目前使用者身份”所在的主文件夹 <br>~account     代表 account 这个使用者的主文件夹（account是个帐号名称）<br></code></pre></td></tr></table></figure><h4 id="处理目录">处理目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>：变换目录<br><span class="hljs-built_in">pwd</span>：显示目前的目录<br><span class="hljs-built_in">mkdir</span>：创建一个新的目录<br><span class="hljs-built_in">rmdir</span>：删除一个空的目录<br></code></pre></td></tr></table></figure><h4 id="环境变量PATH">环境变量PATH</h4><p>如下，可以显示当前的所有路径。（PATH 前面加的 $ 表示后面接的是变量，所以会显示出目前的 PATH）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wuhlan3@wuhlan3-VMware-Virtual-Platform:~/桌面$ <span class="hljs-built_in">echo</span> $<span class="hljs-built_in">PATH</span><br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games<br></code></pre></td></tr></table></figure><p>环境变量配置：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ <span class="hljs-built_in">PATH</span>=&quot;$&#123;<span class="hljs-built_in">PATH</span>&#125;:路径名&quot;<br></code></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><p>[1]《鸟哥的linux私房菜 第四版》</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/wuhlan3/2021/07/26/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/wuhlan3/2021/07/26/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="并查集（Union-Find）">并查集（Union-Find）</h2><h3 id="思维导图">思维导图</h3><p><img src="%E5%B9%B6%E6%9F%A5%E9%9B%86.png" alt="并查集"></p><h3 id="C-模板">C++模板</h3><p>重点是find函数吧，一般情况下将union啥的可以嵌入到具体的实现中加以判断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFindSet</span>&#123;<br><span class="hljs-keyword">private</span>:    <br>    vector&lt;<span class="hljs-type">int</span>&gt; f;  <span class="hljs-comment">//表示第i个节点的父节点</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">UnionFindSet</span>(<span class="hljs-type">int</span> size)&#123;<br>        f.<span class="hljs-built_in">resize</span>(size);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size;i ++)&#123;<br>            f[i] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(f[k] == k)<span class="hljs-keyword">return</span> k;<br>        <span class="hljs-keyword">return</span> f[k]  = <span class="hljs-built_in">find</span>(f[k]);  <br>    &#125;<span class="hljs-comment">//寻找到根节点</span><br>    <span class="hljs-comment">//在寻找的过程中，把经过的人的父节点也变为根节点</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>        <span class="hljs-type">int</span> fx = <span class="hljs-built_in">find</span>(x);<br>        <span class="hljs-type">int</span> fy = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span>(fx != fy)&#123;<br>            f[fy] = fx; <span class="hljs-comment">//合并子集</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isinoneset</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>理解了之后，可以再简化一些：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; f;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[x] == x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> f[x] = <span class="hljs-built_in">find</span>(f[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">uni</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>    f[<span class="hljs-built_in">find</span>(y)] = <span class="hljs-built_in">find</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    f.<span class="hljs-built_in">resize</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)f[i] = i;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="已解决问题">已解决问题</h2><p>下面的中等题，思路都是非常类似的，一个套路。比较有价值的也就<a href="https://leetcode-cn.com/problems/couples-holding-hands/">情侣牵手</a>这道困难题。</p><p><strong><a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/">990. 等式方程的可满足性[中等]</a></strong></p><p><strong><a href="https://leetcode-cn.com/problems/number-of-provinces/">547. 省份数量[中等]</a></strong></p><p><strong><a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/">1319. 连通网络的操作次数[中等]</a></strong></p><p><strong><a href="https://leetcode-cn.com/problems/number-of-provinces/">547. 省份数量[中等]</a></strong></p><p><strong><a href="https://leetcode-cn.com/problems/couples-holding-hands/">765. 情侣牵手[困难]</a></strong></p><h2 id="较有趣的题：情侣牵手">较有趣的题：情侣牵手</h2><h3 id="题目描述">题目描述</h3><p><code>N </code>对情侣坐在连续排列的<code>2N</code>个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 一次交换可选择任意两人，让他们站起来交换座位。</p><p>人和座位用 0 到 2N-1 的整数表示，情侣们按顺序编号，第一对是 <code>(0, 1)</code>，第二对是<code> (2, 3)</code>，以此类推，最后一对是 <code>(2N-2, 2N-1)</code>。</p><p>这些情侣的初始座位  <code>row[i]</code> 是由最初始坐在第 <code>i</code> 个座位上的人决定的。</p><p>示例 1:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入<span class="hljs-symbol">:</span> <span class="hljs-built_in">row</span> = [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>输出<span class="hljs-symbol">:</span> <span class="hljs-number">1</span><br>解释<span class="hljs-symbol">:</span> 我们只需要交换<span class="hljs-built_in">row</span>[<span class="hljs-number">1</span>]和<span class="hljs-built_in">row</span>[<span class="hljs-number">2</span>]的位置即可。<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: row = [3, 2, 0, 1]</span><br><span class="hljs-section">输出: 0</span><br><span class="hljs-section">解释: 无需交换座位，所有的情侣都已经可以手牵手了。</span><br></code></pre></td></tr></table></figure><p>说明:</p><p><code>len(row) </code>是偶数且数值在 <code>[4, 60]</code>范围内。<br>可以保证<code>row </code>是序列 <code>0...len(row)-1</code> 的一个全排列。</p><h3 id="算法思路">算法思路</h3><p>一开始想到的是：“是不是把两个情侣看作一个连通分量呢？那这样，为什么会用到并查集呢？”</p><p>事实上，这里的<strong>连通分量</strong>是<strong>相互错开的情侣</strong>。下面具体来说一下。</p><p>我们把每一组配对的情侣看作是一个单元，使用i/2作为他们的共同编号：</p><ul><li>假设两组情侣相互交错开了，他们两组之间形成了一个环，那么需要交换1次；</li><li>假设三组情侣相互交错开了，他们三组之间形成了一个环，那么需要交换2次；</li><li>假设四组情侣相互交错开了，他们四组之间形成了一个环，那么需要交换3次；</li><li>…</li></ul><p>把每一个环看作一个连通分量。所以，我们只需要计算情侣之间形成了多少个环，即有多少个集合。</p><p>从头到尾遍历一遍，如果相邻而坐的两个人不是情侣，那么这两个情侣组就处于同一个连通分量中，使用<code>union</code>将他们合并。</p><h3 id="代码实现">代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; f;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(x == f[x])<span class="hljs-keyword">return</span> x;<br>        <span class="hljs-keyword">return</span> f[x] = <span class="hljs-built_in">find</span>(f[x]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">uni</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>        f[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y);<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSwapsCouples</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; row)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = row.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> m = n/<span class="hljs-number">2</span>;<br>        f.<span class="hljs-built_in">resize</span>(m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++)f[i] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>)<span class="hljs-built_in">uni</span>(row[i] / <span class="hljs-number">2</span>, row[i + <span class="hljs-number">1</span>] / <span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-built_in">find</span>(i)) cnt++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> m - cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><p>[1] <a href="https://leetcode-cn.com/leetbook/read/disjoint-set/ovuxje/">https://leetcode-cn.com/leetbook/read/disjoint-set/ovuxje/</a></p><p>[2] <a href="https://leetcode-cn.com/problems/couples-holding-hands/solution/liang-chong-100-de-jie-fa-bing-cha-ji-ta-26a6/">https://leetcode-cn.com/problems/couples-holding-hands/solution/liang-chong-100-de-jie-fa-bing-cha-ji-ta-26a6/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt学习之路（一）</title>
    <link href="/wuhlan3/2021/07/26/Qt%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/wuhlan3/2021/07/26/Qt%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Qt的安装">Qt的安装</h2><p>我是在kylin-v10的环境下进行下载的，与ubuntu是类似的</p><p>下载地址：https://download.qt.io/official_releases/qt/</p><p>可能需要赋予权限：<code>chmod +x qt-opensource-linux-x64-5.14.2.run  </code></p><p>打开安装包：<code>./qt-opensource-linux-x64-5.9.2.run  </code></p><h2 id="Hello-world">Hello,world</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLabel&gt;</span></span><br><span class="hljs-comment">/*头文件对QApplication类和QLabel进行了声明*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<span class="hljs-comment">/*创建了QApplication对象，管理整个应用程序*/</span><br>    QLabel *label = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-string">&quot;Hello,world!&quot;</span>); <span class="hljs-comment">/*窗口部件（widget）*/</span><br>    label-&gt;<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>成功啦，显示如下：</p><img src="image-20210726154217406.png" alt="image-20210726154217406" style="zoom:100%;" /><p>有意思的，可以在上述程序的基础上添加html标签：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLabel&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br>    QLabel *label = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-string">&quot;&lt;i&gt;Hello&lt;/i&gt;,&lt;b&gt;world!&lt;/b&gt;&quot;</span>);<br>    label-&gt;<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><img src="image-20210726154105106.png" alt="image-20210726154105106" style="zoom:100%;" /><h3 id="建立连接">建立连接</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPushButton&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br>    QPushButton *button = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-string">&quot;Quit&quot;</span>);<br>    QObject::<span class="hljs-built_in">connect</span>(button, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), &amp;app, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>()));<span class="hljs-comment">/*通过signal来表明一个用户动作的发生或状态的改变，信号与槽slot相连接，执行里面的函数*/</span><br>    button-&gt;<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="窗口部件的布局">窗口部件的布局</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLabel&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPushButton&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QHBoxLayout&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>    QWidget *window = <span class="hljs-keyword">new</span> QWidget;<br><br>    QLabel *label = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-string">&quot;Hello,world!&quot;</span>);<br><br>    QPushButton *button = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-string">&quot;Quit&quot;</span>);<br>    QObject::<span class="hljs-built_in">connect</span>(button, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), &amp;app, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>()));<br><br>    QHBoxLayout * layout = <span class="hljs-keyword">new</span> QHBoxLayout;    <br>    layout-&gt;<span class="hljs-built_in">addWidget</span>(label);    <span class="hljs-comment">//将label添加到layout</span><br>    layout-&gt;<span class="hljs-built_in">addWidget</span>(button);    <span class="hljs-comment">//将button添加到layout</span><br>    window-&gt;<span class="hljs-built_in">setLayout</span>(layout);    <span class="hljs-comment">//将layout添加到window</span><br>    window-&gt;<span class="hljs-built_in">show</span>();<br><br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><img src="image-20210726162046549.png" alt="image-20210726162046549" style="zoom:100%;" /><h3 id="将两个widget的值绑定在一起">将两个widget的值绑定在一起</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLabel&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPushButton&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QSpinBox&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QSlider&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QHBoxLayout&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>    QWidget *window = <span class="hljs-keyword">new</span> QWidget;<br>    QSlider *slider = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QSlider</span>(Qt::Horizontal);<br>    QSpinBox *spinBox = <span class="hljs-keyword">new</span> QSpinBox;<br>    spinBox-&gt;<span class="hljs-built_in">setRange</span>(<span class="hljs-number">0</span>,<span class="hljs-number">130</span>);<br>    slider-&gt;<span class="hljs-built_in">setRange</span>(<span class="hljs-number">0</span>,<span class="hljs-number">130</span>);<br>    QObject::<span class="hljs-built_in">connect</span>(spinBox, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">valueChanged</span>(<span class="hljs-type">int</span>)), slider, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">setValue</span>(<span class="hljs-type">int</span>)));<br>    QObject::<span class="hljs-built_in">connect</span>(slider, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">valueChanged</span>(<span class="hljs-type">int</span>)), spinBox, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">setValue</span>(<span class="hljs-type">int</span>)));<br>    spinBox-&gt;<span class="hljs-built_in">setValue</span>(<span class="hljs-number">35</span>);<br>    QHBoxLayout * layout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>    layout-&gt;<span class="hljs-built_in">addWidget</span>(spinBox);<br>    layout-&gt;<span class="hljs-built_in">addWidget</span>(slider);<br>    window-&gt;<span class="hljs-built_in">setLayout</span>(layout);<br>    window-&gt;<span class="hljs-built_in">show</span>();<br><br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><img src="image-20210726163311497.png" alt="image-20210726163311497" style="zoom:100%;" /><div class="note note-success">            <p>对connect的理解应该会更加深刻了。可以简单理解为两个组件之间的通信。前两个参数包含组件地址和SIGNAL；后两个参数包含另一个组件地址和SLOT</p>          </div><h2 id="创建对话框">创建对话框</h2><p><code>finddialog.h</code>文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> FINDDIALOG_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FINDDIALOG_H    <span class="hljs-comment">/*防止对这个文件的多重包含*/</span></span><br><span class="hljs-comment">/*QDialog 由QWidget派生出来*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDialog&gt;</span></span><br><span class="hljs-comment">/*声明一些用于对话框实现的Qt类*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QCheckBox</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QLabel</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QLineEdit</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QPushButton</span>;<br><span class="hljs-comment">/*定义FindDialog，并让它称为QDialog的子类*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FindDialog</span> : <span class="hljs-keyword">public</span> QDialog&#123;<br>    Q_OBJECT    <span class="hljs-comment">/*对所有的定义得SIGNAL和SLOT类，都需要Q_OBJECT宏*/</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">FindDialog</span>(QWidge*parent = <span class="hljs-number">0</span>);    <span class="hljs-comment">/*默认为空指针，没有父对象*/</span><br>signals:        <span class="hljs-comment">/*当用户单击Find时，发射两个SIGNAL，如果向前查询生效，则发射findPrevious信号，否则发射findNext信号*/</span><br>    <span class="hljs-comment">/*signals实际上是一个宏*/</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findNext</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;str, Qt::CaseSensitivity cs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPrevious</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;str, Qt::CaseSensitivity cs)</span></span>;<span class="hljs-comment">/*Qt::CaseSensitivity是一个枚举类型，具有Qt::CaseSensitive 和 Qt::CaseInsensitive两种取值*/</span><br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findClicked</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enableFindButton</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    QLabel *label;<br>    QLineEdit *lineEdit;<br>    QCheckBox *caseCheckBox;<br>    QCheckBox *backwardCheckBox;<br>    QPushButton *findButton;<br>    QPushButton *closeButton;<br>    <span class="hljs-comment">/*没有使用这些类的相关头文件，而是直接声明该类，可以使得编译过程更快*/</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// FINDDIALOG_H</span></span><br></code></pre></td></tr></table></figure><p>再来看看FindDialog的实现：</p><div class="note note-success">            <p>注意，由于版本的问题，<code>&lt;QtGui&gt;</code>改写为<code>&lt;QtWidgets&gt;</code></p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtWidgets&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;finddialog.h&quot;</span></span><br><span class="hljs-comment">/*构造函数*/</span><br>FindDialog::<span class="hljs-built_in">FindDialog</span>(QWidget *parent) : <span class="hljs-built_in">QDialog</span>(parent)&#123;<br>    label = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Find &amp;what:&quot;</span>));<span class="hljs-comment">/*tr()函数的作用时把它翻译成其他语言的标记，在字符串周围使用tr()是一个不错的习惯*/</span><br>    <span class="hljs-comment">/*&amp;用来表示快捷键。比如使用Alt+F可以用来激活Find*/</span><br>    lineEdit = <span class="hljs-keyword">new</span> QLineEdit;<br>    label-&gt;<span class="hljs-built_in">setBuddy</span>(lineEdit);<span class="hljs-comment">/*buddy伙伴，在标签按下快捷键时，可以接收到焦点（focus），就会移动到行编辑器上*/</span><br><br>    caseCheckBox = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QCheckBox</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Match &amp;case&quot;</span>));<br>    backwardCheckBox = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QCheckBox</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Search &amp;backward&quot;</span>));<br><br>    findButton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;&amp;Find&quot;</span>));<br>    findButton-&gt;<span class="hljs-built_in">setDefault</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">/*指用户按下Enter时，默认按下的按钮*/</span><br>    findButton-&gt;<span class="hljs-built_in">setEnabled</span>(<span class="hljs-literal">false</span>);<span class="hljs-comment">/*禁用，呈现灰色*/</span><br><br>    closeButton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Close&quot;</span>));<br>    <span class="hljs-built_in">connect</span>(lineEdit, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">textChanged</span>(<span class="hljs-type">const</span> QString &amp;)), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">enableFindButton</span>(<span class="hljs-type">const</span> QString &amp;)));<span class="hljs-comment">/*当有字符变化时，find按钮启用*/</span><br>    <span class="hljs-built_in">connect</span>(findButton, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()),<span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">findClicked</span>()));<br>    <span class="hljs-built_in">connect</span>(closeButton, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">closed</span>()));<br><span class="hljs-comment">/*QObject FindDialog 的父对象之一，所以可以省略 connect() 函数前面的 QObject: :前缀*/</span><br>    QHBoxLayout * topleftLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<span class="hljs-comment">/*打横*/</span><br>    topleftLayout-&gt;<span class="hljs-built_in">addWidget</span>(label);<br>    topleftLayout-&gt;<span class="hljs-built_in">addWidget</span>(lineEdit);<br><br>    QVBoxLayout * leftLayout = <span class="hljs-keyword">new</span> QVBoxLayout;<span class="hljs-comment">/*打竖*/</span><br>    leftLayout-&gt;<span class="hljs-built_in">addLayout</span>(topleftLayout);<br>    leftLayout-&gt;<span class="hljs-built_in">addWidget</span>(caseCheckBox);<br>    leftLayout-&gt;<span class="hljs-built_in">addWidget</span>(backwardCheckBox);<br><br>    QVBoxLayout * rightLayout = <span class="hljs-keyword">new</span> QVBoxLayout;<br>    rightLayout-&gt;<span class="hljs-built_in">addWidget</span>(findButton);<br>    rightLayout-&gt;<span class="hljs-built_in">addWidget</span>(closeButton);<br>    rightLayout-&gt;<span class="hljs-built_in">addStretch</span>();<span class="hljs-comment">/*分隔符/伸展器，确保按钮占用它们所在布局的上部空间*/</span><br><br>    QHBoxLayout * mainLayout = <span class="hljs-keyword">new</span> QHBoxLayout;<br>    mainLayout-&gt;<span class="hljs-built_in">addLayout</span>(leftLayout);<br>    mainLayout-&gt;<span class="hljs-built_in">addLayout</span>(rightLayout);<br>    <span class="hljs-built_in">setLayout</span>(mainLayout);<br><br>    <span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Find&quot;</span>));<br>    <span class="hljs-built_in">setFixedHeight</span>(<span class="hljs-built_in">sizeHint</span>().<span class="hljs-built_in">height</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindDialog::findClicked</span><span class="hljs-params">()</span></span>&#123;<br>    QString text = lineEdit-&gt;<span class="hljs-built_in">text</span>();<br>    Qt::CaseSensitivity cs = caseCheckBox-&gt;<span class="hljs-built_in">isChecked</span>() ? Qt::CaseSensitive : Qt::CaseInsensitive;<br>    <span class="hljs-comment">/*根据backward的选项来确定往前搜索还是往后搜索*/</span><br>    <span class="hljs-keyword">if</span>(backwardCheckBox-&gt;<span class="hljs-built_in">isChecked</span>())&#123;<br>        <span class="hljs-function">emit <span class="hljs-title">findPrevious</span><span class="hljs-params">(text, cs)</span></span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        emit <span class="hljs-built_in">findNext</span>(text, cs);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FindDialog::enableFindButton</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>&#123;<br>    findButton-&gt;<span class="hljs-built_in">setEnabled</span>(!text.<span class="hljs-built_in">isEmpty</span>());<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;finddialog.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br>    FindDialog *dialog = <span class="hljs-keyword">new</span> FindDialog;<br>    dialog-&gt;<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> app.<span class="hljs-built_in">exec</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="image-20210727094518994.png" alt="image-20210727094518994" style="zoom:100%;" /><p>父子关系：</p><img src="image-20210727095504820.png" alt="image-20210727095504820" style="zoom:100%;" /><p>最终实现：</p><p></br><center><img src="image-20210726175646948.png" alt="image-20210726175646948" style="zoom:100%;" /></center></p><h2 id="关于信号与槽">关于信号与槽</h2><ul><li>一个信号可以连接多个槽</li><li>多个信号可以连接同一个槽</li><li>一个信号可以与另外一个信号相连接</li><li>连接可以被移除</li><li>信号与槽的参数必须具有相同的顺序与类型。（信号的参数若多于槽，则多余参数会被忽略）</li></ul><h2 id="参考资料">参考资料</h2><ul><li>《C++ GUI Qt 4 编程（第二版）》《C++ GUI programming with Qt4》电子工业出版社</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《并行程序设计导论》</title>
    <link href="/wuhlan3/2021/07/10/%E3%80%8A%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AF%BC%E8%AE%BA%E3%80%8B/"/>
    <url>/wuhlan3/2021/07/10/%E3%80%8A%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AF%BC%E8%AE%BA%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1>并行程序设计导论</h1><h2 id="一、为什么需要并行计算">一、为什么需要并行计算</h2><h3 id="基本术语">基本术语</h3><p><strong>多核处理器</strong>：单个芯片上多个相对简单的处理器</p><p><strong>单核系统</strong>：只有一个CPU的处理器</p><p><strong>核</strong>：中央处理器、CPU</p><p><strong>通信</strong>：一个或多个核将自己的部分和结果发送给其他的核。</p><p><strong>负载平衡</strong>：简单来说，每个核分配大致相同数目的数据来计算。</p><p><strong>同步</strong>：比如使用<code>Synchronize_cores()</code>，每个核都会再在此处等待，直到所有的核都进入该函数——特别的，必须要等到master核进入该函数。</p><p><strong>共享内存系统</strong>：每个核能够共享访问计算机的内存，能够读、写内存的所有区域</p><p><strong>分布式内存系统</strong>：每个核都有自己的私有内存，核之间的通信是显式的，必须使用类似在网络中发送消息的机制。</p><p><strong>并发</strong>：指两个或多个事件在同一时间间隔内发生。</p><p><strong>并行</strong>：指两个或多个事件在同一时刻发生。（紧耦合）</p><p><strong>分布式</strong>：更多是指通过网络连接多台客户端与服务端进行数据处理。是把海量数据分布在不同的计算机或软件中分别处理的一种软件结构。（与并行类似，松耦合）</p><p>并行程序设计的两个基本方法：</p><ul><li><strong>任务并行</strong></li><li><strong>数据并行</strong></li></ul><p><em>举例子</em>：100个学生的试卷（总共5道题目），5个助教。批改方案有两种：</p><ul><li>每个助教负责给一个问题打分（任务并行）“执行不同的指令”</li><li>试卷分为5叠，每个助教负责一叠试卷（数据并行）“对相似的数据进行评分”</li></ul><h2 id="二、并行硬件和并行软件">二、并行硬件和并行软件</h2><p>冯·诺依曼结构：<strong>主存</strong>、<strong>中央处理器</strong>（算术逻辑单元ALU+控制单元）、主存和CPU之间的<strong>互连结构</strong>（总线）</p><p>主存和CPU之间的分离，称为<strong>冯·诺依曼瓶颈</strong>。因为互连结构限定了指令和数据访问的速率。（CPU执行指令的速度远远大于从主存中取指令的速度！！！）</p><p><strong>进程</strong>：运行着的程序的一个实例。包括以下实体：</p><ul><li>可执行的机器语言程序</li><li>一块内存空间，包括 代码、栈、堆、其他内存区域</li><li>资源描述符</li><li>安全信息</li><li>进程状态信息（进程控制块PCB）</li></ul><p>大多数现代操作系统都是<strong>多任务</strong>的。即操作系统提供对同时运行多个程序的支持。这对单核系统也是可行的，使用时间片轮转的技术即可。</p><p>线程：线程间的切换比进程间的切换更快，是“轻量级”的。线程包含在进程中，所以线程可以使用相同的可执行代码，共享相同的内存和相同的I/O设备。两个线程之间最大的差别是，他们各自需要一个<strong>私有的程序计数器</strong>和<strong>函数调用栈</strong>，使他们能够独立运行。</p><p>如果进程是执行的“主线程”，其他线程由主线程启动和停止。开始时，子线程从进程中**派生（fork）<strong>出来；一个进程结束后，它会</strong>合并（join）**到进程中。</p><p>对冯诺依曼模型的改进有三种措施：</p><ol><li>缓存（caching）</li><li>虚拟存储器</li><li>低层次并行</li></ol><h4 id="1-Cache基础知识">1.Cache基础知识</h4><p>高速缓冲存储器（cache）：访问时间比其它存储区域的访问时间短。本书谈到缓存，一般指CPU缓存（CPU Cache）</p><p>在访问完一个内存区域，程序在不久的将来（<strong>时间局部性</strong>），访问邻近的区域（<strong>空间局部性</strong>）</p><p>运用局部性原理，系统使用<strong>更宽</strong>的互连结构（总线）来访问数据和指令。也就是：一次内存访问能存取一整块代码和数据，而不是单条指令和单条数据。这些块称为高速缓冲块或高速缓存行。</p><p>Cache本身也分为三层：第一层（L1）最小但最快、更高层Cache（L2、L3）更大但相对较慢。当CPU访问指令或数据时，它会沿着Cache的层次结构向下查询：首先是L1，接着L2。。。最后是主存。</p><p><strong>命中</strong>与<strong>缺失</strong>是相对Cache层而言的。</p><p><strong>写直达</strong>：当CPU向Cache写数据时，高速缓存行会立即写入主存中</p><p><strong>写回</strong>：数据不是立即更新到主存中，而是将发生数据更新的高速缓存行标记成 <strong>脏（dirty）</strong></p><p>全相联映射：</p><p>直接映射：</p><p>n路组相联：</p><h4 id="2-性能">2.性能</h4><p><strong>线性加速比</strong>：$T_{并行} = \frac{1}{p}T_{串行}，假设并行为p核系统上进行的$</p><p><strong>加速比</strong>：$S=\frac{T_{串行}}{T_{并行}}$</p><p><strong>效率</strong>：$E=\frac{S}{p}=\frac{T_{串行}}{p*T_{并行}}$</p><p><strong>并行开销</strong>：$T_{并行} = \frac{1}{p}T_{串行} + T_{开销}$</p><p>阿姆达尔定律：大致上，除非一个串行程序的执行几乎全部都并行化，否则，不论有多少可以利用的核，通过并行化产生的加速比都会是受限的。</p><p><strong>可扩展性</strong>：如果增加程序的进程数/线程数，在输入规模也以相应增长率增加的情况下，该程序的效率一直是E。</p><p><strong>强可扩展</strong>：进程线程数增加，不增加问题规模，却可以维持固定的效率。（线程++，问题—，E—）</p><p><strong>弱可扩展</strong>：进程线程数增加，需要增加问题规模，才可以维持固定的效率。（线程++，问题++，E—）</p><h4 id="3-计时">3.计时</h4><p>我们需要记录的是什么时间呢？</p><ol><li>对程序从开始到结束的时间不感兴趣，而对程序的某个部分感兴趣</li><li>对所谓的“CPU时间”不感兴趣。<strong>CPU时间</strong>代表的是程序执行代码的总时间，但是它不包括程序空闲状态的时间！！！</li><li>我们通常使用的是<strong>墙上时钟时间</strong>，即某段代码从开始到结束总耗费的时间。</li></ol><p>不同的API使用的获取时间函数是不一样的</p><p>问题一：<strong>分辨率resolution</strong>：是指计时器的时间测量单位问题，即最短的非零时间跨度。</p><p>问题二：线程的<strong>同步</strong>问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> start, finish;<br>start = Get_current_time();<br><span class="hljs-comment">/*执行的代码*/</span><br>finish = Get_current_time();<br>elapsed = finish - start;<br></code></pre></td></tr></table></figure><p>这样的代码可能会输出多个时间，可以使用<code>barrier</code>函数来进行同步，并且取出运行时间的最大值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++">shared <span class="hljs-type">double</span> global_elapsed;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> my_start, my_finish, my_elapsed;<br><br><span class="hljs-built_in">Barrier</span>();    <span class="hljs-comment">//路障，用于使所有进程同时开始</span><br>my_start = <span class="hljs-built_in">Get_current_time</span>();<br><span class="hljs-comment">/*执行的代码*/</span><br>my_finish = <span class="hljs-built_in">Get_current_time</span>();<br>my_elapsed = my_finish - my_start;<br><br>global_elapsed = <span class="hljs-built_in">Global_max</span>(myelapsed);    <span class="hljs-comment">//取出所有进程运行时间的最大值</span><br><span class="hljs-keyword">if</span>(my_rank == <span class="hljs-number">0</span>)    <span class="hljs-comment">//主进程负责输出时间</span><br>    cout&lt;&lt;global_elapsed&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>问题三：<strong>易变性</strong>（variability）</p><p>多次执行同一个程序时，每次运行所花费的时间可能是不同的。看起来最好的方法是平均数或中位数，实则不然。</p><p>由于不可能存在某些外部事件使得程序的运行时间少于它可能的最短运行时间，所以我们的报告通常写上<strong>最短的运行时间</strong>。</p><h4 id="4-并行化过程">4.并行化过程</h4><p>Foster方法：</p><ol><li>划分（partitioning）：将要执行的指令核数据按照计算部分拆分成多个小任务</li><li>通信（communication）：确定上一步所识别出来的任务之间需要执行哪些通信</li><li>凝聚或聚合（agglomeration / aggregation）：将第一步所确定的任务与通信结合成更大的任务</li><li>分配（mapping）：将上一步聚合好的任务分配到进程/线程中</li></ol><h4 id="5-编译过程">5.编译过程</h4><ul><li><code>-g</code> 表示允许使用调试器</li><li><code>-Wall</code> 显示警告</li><li><code>-o&lt;outfile&gt;</code>编译出可执行文件的文件名outfile</li></ul><h2 id="三、用MPI进行分布式内存编程">三、用MPI进行分布式内存编程</h2><p><a href="https://wuhlan3.gitee.io/wuhlan3/2021/03/23/MPI%E5%88%86%E5%B8%83%E5%BC%8F%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/">点我点我</a></p><h2 id="四、用Pthreads进行共享内存编程">四、用Pthreads进行共享内存编程</h2><p><a href="https://wuhlan3.gitee.io/wuhlan3/2021/03/22/Pthreads%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/">点我点我</a></p><h2 id="五、用OpenMP进行共享内存编程">五、用OpenMP进行共享内存编程</h2><p><a href="">点我点我</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>超算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPI分布式内存编程</title>
    <link href="/wuhlan3/2021/07/10/MPI%E5%88%86%E5%B8%83%E5%BC%8F%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/"/>
    <url>/wuhlan3/2021/07/10/MPI%E5%88%86%E5%B8%83%E5%BC%8F%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="从Hello-world开始">从Hello,world开始</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mpi.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_STRING = <span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>   <span class="hljs-type">char</span> greeting[MAX_STRING]; <br>   <span class="hljs-type">int</span>  comm_sz;        <span class="hljs-comment">//进程的数量</span><br>   <span class="hljs-type">int</span>  my_rank;        <span class="hljs-comment">//进程的编号</span><br><br>   MPI_Init(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">//MPI_Init(int* argc_p, char*** argv_p); argc_p和argv_p是指向参数argc和argv的指针</span><br>   MPI_Comm_size(MPI_COMM_WORLD, &amp;comm_sz);        <span class="hljs-comment">//第一个参数是通信子，是MPI为通信子定义的特殊类型</span><br>   MPI_Comm_rank(MPI_COMM_WORLD, &amp;my_rank);<br><br>   <span class="hljs-keyword">if</span>(my_rank != <span class="hljs-number">0</span>)<br>   &#123;<br>        <span class="hljs-built_in">sprintf</span>(greeting, <span class="hljs-string">&quot;Greetings from process %d of %d!&quot;</span>, my_rank, comm_sz);<br>        MPI_Send(greeting, <span class="hljs-built_in">strlen</span>(greeting)+<span class="hljs-number">1</span>, MPI_CHAR, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, MPI_COMM_WORLD); <br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Greetings from process %d of %d!\n&quot;</span>, my_rank, comm_sz);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">1</span>; q&lt;comm_sz; q++)<br>        &#123;<br>             MPI_Recv(greeting, MAX_STRING, MPI_CHAR, q, <span class="hljs-number">0</span>,   MPI_COMM_WORLD, MPI_STATUS_IGNORE);<br>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, greeting);<br>        &#125;    <br>   &#125;<br><br>   MPI_Finalize();        <span class="hljs-comment">//MPI使用完毕时，可以进行释放</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编译与运行方法">编译与运行方法</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">编译：<br>$ mpicc -g -Wall -o 执行文件名 C文件名<br>$ mpicc -g -Wall -o main main.c<br>运行：<br>$ mpiexec -n 线程数 ./执行文件名<br>$ mpiexec -n <span class="hljs-number">4</span> ./main<br></code></pre></td></tr></table></figure><p>简单回顾一下上面出现的函数：<br><code>MPI_Init()</code>、<code>MPI_Finalize()</code>、<code>MPI_Comm_size()</code>、<code>MPI_Comm_rank()</code>、<code>MPI_Send()</code>、<code>MPI_Recv()</code></p><div class="note note-success">            <p><strong>通信子</strong>指的是一组可以互相发送消息的进程集合</p><p>注意：<code>MPI_COMM_WORLD</code>是<code>MPI_Comm</code>类型的变量，即MPI通信子（communicator），不需要额外定义。或者可以理解为一个通信域，你的进程都在这个域里面，里面包含了进程数和进程号等信息。</p><p>此外，通信子里面的<code>comm_sz</code>表示进程的数量，<code>my_rank</code>表示进程号，是以指针的形式传递</p>          </div><p><strong>通信</strong>相关的函数：</p><p><code>MPI_Send()</code>、<code>MPI_Recv()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Send</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* msg_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>   msg_size,</span><br><span class="hljs-params">    MPI_Datatypemsg_type,<span class="hljs-comment">//前三个参数定义了消息的内容</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span>dest,<span class="hljs-comment">//目的进程号</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span>tag,<span class="hljs-comment">//小标签，用于区分看上去完全一样的消息</span></span><br><span class="hljs-params">    MPI_Commcommunicator)</span>;  <span class="hljs-comment">//通信子</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Recv</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* msg_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>buf_size,</span><br><span class="hljs-params">    MPI_Datatypebuf_type,<span class="hljs-comment">//前三个参数定义了接收消息的内容</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span>source,<span class="hljs-comment">//消息来自哪个进程</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span> tag,</span><br><span class="hljs-params">    MPI_Commcommunicator,<span class="hljs-comment">//后三个参数用来识别消息</span></span><br><span class="hljs-params">    MPI_Status*status_p)</span>;<span class="hljs-comment">//大部分不使用该参数，只需赋予特殊常量MPI_STATUS_IGNORE</span><br></code></pre></td></tr></table></figure><img src="image-20210323225734248.png" alt="image-20210323225734248" style="zoom:50%;" /><p>特殊常量：<code>MPI_ANY_TAG</code>，可以将它传给<code>MPI_Recv</code>的参数tag。称为<strong>通配符</strong>（wildcard）。可以使一个进程接收多条来自另一个进程的有着不同标签的消息。</p><h3 id="关于发送和接收消息的过程">关于发送和接收消息的过程</h3><p>MPI_Send有两种可能：缓冲与阻塞</p><ul><li>缓冲：即消息会存放在一个发送缓冲区中，而MPI_Send函数立即返回</li><li>阻塞：即系统将发生阻塞，一直等待，直到开始发送消息</li></ul><p>出现哪一种情况一般取决于默认的消息<strong>截止大小</strong>（“cutoff” message size）。如果消息的大小小于截止大小，则它会被缓冲；如果消息的大小大于截止大小，函数将会被阻塞</p><p>MPI_Recv则只有一种可能——阻塞。只有当收到一条匹配消息的时候，才会返回。</p><h3 id="MPI消息的特性">MPI消息的特性</h3><p><strong>不可超越性</strong>（nonovertaking），即一个q进程发送两条消息给r进程，这两条消息一定是按顺序的。</p><p>而多个进程发送消息则会出现<strong>异步性</strong></p><h2 id="集合通信">集合通信</h2><p>集合通信相关函数：<code>MPI_Reduce()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Reduce</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* input_data_p,</span><br><span class="hljs-params">    <span class="hljs-type">void</span>*output_data_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>count,<span class="hljs-comment">//若count大于1，则MPI_Reduce函数可以应用到数组上，对向量进行运算</span></span><br><span class="hljs-params">    MPI_Datatypedatatype,</span><br><span class="hljs-params">    MPI_Opoperator,<span class="hljs-comment">//关键参数，类型是MPI_Op，有多个预定义值</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span>dest_process,</span><br><span class="hljs-params">    MPI_commcomm)</span>;<br></code></pre></td></tr></table></figure><p><img src="image-20210323225622760.png" alt="image-20210323225622760"></p><h3 id="关于集合通信">关于集合通信</h3><p>一般情况下，count设置为1，用于一个变量的集体运算，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">MPI_Reduce(&amp;local_int, &amp;total_int, <span class="hljs-number">1</span> ,MPI_DOUBLE, MPI_SUM, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure><p>如果设置count&gt;1，则是对一个向量的运算，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> local_x[N], sum[N];<br><br>MPI_Reduce(local_x, sum, N, MPI_DOUBLE, MPI_SUM, <span class="hljs-number">0</span>, MPI_COMM_WORLD);<br></code></pre></td></tr></table></figure><h3 id="集合通信的特点">集合通信的特点</h3><ol><li><p>通信子中的所有进程必须调用相同的集合通信函数</p></li><li><p>每个进程传递给MPI集合通信函数的参数必须是“相容的”。比如，dest_process的值应该是相同的</p></li><li><p>参数<code>output_data_p</code>虽然只作用在目的进程中，但是其他进程也需要写上这个参数，会被置为NULL</p></li><li><p>集合通信不使用标签，只通过通信子和调用的顺序进行匹配。具体可看书本p69。</p></li><li><p>禁止使input_data_p和output_data_p使用同一个缓冲区，这将会不可预测。</p></li></ol><h3 id="蝶形结构">蝶形结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_AllReduce</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* input_data_p,</span><br><span class="hljs-params">    <span class="hljs-type">void</span>*output_data_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>count,<span class="hljs-comment">//若count大于1，则MPI_Reduce函数可以应用到数组上，对向量进行运算</span></span><br><span class="hljs-params">    MPI_Datatypedatatype,</span><br><span class="hljs-params">    MPI_Opoperator,<span class="hljs-comment">//关键参数，类型是MPI_Op，有多个预定义值</span></span><br><span class="hljs-params">    MPI_commcomm)</span>;<br></code></pre></td></tr></table></figure><p>它的基本参数与reduce一致，唯一的不同是没有dest_process，这是因为它是将结果发布给所有的进程。是reduce的一个相反的过程</p><p><strong>蝶形结构</strong>：即进行全局运算之后，将结构发送给所有的进程</p><h3 id="广播函数">广播函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Bcast</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* data_p,<span class="hljs-comment">//广播进程发送的数据，接收进程接收的数据</span></span><br><span class="hljs-params">    <span class="hljs-type">int</span> count,<span class="hljs-comment">//数组的大小</span></span><br><span class="hljs-params">    MPI_Datatypedatatype,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> source_proc,</span><br><span class="hljs-params">    MPI_Commcomm)</span>;<br></code></pre></td></tr></table></figure><h3 id="数据分发">数据分发</h3><p>划分的方式：</p><ol><li>块划分</li><li>循环划分</li><li>块-循环划分</li></ol><p><strong>散射</strong>：用于0号进程读入整个向量，但只将分量发送给需要分量的其他进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Scatter</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* send_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>send_count,<span class="hljs-comment">//发送的向量大小，注意这里的大小是本地大小</span></span><br><span class="hljs-params">    MPI_Datatypesend_type,</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* recv_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>recv_count,<span class="hljs-comment">//接收的向量大小</span></span><br><span class="hljs-params">    MPI_Datatyperecv_type,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>src_proc,</span><br><span class="hljs-params">    MPI_Commcomm)</span>;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>MPI_Scatter只适用于<strong>块划分法</strong></p><p>需要注意的是，发送的向量大小不是send_buf_p的大小，而是和recv_count一样的，真正发送出去的大小</p>          </div><p><strong>聚集</strong>：将向量的所有分量都收集到0号进程上，然后0号进程再进行输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Gather</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* send_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>send_count,<span class="hljs-comment">//发送的向量大小，注意这里的大小是本地大小</span></span><br><span class="hljs-params">    MPI_Datatypesend_type,</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* recv_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>recv_count,<span class="hljs-comment">//接收的向量大小</span></span><br><span class="hljs-params">    MPI_Datatyperecv_type,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>dst_proc,</span><br><span class="hljs-params">    MPI_Commcomm)</span>;<br></code></pre></td></tr></table></figure><p>MPI_Gather同样只适用于<strong>块划分法</strong>，基本结构与MPI_Scatter类似</p><p><strong>全局聚集</strong>：将向量的所有分量都收集后，再分发到所有的进程上</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-type">int</span> <span class="hljs-built_in">MPI_AllGather</span>(<br>    <span class="hljs-type">void</span>* send_buf_p,<br>    <span class="hljs-type">int</span>send_count,<span class="hljs-comment">//发送的向量大小，注意这里的大小是本地大小</span><br>    <span class="hljs-built_in">MPI_Datatype</span>send_type,<br>    <span class="hljs-type">void</span>* recv_buf_p,<br>    <span class="hljs-type">int</span>recv_count,<span class="hljs-comment">//接收的向量大小</span><br>    <span class="hljs-built_in">MPI_Datatype</span>recv_type,<br>    <span class="hljs-built_in">MPI_Comm</span>comm);<br></code></pre></td></tr></table></figure><p>好图，总结一下：</p><table><tr>    <td><img src="image-20210710185133518.png" alt="image-20210710185133518" style="zoom:67%;" /></td><td><img src="image-20210710185200310.png" alt="image-20210710185200310" style="zoom: 67%;" /></td>    </tr>    <tr>    <td><img src="image-20210710185248694.png" alt="image-20210710185248694" style="zoom:67%;" /></td><td><img src="image-20210710185101011.png" alt="image-20210710185101011" style="zoom: 67%;" /></td>    </tr></table><h2 id="派生数据类型">派生数据类型</h2><p>由于发送消息耗费的时间巨大，我们要尽可能地减少消息的发送。具体有三种方法：</p><ol><li>通信函数中的count参数</li><li>派生数据类型</li><li>MPI_Pack/Unpack函数</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">MPI_Type_create_struct(<br>    <span class="hljs-type">int</span>count,<span class="hljs-comment">//元素的数量</span><br>    <span class="hljs-type">int</span>array_of_blocklengths[],<span class="hljs-comment">//每种元素的长度</span><br>    MPI_Aintarray_of_displacements[],<span class="hljs-comment">//每种元素的地址,距离消息起始位的地址</span><br>    MPI_Datatypearray_of_types[],<br>    MPI_Datatype*new_type_p<span class="hljs-comment">//输出的新的类型</span><br>);<br></code></pre></td></tr></table></figure><p>如何获取地址呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Get_address</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>*location_p,</span><br><span class="hljs-params">    MPI_Aint*address_p)</span>;<br></code></pre></td></tr></table></figure><h2 id="计时">计时</h2><p>MPI自带一个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> start,finish;<br><br>start = MPI.Wtime();<br><span class="hljs-comment">/*串行代码*/</span><br>finish = MPI_Wtime();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%e&quot;</span>,finish-start);<br></code></pre></td></tr></table></figure><p>也可以使用timer库函数，他们两个返回的都是墙上时钟时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-type">double</span> start,finish;<br><br>GET_TIME(start);<br><span class="hljs-comment">/*串行代码*/</span><br>GET_TIME(finish);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%e&quot;</span>,finish-start);<br></code></pre></td></tr></table></figure><p>当然，上述的两种写法，一般用于串行代码的计时。回想第二章所学，计时需要先同步，并记录每个进程最大值，最终获取并行部分代码运行的总时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> local_start, local_finish, local_elapsed, elapsed;<br><span class="hljs-comment">/*进程的一些初始化*/</span><br>MPI_Barrier(comm);<br>local_start = MPI_Wtime();<br><span class="hljs-comment">/*需要计时的代码*/</span><br>local_finish = MPI_Wtime();<br>local_elapsed = local_finish - local_start;<br>MPI_Reduce(&amp;local_elapsed, &amp;elapsed, <span class="hljs-number">1</span>, MPI_DOUBLE, MPI_MAX, <span class="hljs-number">0</span> , comm);    <span class="hljs-comment">//获取进程时间的最大值</span><br><span class="hljs-keyword">if</span>(my_rank == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Elapsed time = %e seconds\n&quot;</span>, elapsed);<br></code></pre></td></tr></table></figure><h2 id="交换奇偶排序">交换奇偶排序</h2><p>是冒泡排序的一种扩展。</p><p><strong>定理</strong>：设A是一个拥有n个键值的列表，作为就交换排序算法的输入，那么经过n个阶段后，A能够排好序。</p><p><strong>定理</strong>：如果p个进程运行并行奇偶交换排序算法，则p个阶段后，输入列表排序完毕。</p><p>重点，再看看书本P86~88</p><h3 id="安全性">安全性</h3><p>回忆之前的，MPI_Send有两种不同的方式来实现：缓冲和阻塞。假设所有的进程都进入阻塞状态，就会导致没有进程使用MPI_Recv，进入<strong>死锁</strong>状态。</p><p>幸好，MPI提供了一个函数，它会执行一次阻塞的消息发送函数和一次消息接收函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Sendrecv</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* send_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>   send_size,</span><br><span class="hljs-params">    MPI_Datatypesend_type,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>dest,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>send_tag,</span><br><span class="hljs-params">    </span><br><span class="hljs-params">    <span class="hljs-type">void</span>* recv_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>recv_size,</span><br><span class="hljs-params">    MPI_Datatyperecv_type,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>source,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> recv_tag,</span><br><span class="hljs-params">    MPI_Commcommunicator,</span><br><span class="hljs-params">    MPI_Status*status_p)</span>;<span class="hljs-comment">//大部分不使用该参数，只需赋予特殊常量MPI_STATUS_IGNORE</span><br></code></pre></td></tr></table></figure><p>如果接收缓冲区和发送缓冲区是一样的话，还有另一个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MPI_Sendrecv</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">void</span>* msg_buf_p,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>   msg_size,</span><br><span class="hljs-params">    MPI_Datatypemsg_type,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>dest,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>send_tag,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>source,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> recv_tag,</span><br><span class="hljs-params">    MPI_Commcommunicator,</span><br><span class="hljs-params">    MPI_Status*status_p)</span>;<span class="hljs-comment">//大部分不使用该参数，只需赋予特殊常量MPI_STATUS_IGNORE</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>超算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenMP共享内存编程</title>
    <link href="/wuhlan3/2021/07/09/OpenMP%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/"/>
    <url>/wuhlan3/2021/07/09/OpenMP%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="从hello，world开始">从hello，world开始</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;omp.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>    <span class="hljs-type">int</span> thread_count = strtol(argv[<span class="hljs-number">1</span>],<span class="hljs-literal">NULL</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//10表示十进制</span><br>    <br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel num_threads(thread_count);</span><br>    Hello();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <span class="hljs-type">int</span> my_rank = omp_get_thread_num();<span class="hljs-comment">//获取线程号</span><br>    <span class="hljs-type">int</span> thread_count = omp_get_num_threads();<span class="hljs-comment">//获取线程总数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from thread %d of %d\n&quot;</span>, my_rank, thread_count);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用parallel是用来表明之后的<strong>结构化代码块</strong>（<strong>基本块</strong>）应该被多个线程并行执行。</p><p>后面跟着的叫做<strong>子句</strong>，比如<code>num_threads</code>是用来指定执行后代码块的线程数的</p><p>执行并行块的线程集合称为<strong>线程组</strong>，原始的线程称为<strong>主线程</strong>，额外的线程称为<strong>从线程</strong></p><p>存在一个<strong>隐式路障</strong>，完成代码块的线程将等待线程组中所有的其他线程完成代码块。</p><h2 id="互斥">互斥</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical</span><br>    global_result += my_result;<br></code></pre></td></tr></table></figure><p>对后面的代码进行互斥访问</p><h2 id="归约">归约</h2><p><strong>共享作用域</strong>：一个能够被线程组中的所有线程访问的变量拥有共享作用域</p><p><strong>私有作用域</strong>：一个只能被单个线程访问的变量拥有私有作用域</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">global_result = <span class="hljs-number">0.0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel num_threads(thread_count)</span><br>&#123;<br>    <span class="hljs-type">double</span> my_result = <span class="hljs-number">0.0</span>;<br>    my_result += Local_trap(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b, <span class="hljs-type">int</span> n);<br>    <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp crtical</span><br>    global_result += my_result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码可以使用<strong>归约子句</strong>来简化成如下形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">global_result = <span class="hljs-number">0.0</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp parallel num_threads(thread_count) \ </span><br>    reduction(+: global_result)<br>global_result += Local_trap(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b, <span class="hljs-type">int</span> n);    <br></code></pre></td></tr></table></figure><p>代码明确了global_result是一个<strong>归约变量</strong>，加号表示<strong>归约操作符</strong>是加法。</p><div class="note note-success">            <p>注意一下：根据不同的归约操作符，私有变量会初始化为不同的值。</p><p>加法：一般初始化为0；乘法：一般初始化为1</p>          </div><h2 id="for指令">for指令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">h = (b-a)/n;<br>approx = (f(a)+f(b))/<span class="hljs-number">2.0</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp parallel for num_threads(thread_count)\</span><br><span class="hljs-meta">    reduction(+: approx)</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= n<span class="hljs-number">-1</span>; i++)<br>    approx+= f(a+i*h);<br>approx = h*approx;<br></code></pre></td></tr></table></figure><p>reduction子句的使用在这里是必要的</p><p>此外，parallel指令中，所有变量的<strong>缺省作用域</strong>是<strong>共享</strong>的。但是for指令中的循环变量的<strong>缺省作用域</strong>是<strong>私有</strong>的</p><p>来一张图！！！《可并行化的for语句的合法表达式》</p><h3 id="数据依赖性">数据依赖性</h3><p>一般情况下，上述不能并行的for语句，编译器是会直接报错的。但是有更加隐匿的问题——数据依赖性。</p><ul><li>OpenMP编译器不会检查parallel for指令并行化的循环所包含的依赖关系，需要程序员自己来识别</li><li>一个或更多个迭代结果依赖于其他迭代的循环，一般不能被正确并行化</li></ul><p>以斐波那契数列为例：</p><ul><li>fib[6]和fib[5]计算间的依赖关系称为 <strong>数据依赖</strong></li><li>由于fibo[5]的值在一个迭代中计算，其结果在之后的迭代中使用，所以也称为 <strong>循环依赖</strong></li></ul><div class="note note-success">            <p>考点：判断有无数据依赖性！！！</p>          </div><h2 id="关于作用域">关于作用域</h2><p>与其让OpenMP决定每个变量的作用域，还不如让程序员明确块中每个变量的作用域。</p><h3 id="default子句">default子句</h3><p>使用了default（none）子句之后，编译器要求我们明确在块中和在块外声明的所有变量的作用域！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp parallel for num_threads(thread_count)\</span><br><span class="hljs-meta">    default(none) reduction(+:sum) private(k,factor)\</span><br><span class="hljs-meta">    shared(n)</span><br><span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; n; k ++)&#123;<br>    <span class="hljs-keyword">if</span>(k % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        factor = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">else</span> <br>        factor = <span class="hljs-number">-1.0</span>;<br>    sum += factor/(<span class="hljs-number">2</span>*k+<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="奇偶排序">奇偶排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp parallel num_threads(thread_count)\</span><br><span class="hljs-meta">    default(none) shared(a,n) private(i, tmp, phase)</span><br><span class="hljs-keyword">for</span>(phase = <span class="hljs-number">0</span>; phase &lt; n ; phase++)&#123;<br>    <span class="hljs-keyword">if</span>(phase % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp for</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; n; i += <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a[i<span class="hljs-number">-1</span>]&gt;a[i])&#123;<br>                tmp = a[i<span class="hljs-number">-1</span>];<br>                a[i<span class="hljs-number">-1</span>] = a[i];<br>                a[i] = tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp for</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; n<span class="hljs-number">-1</span>; i += <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&gt;a[i+<span class="hljs-number">1</span>])&#123;<br>                tmp = a[i];<br>                a[i] = a[i+<span class="hljs-number">1</span>];<br>                a[i+<span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的特点就是，只创建了一次线程，在这之后使用已有的线程组来并行化for循环，节省了开销。</p><h2 id="调度">调度</h2><p>调度子句为如下形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">schedule(&lt;type&gt; [,&lt;chunksize&gt;])<br></code></pre></td></tr></table></figure><p>type有以下几种类型：</p><ul><li>static：迭代能够在循环执行前分配给线程</li><li>dynamic：当线程完成它当前的迭代集合时，它能从运行时系统中请求更多（开销大于static）</li><li>guided：编译器和运行时系统决定调度方式（开销最大）</li><li>runtime：调度在运行时决定</li></ul><p>其中runtime允许在运行时确定调度类型，因此实际调度策略只有前面三种。</p><p>一般OpenMP实现的缺省调度为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">schedule (<span class="hljs-type">static</span>, total_iterations/thread_count)<br></code></pre></td></tr></table></figure><img src="image-20210711103038725.png" alt="image-20210711103038725" style="zoom: 80%;" /><h2 id="路障">路障</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp barrier</span><br></code></pre></td></tr></table></figure><h2 id="原子操作">原子操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp atomic</span><br>x &lt;op&gt;= &lt;expression&gt;<br></code></pre></td></tr></table></figure><h2 id="锁">锁</h2><ul><li>简单锁：简单锁在被释放前，只能获得一次</li><li>嵌套锁：嵌套锁在被释放前，可以被同一个线程获得多次</li></ul><p>简单锁的函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">omp_init_lock</span><span class="hljs-params">(<span class="hljs-type">omp_lock_t</span>* lock_P)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">omp_set_lock</span><span class="hljs-params">(<span class="hljs-type">omp_lock_t</span>* lock_p)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">omp_unset_lock</span><span class="hljs-params">(<span class="hljs-type">omp_lock_t</span>* lock_p)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">omp_destroy_lock</span><span class="hljs-params">(<span class="hljs-type">omp_lock_t</span>* lock_p)</span>;<br></code></pre></td></tr></table></figure><h3 id="critical、atomic、lock的区别：">critical、atomic、lock的区别：</h3><ol><li>critical易使用，一般情况下都可以考虑</li><li>atomic可能会把两个变量不一样的语句也强制进行互斥，比如说<code>x++</code>和<code>y++</code>，需要注意</li><li>锁机制适用于需要互斥的是某个数据结构而不是代码块的情况。</li></ol><p>互斥需要非常谨慎：</p><ul><li><p>对同一个临界区，不能混合使用不同的互斥技术</p></li><li><p>互斥不能保证公平性，可能会有一个线程一直被阻塞</p></li><li><p>嵌套互斥可能会产生意想不到的结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//该程序会进入死锁状态</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical</span><br>    y = f(x)l<br>    ...<br>    <br><span class="hljs-type">double</span> f(<span class="hljs-type">double</span> x)&#123;<br>    <span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp critical</span><br>    z = g(x);<br>&#125;    <br></code></pre></td></tr></table></figure><p>解决方法，是命名临界区：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//命名临界区</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> omp critical(one)</span><br>    y = f(x)l<br>    ...<br>    <br><span class="hljs-type">double</span> f(<span class="hljs-type">double</span> x)&#123;<br>    <span class="hljs-meta"># <span class="hljs-keyword">pragma</span> omp critical(two)</span><br>    z = g(x);<br>&#125;    <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>超算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pthreads共享内存编程</title>
    <link href="/wuhlan3/2021/06/20/Pthreads%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/"/>
    <url>/wuhlan3/2021/06/20/Pthreads%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="共享内存编程">共享内存编程</h2><p><img src="image-20210620225347320.png" alt="image-20210620225347320"></p><p><strong>临界区</strong>：对共享内存区域进行更新的代码段</p><p><strong>线程</strong>：在共享内存编程中，运行在每一个处理器上的一个程序的实例</p><p><strong>进程</strong>：正在运行（或挂起）的程序的一个实例，除了可执行代码外，它还包括：</p><ul><li>栈段</li><li>堆段</li><li>系统为进程分配的资源描述符</li><li>安全信息</li><li>描述进程状态的信息</li></ul><p>一般来说，一个进程的内存块是私有的，其他进程无法直接访问，除非操作系统进行干涉。但是有的时候，我们又希望进程之间可以互相访问各自的内存区域，所以我们呢引入<strong>轻量级进程</strong>的概念——线程。</p><p>下面我们使用POSIX线程库，也称为Pthread线程库。它定义了一套多线程编程的应用程序编程接口。它是一个C语言库，也可以应用在C++程序中。</p><h2 id="从Hello，world开始">从Hello，world开始</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> thread_count;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-type">void</span>* rank)</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> <br>&#123; <br>    <span class="hljs-type">long</span> thread;<br>    <span class="hljs-type">pthread_t</span>* thread_handles; <br>    <br>    thread_count = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br>    thread_handles =(<span class="hljs-type">pthread_t</span>*) <span class="hljs-built_in">malloc</span>(thread_count * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">pthread_t</span>));<br><br>    <span class="hljs-keyword">for</span>(thread = <span class="hljs-number">0</span>; thread &lt; thread_count; thread++)<br>        pthread_create(&amp;thread_handles[thread], <span class="hljs-literal">NULL</span>, Hello, (<span class="hljs-type">void</span>*)thread);    <span class="hljs-comment">//Hello 为函数名</span><br>        <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from the main thread\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(thread = <span class="hljs-number">0</span>; thread &lt; thread_count; thread++)<br>        pthread_join(thread_handles[thread], <span class="hljs-literal">NULL</span>);<br>    <br>    <span class="hljs-built_in">free</span>(thread_handles);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">Hello</span><span class="hljs-params">(<span class="hljs-type">void</span>* rank)</span> <br>&#123; <br>    <span class="hljs-type">long</span> my_rank = (<span class="hljs-type">long</span>)rank;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from thread %ld of %d\n&quot;</span>,my_rank,thread_count); <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="编译与运行方法：">编译与运行方法：</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ gcc -g -Wall -o pth_hello pth_hello.c -lpthread<br>$ ./pth_hello <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>线程的生成，主要涉及下述几个语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">pthread_t</span>* thread_handles; <br>thread_count = <span class="hljs-built_in">strtol</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);    <span class="hljs-comment">//线程数</span><br>thread_handles =(<span class="hljs-type">pthread_t</span>*) <span class="hljs-built_in">malloc</span>(thread_count * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">pthread_t</span>));    <span class="hljs-comment">//分配线程空间</span><br><span class="hljs-comment">//创造线程并且开始执行</span><br><span class="hljs-keyword">for</span>(rank = <span class="hljs-number">0</span>; rank &lt; thread_count; rank++)<br>    <span class="hljs-built_in">pthread_create</span>(&amp;thread_handles[rank], <span class="hljs-literal">NULL</span>, Hello, (<span class="hljs-type">void</span>*)rank);  <span class="hljs-comment">//线程的派生</span><br><br><span class="hljs-keyword">for</span>(rank = <span class="hljs-number">0</span>; rank &lt; thread_count; rank++)<br>    <span class="hljs-built_in">pthread_join</span>(thread_handles[rank], <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">//线程的合并，等待线程完成并结束</span><br><br><span class="hljs-built_in">free</span>(thread_handles);<span class="hljs-comment">//释放线程空间</span><br></code></pre></td></tr></table></figure><h2 id="互斥">互斥</h2><p>由于是共享内存，当多个线程尝试更新一个共享资源时，结果是无法预测的。</p><p><strong>竞争条件：</strong></p><p>当多个线程都要访问共享变量或共享文件这样的共享资源时，如果至少其中一个访问的是更新操作，那么这些访问就可能导致某种错误。</p><p><strong>临界区：</strong></p><p>是一个更新共享资源的代码段，一次只允许一个线程执行该代码段。</p><h3 id="忙等待-busy-waiting">忙等待(busy waiting)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(...)&#123;<br>    <span class="hljs-keyword">while</span>(flag != my_rank);<br>    ...<br>    flag = (flag+<span class="hljs-number">1</span>)%thread_count;<br>&#125;<br></code></pre></td></tr></table></figure><p>循环等待，只有当flag为线程号的时候，该线程才能够执行</p><h3 id="互斥量-Mutex">互斥量(Mutex)</h3><p>初始化一个互斥量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">pthread_mutex_t</span>* mutex_p,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">pthread_mutexattr_t</span>*attr_p</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>删除互斥量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span>* mutex_p)</span>;<br></code></pre></td></tr></table></figure><p>p操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_lock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span>* mutex_p)</span>;<br></code></pre></td></tr></table></figure><p>v操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_mutex_unlock</span><span class="hljs-params">(<span class="hljs-type">pthread_mutex_t</span>* mutex_p)</span>;<br></code></pre></td></tr></table></figure><h2 id="同步">同步</h2><h3 id="信号量">信号量</h3><p>初始化一个信号量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sem_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">sem_t</span>*semaphore,</span><br><span class="hljs-params">    <span class="hljs-type">int</span>            shared,</span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span>    initial_val</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>删除信号量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sem_destroy</span><span class="hljs-params">(<span class="hljs-type">sem_t</span>*    semaphore_p)</span>;<br></code></pre></td></tr></table></figure><p>v操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sem_post</span><span class="hljs-params">(<span class="hljs-type">sem_t</span>*    semaphore_p)</span>;<br></code></pre></td></tr></table></figure><p>p操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sem_wait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span>*    semaphore_p)</span>;<br></code></pre></td></tr></table></figure><p>需要加头文件：<code>#include &lt;semaphore.h&gt;</code></p><h3 id="路障（barrier）">路障（barrier）</h3><p><strong>条件变量：</strong></p><p>是一个数据对象，允许线程在某个特定条件或事件发生前都处于挂起状态。当事件或条件发生时，另一个线程可以通过信号来唤醒挂起的线程。一个<strong>条件变量</strong>总是与一个<strong>互斥量</strong>相关联。、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_signal</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span>* cond_var_p)</span>;    <span class="hljs-comment">//唤醒一个阻塞进程</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_broadcast</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span>* cond_var_p)</span>;    <span class="hljs-comment">//唤醒所有阻塞进程</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_wait</span><span class="hljs-params">(<span class="hljs-type">pthread_cond_t</span>* cond_var_p, <span class="hljs-type">pthread_mutex_t</span>* mutex_p)</span>;<br><span class="hljs-comment">//通过互斥量mutex_p来阻塞线程，直到其他线程调用pthread_cond_signal或pthread_cond_broadcast</span><br></code></pre></td></tr></table></figure><p>条件变量的初始化与销毁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">pthread_cond_t</span> cond_p,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">pthread_condattr_t</span>*cond_attr_p<span class="hljs-comment">//通常传递NULL</span></span><br><span class="hljs-params">)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_cond_destroy</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">pthread_cond_t</span>*cond_p</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>路障的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">pthread_mutex_lock($mutex);            <span class="hljs-comment">//锁住</span><br>counter++;<br><span class="hljs-keyword">if</span>(counter == thread_count)&#123;        <span class="hljs-comment">//当所有线程抵达路障时</span><br>    counter = <span class="hljs-number">0</span>;<br>    pthread_cond_broadcast(&amp;cond_var);<span class="hljs-comment">//唤醒所有阻塞线程</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">while</span>(pthread_cond_wait(&amp;cond_var, &amp;mutex)!= <span class="hljs-number">0</span>);<br>&#125;<br>pthread_mutex_unlock(&amp;mutex);        <span class="hljs-comment">//解锁</span><br></code></pre></td></tr></table></figure><p><strong>直接使用barrier</strong></p><p>在进行nbody的时候我使用过下面的函数，这个是书本上没有提到的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pthread_barrier_t</span> barrier;<span class="hljs-comment">//全局变量的定义</span><br>pthread_barrier_init(&amp;barrier,<span class="hljs-literal">NULL</span>,thread_count);    <span class="hljs-comment">//初始化</span><br>pthread_barrier_wait(&amp;barrier);    <span class="hljs-comment">//只有当所有线程都到达该语句，才能继续执行</span><br>pthread_barrier_destroy(&amp;barrier);                    <span class="hljs-comment">//删除</span><br></code></pre></td></tr></table></figure><h2 id="读写锁">读写锁</h2><p>对链表，同时读、同时写，可能会出现<strong>段错误</strong></p><p>两种不太好的解决方案：</p><ul><li>对整个函数进行互斥量保护</li><li><strong>“细粒度”锁</strong>：对每一个结点添加一个互斥量</li></ul><p>读写锁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-type">pthread_rwlock_t</span>*rwlock_p,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> <span class="hljs-type">pthread_rwlockattr_t</span>attr_p<span class="hljs-comment">//不使用时，传递NULL</span></span><br><span class="hljs-params">)</span>;<br><span class="hljs-comment">//读</span><br>pthread_rwlock_rdlock(&amp;rwlock);<br>Member(value);<br>pthread_rwlock_unlock(&amp;rwlock);<br><span class="hljs-comment">//写：插入</span><br>pthread_rwlock_wrlock(&amp;rwlock);<br>Insert(value);<br>pthread_rwlock_unlock(&amp;rwlock);<br><span class="hljs-comment">//写：删除</span><br>pthread_rwlock_wrlock(&amp;rwlock);<br>Delete(value);<br>pthread_rwlock_unlock(&amp;rwlock);<br><span class="hljs-comment">//销毁</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pthread_rwlock_destroy</span><span class="hljs-params">(<span class="hljs-type">pthread_rwlock_t</span>* rwlock_p)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>超算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验6：二态进程模型内核</title>
    <link href="/wuhlan3/2021/06/01/%E5%AE%9E%E9%AA%8C6%EF%BC%9A%E4%BA%8C%E6%80%81%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%86%85%E6%A0%B8/"/>
    <url>/wuhlan3/2021/06/01/%E5%AE%9E%E9%AA%8C6%EF%BC%9A%E4%BA%8C%E6%80%81%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h1>实验6：二态进程模型内核</h1><h3 id="实验目的">实验目的</h3><p>1、学习多道程序与CPU分时技术</p><p>2、掌握操作系统内核的二态进程模型设计与实现方法</p><p>3、掌握进程表示方法</p><p>4、掌握时间片轮转调度的实现</p><h3 id="实验要求">实验要求</h3><p>1、了解操作系统内核的二态进程模型</p><p>2、扩展实验五的的内核程序，增加一条命令可同时创建多个进程分时运行，增加进程控制块和进程表数据结构。</p><p>3、修改时钟中断处理程序，调用时间片轮转调度算法。</p><p>4、设计实现时间片轮转调度算法，每次时钟中断，就切换进程，实现进程轮流运行。</p><p>5、修改save()和restart()两个汇编过程，利用进程控制块保存当前被中断进程的现场，并从进程控制块恢复下一个进程的现场。</p><p>6、编写实验报告，描述实验工作的过程和必要的细节，如截屏或录屏，以证实实验工作的真实性</p><p><img src="v2-c7b1619e9ee778610063a2129f3176f1_r.jpg" alt="fly"></p><h3 id="实验内容">实验内容</h3><ol><li><p>修改实验5的内核代码，内核执行期间，关中断，实现内核不可再入。</p></li><li><p>修改实验5的内核代码，定义进程控制块，包括进程号、程序名、进程内存地址信息、CPU寄存器保存区、进程状态等必要数据项。</p></li><li><p>扩展实验五的的内核程序，增加一条命令可同时执行多个用户程序，内核加载这些程序，创建多个进程，实现分时运行</p></li><li><p>修改时钟中断处理程序，保留无敌风火轮显示，而且增加调用进程调度过程</p></li><li><p>内核增加进程调度过程:每次调度，将当前进程转入就绪状态，选择下一个进程运行，如此反复轮流运行。</p></li><li><p>修改save()和restart()两个汇编过程，利用进程控制块保存当前被中断进程的现场，并从进程控制块恢复下一个进程的运行。</p></li><li><p>实验5的内核其他功能，如果不必要，可暂时取消服务。</p></li></ol><p><img src="image-20210516201332886.png" alt="image-20210516201332886"></p><h3 id="实验环境">实验环境</h3><h5 id="1-系统与虚拟机">1.系统与虚拟机</h5><ul><li>Windows 10 - x64 18363.1139</li><li>VMware Workstation 16 Player：用于跑ubuntu虚拟机</li><li>Ubuntu 20.04.2 LTS</li><li>VirtualBox-6.1.18-142142-Win：用于运行.img文件</li><li>DOSBox DOS Emulator 0,74,0,0：用于tcc和tasm编译，并且运行.com文件</li></ul><h5 id="2-windows上的相关软件、编译器等">2.windows上的相关软件、编译器等</h5><ul><li>NASM version 2.10.07 compiled on Jan  2 2013</li><li>TCC.EXE：用于16位C语言编程</li><li>TLINK.EXE：用于C语言与汇编语言链接</li><li>TASM.EXE：用于.asm文件的汇编</li></ul><h5 id="3-Ubuntu上的相关软件、编译器等">3.Ubuntu上的相关软件、编译器等</h5><ul><li>NASM version 2.14.02</li><li>makefile：GNU Make 4.2.1</li></ul><h3 id="实验基本架构">实验基本架构</h3><p><img src="WuhlanOS6.png" alt="Wuhlan OS6"></p><h3 id="实验过程">实验过程</h3><h4 id="1-载入内存函数的修改">1.载入内存函数的修改</h4><p>对载入内存函数<code>loadProgram</code>进行修改，添加多几个参数。因为多进程同时运行的时候，是需要几个用户程序载入内存的不同位置，段地址和偏移量不再像之前那样定死了。同时由于过去常常出现磁头号和载入扇区数等错误，所以把这两个参数也引入，使得更加灵活，减少错误的发生。</p><p>参数从右往左依次入栈，使用bp来进行寻址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _loadProgram    ;extern int loadBlock(int es, int bx, char sector, int num, int head);从右往左依次入栈<br>_loadProgram proc near<br><br>    push bp;head/num/sector/bx/es/ip/bp<br>    mov bp,sp<br>    <br>    push ax<br>    push bx<br>    push cx<br>    push dx<br>    push es<br><br>    mov ax,[bp+4];段地址 es<br>    mov es,ax<br>    mov bx,[bp+6];偏移量 bx<br>    mov ah,2<br>    mov al,[bp+10];扇区数num<br>    mov ch,0<br>    mov cl,[bp+8];扇区sector<br>    mov dl,0<br>    mov dh,[bp+12];磁头号 head<br>    int 13h<br><br>    pop es<br>    pop dx<br>    pop cx<br>    pop bx<br>    pop ax<br>    pop bp<br>    <br>    ret<br>_loadProgram endp<br></code></pre></td></tr></table></figure><h4 id="2-save和restart的修改">2.save和restart的修改</h4><p>只需要在上一个实验的基础上进行小修改，<code>_cpuReg——&gt;_curPCB</code>，即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs asm">;保护现场，此时栈顶/flags/cs/int ip/save ip*************<br>_save proc near<br>    push ds;/flags/cs/ip/ip/ds<br>    push cs<br>    pop ds;ds=cs<br>    <br>    push si;/flags/cs/ip/ip/ds/si<br>    <br>    mov si,word ptr DGROUP:_curPCB;此时si是PCB结构体的地址<br>    pop word ptr [si+16];si存入结构体,/flags/cs/ip/ip/ds<br>    pop word ptr [si+14];ds存入结构体,/flags/cs/ip/ip<br>    <br>    lea si,ret_temp;这个ip指的是save的返回地址<br>    pop word ptr [si];ip存入ret_temp中,/flags/cs/ip<br>    <br>    mov si,word ptr DGROUP:_curPCB<br>    pop word ptr [si+22];ip存入结构体，/flags/cs<br>    pop word ptr [si+24];cs存入结构体，/flags<br>    pop word ptr [si+26];flags存入结构体，/，栈为空<br>        <br>    mov [si+18],ss;ss存入结构体<br>    mov [si+20],sp;sp存入结构体<br>    <br>    mov si,ds<br>    mov ss,si;将栈修改为内核栈<br>    <br>    mov sp,word ptr DGROUP:_curPCB<br>    add sp,14;此时指向PCB结构体的<br>    <br>    push es<br>    push bp<br>    push di<br>    push dx<br>    push cx<br>    push bx<br>    push ax;PCB结构体保存es/bp/di/dx/cx/bx/ax<br>    <br>    mov si,word ptr DGROUP:_kernelPCB<br>    mov sp,[si+20];sp变为内核态<br>    mov ax,cs<br>    mov es,ax;cs变为内核态<br>    <br>    lea si,ret_temp<br>    mov ax,[si]<br>    jmp ax;返回call _save的位置<br>_save endp<br>;********************************************************<br></code></pre></td></tr></table></figure><p>只需要在上一个实验的基础上进行小修改，<code>_cpuReg——&gt;_curPCB</code>，即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs asm">;恢复现场********************************************<br>_restart proc near<br>    mov si,word ptr DGROUP:_kernelPCB<br>    mov [si+20],sp<br>    ;lea sp,_curPCB<br>    mov sp,word ptr DGROUP:_curPCB;将栈指针指向PCB结构体，对前7个寄存器进行出栈<br>    pop ax<br>    pop bx<br>    pop cx<br>    pop dx<br>    pop di<br>    pop bp<br>    pop es<br>                                        ;结构体中/flags/cs/ip/sp/ss/si/ds<br>    lea si,ds_temp;使用一个临时变量存储ds,/flags/cs/ip/sp/ss/si<br>    pop word ptr [si];结构体中/flags/cs/ip/sp/ss/si<br>    lea si,si_temp;使用一个临时变量存储si<br>    pop word ptr [si];结构体中/flags/cs/ip/sp/ss<br>    <br>    lea si,bx_temp<br>    mov [si],bx;保护一下bx<br><br>    pop bx;结构体中/flags/cs/ip/sp<br>    mov ss,bx;bx为原来的栈地址<br>    mov bx,sp<br>    mov sp,[bx];bx此时是结构体中sp的地址，恢复栈的sp<br>    <br>    add bx,2;使bx指向ip<br>    <br>    push word ptr [bx+4];原来的栈中：/flags<br>    push word ptr [bx+2];原来的栈中：/flags/cs<br>    push word ptr [bx];原来的栈中：/flags/cs/ip<br>    <br>    push ax;原来的栈中：/flags/cs/ip/ax<br>    push word ptr [si];原来的栈中：/flags/cs/ip/ax/bx<br>    lea si,ds_temp<br>    mov ax,[si]<br>    lea si,si_temp<br>    mov bx,[si]<br>    mov ds,ax;恢复ds<br>    mov si,bx;恢复si<br>    <br>    pop bx;原来的栈中：/flags/cs/ip/ax<br>    pop ax;原来的栈中：/flags/cs/ip<br>    <br>    iret<br>    <br>_restart endp<br></code></pre></td></tr></table></figure><h4 id="3-进程控制块">3.进程控制块</h4><p>在实验五的基础上，将寄存器结构体修改为进程控制块，额外添加几个变量作为控制信息。其中0代表新建态；1代表运行态；2代表阻塞态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-comment">/*寄存器*/</span><br>    <span class="hljs-type">int</span> ax;<br>    <span class="hljs-type">int</span> bx;<br>    <span class="hljs-type">int</span> cx;<br>    <span class="hljs-type">int</span> dx;<br>    <span class="hljs-type">int</span> di;<br>    <span class="hljs-type">int</span> bp;<br>    <span class="hljs-type">int</span> es;<br>    <br>    <span class="hljs-type">int</span> ds;<br>    <span class="hljs-type">int</span> si;<br>    <span class="hljs-type">int</span> ss;<br>    <span class="hljs-type">int</span> sp;<br>    <span class="hljs-type">int</span> ip;<br>    <span class="hljs-type">int</span> cs;<br>    <span class="hljs-type">int</span> flags;<br>    <span class="hljs-comment">/*其他信息*/</span><br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<span class="hljs-comment">/*貌似没有起到作用，不过老师写了就跟着写*/</span><br>    <span class="hljs-type">int</span> status;<span class="hljs-comment">/*新建态/结束态：0，运行：1，阻塞：2*/</span><br>&#125;PCB;<br></code></pre></td></tr></table></figure><p>同时声明PCB序列，并记录当前的PCB和内核的PCB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">PCB PCBList[processNum];                   <span class="hljs-comment">/*PCB序列，存储所有进程的信息*/</span><br>PCB *curPCB = &amp;PCBList[processNum - <span class="hljs-number">1</span>];       <span class="hljs-comment">/*当前的PCB，一开始默认为内核PCB*/</span><br>PCB *kernelPCB = &amp;PCBList[processNum - <span class="hljs-number">1</span>]; <span class="hljs-comment">/*把最后一个PCB作为内核的PCB*/</span><br></code></pre></td></tr></table></figure><h4 id="4-进程初始化">4.进程初始化</h4><p>将所有进程的状态置为空闲，并把内核的状态设置为运行态。在操作系统刚开始运行的时候，就需要进行初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">initProcess</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; processNum; i++)&#123;<br>        PCBList[i].status = <span class="hljs-number">0</span>;<br>    &#125;<br>    kernelPCB-&gt;pid = processNum - <span class="hljs-number">1</span>;<br>    kernelPCB-&gt;status = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">strcpy</span>(kernelPCB-&gt;name, <span class="hljs-string">&quot;kernel&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-进程创建">5.进程创建</h4><p>为什么flags需要初始化为512呢？是因为只需要把中断响应置为1即可，后文会详细讲述。</p><p>该函数的主要步骤为：</p><ul><li>寻找一个状态为新建态的进程</li><li>对所有的寄存器进行初始化</li><li>设置进程ID和进程名</li><li>将程序载入内存</li><li>修改进程状态为阻塞态</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">createProcess</span><span class="hljs-params">(<span class="hljs-type">int</span> cs, <span class="hljs-type">int</span> ip, <span class="hljs-type">int</span> sector, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> head)</span>&#123;<br>    <span class="hljs-type">int</span> cur;<br>    <span class="hljs-keyword">for</span> (cur = <span class="hljs-number">0</span>; cur &lt; processNum; cur++)&#123;<br>        <span class="hljs-keyword">if</span> (PCBList[cur].status == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    PCBList[cur].ax = <span class="hljs-number">0</span>;<br>    PCBList[cur].bx = <span class="hljs-number">0</span>;<br>    PCBList[cur].cx = <span class="hljs-number">0</span>;<br>    PCBList[cur].dx = <span class="hljs-number">0</span>;<br>    PCBList[cur].si = <span class="hljs-number">0</span>;<br>    PCBList[cur].bp = <span class="hljs-number">0</span>;<br>    PCBList[cur].di = <span class="hljs-number">0</span>;<br>    PCBList[cur].cs = cs;<br>    PCBList[cur].ds = cs;<br>    PCBList[cur].es = cs;<br>    PCBList[cur].ip = ip;<br>    PCBList[cur].ss = cs;<br>    PCBList[cur].sp = savePSPadd(cs);<br>    PCBList[cur].flags = <span class="hljs-number">512</span>;<br>    PCBList[cur].pid = cur;<br>    PCBList[cur].name[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;0&#x27;</span> + cur;<br>    PCBList[cur].name[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    LoadPSP(cs);<br>    loadProgram(cs, ip, sector, num, head);<span class="hljs-comment">/*sector:扇区，num:扇区数，head:磁头号*/</span><br>    PCBList[cur].status = <span class="hljs-number">2</span>;<br>    runningNum ++;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-进程切换">6.进程切换</h4><p>进程切换，需要考虑以下几种情况：</p><ul><li>若正在运行的程序数<code>runningNum</code>为0，则将进程切换或保持为内核</li><li>否则，遍历所有的PCB，直到找到一个处于阻塞状态的进程：<ul><li>若找到了阻塞态的，则将其修改为运行态；并把当前的状态（运行态的时候才改）改为阻塞态</li><li>若找不到，则继续运行当前进程</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>  <span class="hljs-title function_">scheduleProcess</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span> (runningNum == <span class="hljs-number">0</span>)&#123;<br>        curPCB = &amp;PCBList[processNum - <span class="hljs-number">1</span>];<br>        curPCB-&gt;status = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = curPCB-&gt;pid + <span class="hljs-number">1</span>; <span class="hljs-number">1</span>; i++)&#123;<br>        i = i % processNum;<br>        <span class="hljs-keyword">if</span>(i == curPCB-&gt;pid)<span class="hljs-keyword">break</span>;<span class="hljs-comment">/*遍历了一遍都没有发现阻塞态的进程，则保持当前的继续运行*/</span><br>        <span class="hljs-keyword">if</span> (PCBList[i].status == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(curPCB-&gt;status == <span class="hljs-number">1</span>)curPCB-&gt;status = <span class="hljs-number">2</span>;<span class="hljs-comment">/*只有当状态为运行态，才修改为阻塞态*/</span><br>            PCBList[i].status = <span class="hljs-number">1</span>;<br>            curPCB = &amp;PCBList[i];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改时钟中断，使每一个时间片结束时，进行进程切换。</p><p>在合适的地方添加下面的语句即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">call _scheduleProcess<br></code></pre></td></tr></table></figure><h4 id="7-进程结束">7.进程结束</h4><p>用户程序是使用<code>ret</code>来返回操作系统的，我们该如何判断用户程序什么时候返回呢？</p><p>当用户程序运行到<code>ret</code>语句的时候，会弹出用户栈里的两个数据，作为段地址和偏移量。我们在之前将栈初始化——保存了<code>cs</code>和<code>0</code>在栈顶。所以用户程序会跳转到PSP的段首，这里我们预先存放了<code>int 20h</code>，所以会调用20h中断。20h的主要作用是跳转并执行<code>endProcess</code>函数。</p><p>20h的中断修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">INT20H:<br>    mov ax,cs<br>    mov ds,ax<br>    mov ss,ax<br>    mov es,ax<br>    mov si,word ptr DGROUP:_kernelPCB<br>    mov sp,[si+20]<br>    jmp _endProcess<br></code></pre></td></tr></table></figure><p><code>endProcess</code>函数如下:</p><ul><li>修改进程状态为空闲状态</li><li>总的进程数减1</li><li>开中断</li><li>循环等待，直到时间片结束</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">endProcess</span><span class="hljs-params">()</span>&#123;<br>    curPCB-&gt;status = <span class="hljs-number">0</span>;<br>    runningNum--;<br>    STI();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-具体在main中新建进程">8.具体在main中新建进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(isstr_eql(str,<span class="hljs-string">&quot;programs&quot;</span>))&#123;<br>            createProcess(<span class="hljs-number">0x2000</span>, <span class="hljs-number">0x8c00</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">/*四个程序载入的内存地址要不同*/</span><br>            createProcess(<span class="hljs-number">0x3000</span>, <span class="hljs-number">0x8c00</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            createProcess(<span class="hljs-number">0x4000</span>, <span class="hljs-number">0x8c00</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            createProcess(<span class="hljs-number">0x5000</span>, <span class="hljs-number">0x8c00</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (runningNum);<span class="hljs-comment">/*当还有用户程序正在运行，则阻塞在此处。*/</span><br>            cls();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="实验结果">实验结果</h3><p>开机动画正常运作</p><img src="image-20210515224730500.png" alt="image-20210515224730500" style="zoom: 67%;" /><p>可以注意到，右下角的风火轮可以正常转动，同时新增了一条指令<code>programs</code>可以同时运行4个用户程序：</p><img src="image-20210525144610900.png" alt="image-20210525144610900" style="zoom:67%;" /><p>int22可以正常显示：</p><img src="image-20210525144816988.png" alt="image-20210525144816988" style="zoom:67%;" /><p>int21执行如下：</p><img src="image-20210525144757838.png" alt="image-20210525144757838" style="zoom:67%;" /><p>使用新的指令<code>programs</code>同时运行四个字符反射的用户程序，我们会发现，当其中一个进程运行结束后，其他进程的运行速度会变快，到最后只剩下A进程的时候，他的运行速度就和之前一样了。这说明进程在运行结束后，正确地变为空闲状态。当所有用户程序运行结束后，会自动返回操作系统。如下：</p><img src="image-20210525144507172.png" alt="image-20210525144507172" style="zoom:67%;" /><h3 id="问题与解决方式">问题与解决方式</h3><ol><li><p>当多个用户程序同时运行的时候，有的程序运行的快，有的程序运行的慢。当其中一个程序运行结束后就会直接清屏，不能等待其他程序运行完成。这里使用一个循环语句来<strong>同步</strong>——当所有用户程序都运行完成时，才能结束循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">while (runningNum);<br></code></pre></td></tr></table></figure></li><li><p>纠结了一下，flag标志寄存器该初始化位多少？</p><img src="20201024133042782.png" alt="img" style="zoom: 33%;" /><p>上图中，灰色的为保留位，白色的为各种类型的标志。</p><p>x86架构CPU中，标志寄存器主要有3种作用：</p><ul><li>存储相关指令执行后的结果，例如CF（进位）、PF（奇偶）、AF（辅助进位）、ZF（0）、OF（溢出）</li><li>执行相关指令时，提供行为依据，例如执行<code>JE</code>指令时会读取ZF的值，来决定是否进行跳转。</li><li>控制CPU的工作方式，例如IF（是否响应中断）、VM、TF等标志位。</li></ul><p>因此我们只需要将<code>flag</code>初始化为512，9号位置1，使其具有中断处理的功能即可</p></li><li><p>关于<code>int 20h</code>的中断问题。</p><p>上网查阅资料发现，一般情况下是不使用<code>int 20h</code>这个中断的。这是因为本中断的入口参数为：<strong>CS=程序PSP的段地址</strong>，使用起来常常会有些错误。一般会使用<code>int 21h</code>。</p><p>那么在有多个进程交替运行的时候，如何<strong>在不修改原有用户程序</strong>的情况下，判断进程已经运行结束呢。由于一般用户程序最后使用<code>ret</code>进行返回。所以，我们只需要使栈的顶分别为段地址<code>cs</code>和偏移量<code>0</code>，那么<code>cs:0</code>指向的就是PSP代码前缀。PSP是DOS用来和被加载的程序进行通信的，它的结构如下：</p><p><img src="image-20210531232853188.png" alt="image-20210531232853188"></p><p>所以，我们将<code>int 20H</code>存放到PSP的0号位置。</p><p>所以我们只需要在运行程序之前，对用户栈进行初始化，添加<code>cs</code>和<code>0</code>，就能保证用户程序在ret的时候跳转到PSP并调用<code>int 20h</code>，然后根据我们自己写的<code>int 20h</code>就能在程序结束之后，对进程的PCB进行修改与调整。</p></li></ol><h3 id="实验总结">实验总结</h3><p>其实进程控制块PCB处理起来并不复杂，毕竟这次实验进程只需要有新建态、阻塞态、运行态，况且我用查找方式、排队方式仅仅是从头到尾的慢慢遍历，并没有用到非常复杂的算法。所以C程序部分的代码还是非常显然的，只需要用心理清代码逻辑即可。</p><p>而汇编模块的程序还是比较麻烦。需要对<code>save</code>、<code>restart</code>两个模块进行修改，对几个中断进行修改，这里涉及到汇编和C程序之间的相互调用，另外加深了我对汇编语言的各个寄存器的认识。如对FLAG寄存器各个位的作用的认识。同时了解到PSP段的使用方式，并运用到用户进程的返回当中。</p><p>虽然操作系统实验占用了我课余蛮多的时间，但是我还是想说：我爱OS！🐶</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验5：实现系统调用</title>
    <link href="/wuhlan3/2021/05/16/%E5%AE%9E%E9%AA%8C5%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <url>/wuhlan3/2021/05/16/%E5%AE%9E%E9%AA%8C5%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1>实验5：实现系统调用</h1><h3 id="实验目的">实验目的</h3><p>1、 学习掌握PC系统的软中断指令</p><p>2、掌握操作系统内核对用户提供服务的系统调用程序设计方法</p><p>3、掌握C语言的库设计方法</p><p>4、掌握用户程序请求系统服务的方法</p><h3 id="实验要求">实验要求</h3><p>1、了解PC系统的软中断指令的原理</p><p>2、掌握x86汇编语言软中断的响应处理编程方法</p><p>3、扩展实验四的的内核程序，增加输入输出服务的系统调用。</p><p>4、C语言的库设计，实现<code>putch()</code>、<code>getch()</code>、<code>printf()</code>等基本输入输出库过程。</p><p>5、编写实验报告，描述实验工作的过程和必要的细节，如截屏或录屏，以证实实验工作的真实性</p><h3 id="实验内容">实验内容</h3><p>(1) 修改实验4的内核代码，先编写save()和restart()两个汇编过程，分别用于中断处理的现场保护和现场恢复，内核定义一个保护现场的数据结构，以后，处理程序的开头都调用save()保存中断现场，处理完后都用restart()恢复中断现场。</p><p>(2) 内核增加int 20h、int 21h和int 22h软中断的处理程序，其中，int 20h用于用户程序结束是返回内核准备接受命令的状态；int 21h用于系统调用，并实现3-5个简单系统调用功能；int22h功能未定，先实现为屏幕某处显示INT22H。</p><p>(3) 保留无敌风火轮显示，取消触碰键盘显示OUCH!这样功能。</p><p>(4) 进行C语言的库设计，实现putch()、getch()、gets()、puts()、printf()、scanf()等基本输入输出库过程，汇编产生libs.obj。</p><p>(5) 利用自己设计的C库libs.obj，编写一个使用这些库函数的C语言用户程序，再编译，再与libs.obj一起链接，产生COM程序。增加内核命令执行这个程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-type">char</span> ch,str[<span class="hljs-number">80</span>];<br>       <span class="hljs-type">int</span> a;<br>       <span class="hljs-built_in">getch</span>(&amp;ch);<br>       <span class="hljs-built_in">gets</span>(str);<br>       <span class="hljs-built_in">scnf</span>(“a=%d”,&amp;a);<br>      <span class="hljs-built_in">putch</span>(ch);<br>      <span class="hljs-built_in">puts</span>(str);<br>       <span class="hljs-built_in">printint</span>(“ch=%c, a=%d, str=%s”, ch, a, str);<br>&#125;<br></code></pre></td></tr></table></figure><p>(6) 编写实验报告，描述实验工作的过程和必要的细节，如截屏或录屏，以证实实验工作的真实性</p><p><img src="new.png" alt="new"></p><h3 id="实验环境">实验环境</h3><h5 id="1-系统与虚拟机">1.系统与虚拟机</h5><ul><li>Windows 10 - x64 18363.1139</li><li>VMware Workstation 16 Player：用于跑ubuntu虚拟机</li><li>Ubuntu 20.04.2 LTS</li><li>VirtualBox-6.1.18-142142-Win：用于运行.img文件</li><li>DOSBox DOS Emulator 0,74,0,0：用于tcc和tasm编译，并且运行.com文件</li></ul><h5 id="2-windows上的相关软件、编译器等">2.windows上的相关软件、编译器等</h5><ul><li>NASM version 2.10.07 compiled on Jan  2 2013</li><li>TCC.EXE：用于16位C语言编程</li><li>TLINK.EXE：用于C语言与汇编语言链接</li><li>TASM.EXE：用于.asm文件的汇编</li></ul><h5 id="3-Ubuntu上的相关软件、编译器等">3.Ubuntu上的相关软件、编译器等</h5><ul><li>NASM version 2.14.02</li><li>makefile：GNU Make 4.2.1</li></ul><h3 id="实验基本架构">实验基本架构</h3><p><img src="1.png" alt="Wuhlan OS"></p><h3 id="实验过程">实验过程</h3><h4 id="1-根据例程，写出保护现场与恢复现场">1.根据例程，写出保护现场与恢复现场</h4><p>在C程序中定义了一个结构体，包含了汇编中的14个寄存器，用于存储原来的状态，结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cpuRegisters</span>&#123;</span><br>    <span class="hljs-type">int</span> ax;<span class="hljs-comment">/*0*/</span><br>    <span class="hljs-type">int</span> bx;<br>    <span class="hljs-type">int</span> cx;<br>    <span class="hljs-type">int</span> dx;<br>    <span class="hljs-type">int</span> di;<br>    <span class="hljs-type">int</span> bp;<br>    <span class="hljs-type">int</span> es;<br>    <span class="hljs-type">int</span> ds;<span class="hljs-comment">/*14*/</span><br>    <span class="hljs-type">int</span> si;<span class="hljs-comment">/*16*/</span><br>    <span class="hljs-type">int</span> ss;<span class="hljs-comment">/*18*/</span><br>    <span class="hljs-type">int</span> sp;<span class="hljs-comment">/*20*/</span><br>    <span class="hljs-type">int</span> ip;<span class="hljs-comment">/*22*/</span><br>    <span class="hljs-type">int</span> cs;<span class="hljs-comment">/*24*/</span><br>    <span class="hljs-type">int</span> flags;<span class="hljs-comment">/*26*/</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>老师给出了<code>Minix</code>中的<code>save</code>和<code>restart</code>过程，我们可以先看懂该程序，再写出自己的<code>_save</code>和<code>_restart</code>。我们必须要明确刚调用save的时候栈里有什么东西，包括标志寄存器flag，代码段cs，中断代码pc，和save 的返回地址。我们发现结构体中的前7个寄存器一般来说是比较容易处理的（不会对当前执行的代码造成其他意想不到的影响），且可以在save执行过程中作为中介保存一下。</p><p>仿照老师所给的代码，使用结构体保存中断现场，且在执行save之后，ss,sp,ds,cs,ip几个寄存器会变为内核态的。详情可以看下面代码的注释部分，对于栈的变化进行详细的讲述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs asm">;保护中断现场，此时栈顶/flags/cs/int ip/save ip*********************<br>_save proc near        <br>    push ds;/flags/cs/ip/ip/ds<br>    push cs<br>    pop ds;ds=cs<br>    <br>    push si;/flags/cs/ip/ip/ds/si<br>    <br>    lea si,_cpuReg;此时si是结构体的地址<br>    pop word ptr [si+16];si存入结构体,/flags/cs/ip/ip/ds<br>    pop word ptr [si+14];ds存入结构体,/flags/cs/ip/ip<br>    <br>    lea si,save_ip;这个ip指的是save的返回地址<br>    pop word ptr [si];ip存入ret_temp中,/flags/cs/ip<br>    <br>    lea si,_cpuReg<br>    pop word ptr [si+22];ip存入结构体，/flags/cs<br>    pop word ptr [si+24];cs存入结构体，/flags<br>    pop word ptr [si+26];flags存入结构体，/，栈为空<br>    <br>    mov [si+18],ss;ss存入结构体<br>    mov [si+20],sp;sp存入结构体<br>    <br>    mov si,ds<br>    mov ss,si;将栈修改为内核栈<br>    <br>    lea si,_cpuReg<br>    mov sp,si;使栈指针指向结构体<br>    add sp,14;sp指向ds<br>    <br>    push es;将剩余的寄存器存入结构体<br>    push bp<br>    push di<br>    push dx<br>    push cx<br>    push bx<br>    push ax<br>    <br>    lea si,kernelsp<br>    mov sp,[si]<br>    ;此时ss,sp,ds,cs,ip都是内核的<br>    <br>    lea si,save_ip;通过保存的save_iP进行返回<br>    mov ax,[si]<br>    jmp ax<br>_save endp<br>;********************************************************<br></code></pre></td></tr></table></figure><p>由于save的时候，最后才存储那7个寄存器，在恢复的时候，可以先恢复。由于我们使用si来进行寻址，所以先把恢复的si寄存器存入一个临时变量中，最后再进行恢复。比较需要注意的是栈的变化，首先把结构体作为栈，后来恢复了原来的栈，要对结构体进行手动寻址方式。</p><p>详情可以看下面代码的注释部分，对于栈的变化进行详细的讲述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs asm">;恢复中断现场********************************************************<br>_restart proc near    <br>    lea si,kernelsp<br>    mov [si],sp<br>    lea sp,_cpuReg;将栈指针指向结构体，对前7个寄存器进行出栈<br>    pop ax<br>    pop bx<br>    pop cx<br>    pop dx<br>    pop di<br>    pop bp<br>    pop es<br>                                ;结构体中/flags/cs/ip/sp/ss/si/ds<br>    lea si,ds_temp;使用一个临时变量存储ds,/flags/cs/ip/sp/ss/si<br>    pop word ptr [si];结构体中/flags/cs/ip/sp/ss/si<br>    lea si,si_temp;使用一个临时变量存储si<br>    pop word ptr [si];结构体中/flags/cs/ip/sp/ss<br>    <br>    lea si,bx_temp;保护一下bx<br>    mov [si],bx<br><br>    pop bx;结构体中/flags/cs/ip/sp<br>    mov ss,bx;bx为原来的栈地址<br>    mov bx,sp<br>    mov sp,[bx];bx此时是结构体中sp的地址，恢复栈的sp<br>    <br>    add bx,2;使bx指向ip<br>    <br>    push word ptr [bx+4];原来的栈中：/flags<br>    push word ptr [bx+2];原来的栈中：/flags/cs<br>    push word ptr [bx];原来的栈中：/flags/cs/ip<br>    <br>    push ax;原来的栈中：/flags/cs/ip/ax<br>    push word ptr [si];原来的栈中：/flags/cs/ip/ax/bx<br>    lea si,ds_temp<br>    mov ax,[si]<br>    lea si,si_temp<br>    mov bx,[si]<br>    mov ds,ax;恢复ds<br>    mov si,bx;恢复si<br>    <br>    pop bx;原来的栈中：/flags/cs/ip/ax<br>    pop ax;原来的栈中：/flags/cs/ip<br>    <br>    iret<br>    <br>_restart endp<br>;********************************************************<br></code></pre></td></tr></table></figure><p>这样，save、restart就已经写好了，我们要寻找一些方法来检验是否正确。使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">call _save<br>call do_INT_XXh<br>jmp _restart<br></code></pre></td></tr></table></figure><p>可以在<code>Timer</code>的前后使用，程序照常进行。</p><p>还可以在<code>OUCH OUCH！</code>的前后使用，程序如常，说明save、restart是成功的。</p><h4 id="2-增加INT-20软中断程序">2.增加INT 20软中断程序</h4><blockquote><p>int 20h用于用户程序结束是返回内核准备接受命令的状态</p></blockquote><p>INT20h的内容主要是与jump过程相互配合的，提供新的跳转到用户程序并且返回的方法。与之前的区别在于保护了内核栈，提供了新的用户栈。在jump里把用户程序的ss=cs，sp准备好，并且将其压入用户栈中。具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _jump<br>_jump proc near;两个参数,要跳到的cs:ip<br>    ;保护现场***********************************************<br>    push bp<br>    mov bp,sp;先获取当前的栈指针，方便寻址，/jumpdest_ip/jumpdest_cs/ip/bp<br>    push ax<br>    push bx<br>    push cx<br>    push dx<br>    push di<br>    push es<br>    push ds<br>    push si<br>    pushf<br><br>    mov bx,[bp+4];获取参数cs<br>    mov ax,[bp+6];获取参数ip<br>    <br>    mov es,bx<br>    lea si,PSPBegin<br>    mov di,0<br>    lea cx,PSPEnd<br>    sub cx,si<br>    rep movsb<br>    <br>    lea si,kernelsp<br>    mov [si],sp<br><br>    mov ss,bx<br>    mov sp,0<br>    <br>    xor cx,cx<br>    push cx<br><br>    push bx;要跳转的cs<br>    push ax;要跳转的ip<br>    retf;retf用栈中数据同时改CS,IP,远转移远返回指令。当它执行时，处理器先从栈中弹出<br>                        ;一个字到IP，再弹出一个字到CS。retf  -&gt;  pop ip   pop cs<br>PSPBegin:<br>    int 20h<br>PSPEnd:nop<br></code></pre></td></tr></table></figure><p>INT20h，前半部分是对中断的载入，与其他中断的载入方式一致，不必赘述。从用户程序返回到内核的方法，恢复内核栈，再恢复寄存器最后直接返回即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _loadINT_20h<br>_loadINT_20h proc near        ;载入中断，基本固定化的格式了，不必赘述<br>    push ax<br>    push es<br>    CLI<br>    xor ax,ax<br>    mov es,ax<br>    lea ax,INT20H<br>    mov [es:80h],ax<br>    mov ax,cs<br>    mov [es:82h],ax<br>    mov es,ax<br>    STI<br><br>    pop es<br>    pop ax<br><br>    ret<br><br>INT20H:<br>    mov ax,cs<br>    mov ds,ax;ds = cs<br>    mov ss,ax;ss = ss<br>     lea si,kernelsp<br>    mov sp,[si];恢复栈指针<br>    popf;因为在调用jump过程后，push了很多寄存器，所以需要返回前需要pop<br>    pop si<br>    pop ds<br>    pop es<br>    pop di<br>    pop dx<br>    pop cx<br>    pop bx<br>    pop ax<br>    pop bp<br>    ret<br>_loadINT_20h endp<br></code></pre></td></tr></table></figure><h4 id="3-增加INT-21软中断程序">3.增加INT 21软中断程序</h4><p>基本结构如下：</p><ul><li>载入int 21h（与其他中断的载入方式类似，偏移量存放在地址84h，代码段地址存放在86h的位置）</li><li>执行int 21h</li><li>三个功能号，分别是：输出一个字符、获取键盘输入的字符（这个并不是完整的getchar）、返回内核（与int 20h一致）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asm">;INT 21h****************************************************<br>INT_21h:<br>    call _save<br>    call do_INT_21h<br>    jmp _restart<br>do_INT_21h:<br>    lea si, _cpuReg<br>    mov ax, [si];此时si的地址就是ax<br>    <br>    cmpah, 01h<br>    jz INT_21h_1h<br>    <br>    cmp ah, 02h<br>    jz INT_21h_2h<br>    <br>    cmp ah, 4ch<br>    jz INT_21h_3h<br>_21h_end:    <br>    ret<br>;***********************************************************<br></code></pre></td></tr></table></figure><p>1h：获取键盘输入的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">INT_21h_1h proc near<br>    mov ax,cs<br>    mov ds,ax<br>    mov ah,0<br>    int 16h;<br>    <br>    ;此时al已经得到了输入的字符，接着我们把ah清零，并修改cpureg中的ax<br>    xor ah,ah<br>    lea si,_cpuReg<br>    mov [si],ax<br>    jmp _21h_end<br>INT_21h_1h endp<br></code></pre></td></tr></table></figure><p>2h：输出一个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">INT_21h_2h proc near<br>    mov ax,cs<br>    mov es,ax<br>    <br>    mov bh,0<br>    mov ah,3<br>    int 10h;<br>    lea bp,_cpuReg<br>    add bp,6<br>    mov ax,1301h<br>    mov bx,0007h<br>    mov cx,1<br>    int 10h<br>    jmp _21h_end<br>    <br>INT_21h_2h endp<br></code></pre></td></tr></table></figure><p>3h：返回内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">INT_21h_3h proc near<br>    mov ax,cs<br>    mov ds,ax<br>    mov ah,0<br>    int 16h<br>    xor ah,ah<br>    lea si,_cpuReg<br>    mov [si],ax<br>    jmp _21h_end<br>INT_21h_3h endp<br></code></pre></td></tr></table></figure><h4 id="4-增加INT-22软中断程序">4.增加INT 22软中断程序</h4><p>由于<code>save</code>和<code>restart</code>已经准备好了，所以我们可以很轻松地写出INT 22h</p><p>加载22h中断，偏移量存放在地址88h，代码段地址存放在8ah的位置</p><p>Int22h中断处理程序(屏幕某处显示INT22H):int22h功能未定，先实现为屏幕某处显示INT22H。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs asm">;22号中断***************************************************<br>INT_22h:<br>    call _save<br>    call do_INT_22h<br>    jmp _restart<br><br>do_INT_22h:<br>    mov ax, cs<br>    mov ds, ax<br>    mov ax,0b800h<br>    mov es,ax<br>    <br>    mov cx, 6 ;字符串长度,用于循环计数<br>    lea si, INT22H_str;获取字符串地址<br>    <br>    mov bx,(12*80+40)*2;打印于屏幕中心<br>    mov ah,07h<br>loop_int_22:<br>    mov al,[si]<br>    mov es:[bx], ax<br>    inc bx<br>    inc bx<br>    inc si<br>    loop loop_int_22;loop结合cx可以使循环写的很舒服<br>    ret<br>INT22H_str db &quot;INT 22H&quot;<br>;***********************************************************<br></code></pre></td></tr></table></figure><p>使用一个用户程序来调用int 22h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">org 8c00h<br>start:<br>    int 22h<br>    ret<br></code></pre></td></tr></table></figure><h4 id="5-完善C函数库">5.完善C函数库</h4><p>事实上，在之前的实验中我已经写了一个类似的库，这一次实验的主要是实现printf和scanf.</p><p>printf和scanf都是参数变长的函数。我对此完全没有概念，只好求助于搜索引擎。</p><p>关键的操作在于取str指针的地址，通过+偏移量的方式，寻址得到后面的参数。</p><p>如：<code>itos((int)*(&amp;str+off))</code>可以获得%d对应的数字，并将其转换为字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, ...)</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> off = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-number">0</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span> (str[i] != <span class="hljs-string">&#x27;%&#x27;</span>)&#123;<br>            putch(str[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            i++;<br>            <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                <span class="hljs-built_in">puts</span>(itos((<span class="hljs-type">int</span>)*(&amp;str + off)));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;c&#x27;</span>)<br>                putch((<span class="hljs-type">char</span>)*(&amp;str + off));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;s&#x27;</span>)<br>                <span class="hljs-built_in">puts</span>((<span class="hljs-type">char</span> *)*(&amp;str + off));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>            off += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">scanf</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, ...)</span>&#123;<br>    <span class="hljs-type">int</span> off = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-number">0</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;%&#x27;</span>)&#123;<br>            i++;<br>            <span class="hljs-keyword">switch</span> (str[i])&#123;<br>            <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;d&#x27;</span>)&#123;<br>                gets(num);<br>                *((<span class="hljs-type">int</span> *)(*(&amp;str + off))) = stoi();<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;c&#x27;</span>)<br>                getch((<span class="hljs-type">char</span> *)*(&amp;str + off));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;s&#x27;</span>)<br>                gets((<span class="hljs-type">char</span> *)*(&amp;str + off));<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            off += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-将所有文件进行编译，并写入软盘">6.将所有文件进行编译，并写入软盘</h4><p>我们再来看看实验的要求：</p><blockquote><p>(5) 利用自己设计的C库libs.obj，编写一个使用这些库函数的C语言用户程序，再编译，再与libs.obj一起链接，产生COM程序。增加内核命令执行这个程序。</p></blockquote><p>此次生成的.com程序涉及到四个代码文件，对于C函数库，经过网上搜索发现不能使用<code>.h</code>作为文件名，而应该直接使用<code>.c</code>。之后使用批处理提高生产效率（其中，后四段命令是新添加的）：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">del</span> *.obj<br><span class="hljs-built_in">del</span> *.com<br>tcc -mt -c -omain.obj main.c &gt; ccmsg.txt<br>tasm monitor.asm monitor.obj &gt; amsg.txt<br>tlink /<span class="hljs-number">3</span> /t monitor.obj main.obj, monitor.com,,<br>tcc -mt -c -otest.obj test.c &gt; test.txt<br>tcc -mt -c -ostdio.obj stdio.c &gt; stdio.txt<br>tasm loadtest.asm loadtest.obj &gt; loadtest.txt<br>tasm lib.asm lib.obj &gt; lib.txt<br>tlink /<span class="hljs-number">3</span> /t loadtest.obj lib.obj stdio.obj test.obj, loadtest.com,,<br></code></pre></td></tr></table></figure><p>本次实验引入了两个新的用户程序：</p><ul><li><p>test_int_22.bin，是用于测试中断向量22h的，加载到磁头号1，6号扇区的位置</p></li><li><p>LOADTEST.COM是用于测试中断向量21h的，加载到磁头号1，7号扇区的位置</p></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs makefile">BIN = loader.bin startOS.bin 19335209_A.bin 19335209_B.bin 19335209_C.bin 19335209_D.bin test_int_22.bin<br>IMG = wuhlan.img<br><span class="hljs-section">all: clear <span class="hljs-variable">$(BIN)</span> <span class="hljs-variable">$(IMG)</span></span><br><span class="hljs-section">clear:</span><br>    rm -f <span class="hljs-variable">$(BIN)</span> <span class="hljs-variable">$(IMG)</span><br><span class="hljs-section">%.bin: %.asm</span><br>    nasm -fbin <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><span class="hljs-section">%.img:</span><br>    /sbin/mkfs.msdos -C <span class="hljs-variable">$@</span> 1440<br>    dd if=loader.bin of=<span class="hljs-variable">$@</span> conv=notrunc<br>    dd if=MONITOR.COM of=<span class="hljs-variable">$@</span> seek=1 conv=notrunc<br>    dd if=19335209_A.bin of=<span class="hljs-variable">$@</span> seek=18 conv=notrunc<br>    dd if=19335209_B.bin of=<span class="hljs-variable">$@</span> seek=19 conv=notrunc<br>    dd if=19335209_C.bin of=<span class="hljs-variable">$@</span> seek=20 conv=notrunc<br>    dd if=19335209_D.bin of=<span class="hljs-variable">$@</span> seek=21 conv=notrunc<br>    dd if=startOS.bin of=<span class="hljs-variable">$@</span> seek=22 conv=notrunc<br>    dd if=test_int_22.bin of=<span class="hljs-variable">$@</span> seek=23 conv=notrunc<br>    dd if=LOADTEST.COM of=<span class="hljs-variable">$@</span> seek=24 conv=notrunc<br></code></pre></td></tr></table></figure><h3 id="实验结果">实验结果</h3><p>开机动画正常运作</p><img src="2.png" alt="image-20210515224730500" style="zoom: 67%;" /><p>可以注意到，右下角的风火轮可以正常转动，同时新增加两个用户程序，分别用于测试int21和int22</p><img src="3.png" alt="image-20210515224550534" style="zoom: 67%;" /><p>int22可以正常显示</p><img src="4.png" alt="image-20210515225137314" style="zoom:67%;" /><p>int21执行如下</p><img src="5.png" alt="image-20210515230025451" style="zoom:67%;" /><h3 id="问题与解决方式">问题与解决方式</h3><ol><li><p>终于解决了，之前实验中C语言字符串无法显示的问题【捂脸】，经过老师的轻轻一点拨，原来就是我在载入监控程序的时候，没有控制好载入扇区的数量。如下，对<code>al</code>的值进行修改即可。😊</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov ax,cs                ;段地址 ; 存放数据的内存基地址<br>mov es,ax                ;设置段地址（不能直接mov es,段地址）<br>mov bx, OS_offset   <br>mov ah,2                 ;功能号<br>mov al,10                 ;扇区数，内核占用扇区数  注意：不止加载了一个扇区<br>mov dl,0                 ;驱动器号 ; 软盘为0，硬盘和U盘为80H<br>mov dh,0                 ;磁头号 ; 起始编号为0<br>mov ch,0                 ;柱面号 ; 起始编号为0<br>mov cl,2                 ;存放内核的起始扇区号 ; 起始编号为1<br>int 13H                  ;调用读磁盘BIOS的13h功能<br>jmp 0a00h:100h            <br></code></pre></td></tr></table></figure></li><li><p>在dosbox编译的时候出现神奇错误：</p><p><code>Fatal: Command line: Can't locate file: load_stdio_test.asm</code></p><p>解决方法是，将文件名改短😓</p></li><li><p>在编译<code>int 21h</code>测试程序的时候，出现调用.com程序失败的问题。原来是.com程序超过了512kb，在载入内存的时候需要多载入几个扇区。这个问题也卡了好久，以后一定要注意😡</p></li></ol><h3 id="实验总结">实验总结</h3><p>本次实验看起来内容不多，但是真正做起来，是有非常多细节需要处理的。</p><p>第一个难关就是<code>save</code>和<code>restart</code>的设计。 它起到保护中断现场的作用，可以使得多出来的在后续的实验中大概会起到非常重要的作用。看起来只不过是push和pop的简单问题，但是事实上，很多的寄存器（如ss,sp等）是会影响当前指令的正常执行的，常常需要额外的变量存储，并且需要对栈的过程、对函数调用中的栈的调用过程非常清晰。通过对上网查阅资料，我对汇编语言中所有的寄存器的特点有了更深刻的理解。</p><p>接下来一个难关，是用户程序常常遇到调用失败的问题。很多时候是自己加载的扇区数，磁头号，扇区号不正确导致的。也出现了用户栈与内核栈并不对应导致错误。希望在后续的实验中能够避免。</p><p>希望下次实验能够顺顺利利！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验4：具有中断处理的内核</title>
    <link href="/wuhlan3/2021/04/16/%E5%AE%9E%E9%AA%8C4%EF%BC%9A%E5%85%B7%E6%9C%89%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E7%9A%84%E5%86%85%E6%A0%B8/"/>
    <url>/wuhlan3/2021/04/16/%E5%AE%9E%E9%AA%8C4%EF%BC%9A%E5%85%B7%E6%9C%89%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E7%9A%84%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<h1>实验4：具有中断处理的内核</h1><h3 id="实验目的">实验目的</h3><p>1、PC系统的中断机制和原理<br>2、理解操作系统内核对异步事件的处理方法<br>3、掌握中断处理编程的方法<br>4、掌握内核中断处理代码组织的设计方法<br>5、了解查询式I/O控制方式的编程方法</p><h3 id="实验要求">实验要求</h3><p>1、知道PC系统的中断硬件系统的原理<br>2、掌握x86汇编语言对时钟中断的响应处理编程方法<br>3、重写和扩展实验三的的内核程序，增加时钟中断的响应处理和键盘中断响应。<br>4、编写实验报告，描述实验工作的过程和必要的细节，如截屏或录屏，以证实实验工作的真实性</p><h3 id="实验内容">实验内容</h3><p>(1)编写x86汇编语言对时钟中断的响应处理程序：设计一个汇编程序，在一段时间内系统时钟中断发生时，屏幕变化显示信息。在屏幕24行79列位置轮流显示’|’、'/'和’\’(无敌风火轮)，适当控制显示速度，以方便观察效果，也可以屏幕上画框、反弹字符等，方便观察时钟中断多次发生。将程序生成COM格式程序，在DOS或虚拟环境运行。<br>(2)重写和扩展实验三的的内核程序，增加时钟中断的响应处理和键盘中断响应。在屏幕右下角显示一个转动的无敌风火轮，确保内核功能不比实验三的程序弱，展示原有功能或加强功能可以工作。<br>(4) 扩展实验三的的内核程序，但不修改原有的用户程序，实现在用户程序执行期间，若触碰键盘，屏幕某个位置会显示“OUCH!OUCH!”。<br>(5)编写实验报告，描述实验工作的过程和必要的细节，如截屏或录屏，以证实实验工作的真实性</p><p><img src="6.png" alt="1618293085038"></p><h3 id="实验环境">实验环境</h3><h5 id="1-系统与虚拟机">1.系统与虚拟机</h5><ul><li>Windows 10 - x64 18363.1139</li><li>VMware Workstation 16 Player：用于跑ubuntu虚拟机</li><li>Ubuntu 20.04.2 LTS</li><li>VirtualBox-6.1.18-142142-Win：用于运行.img文件</li><li>DOSBox DOS Emulator 0,74,0,0：用于tcc和tasm编译，并且运行.com文件</li></ul><h5 id="2-windows上的相关软件、编译器等">2.windows上的相关软件、编译器等</h5><ul><li>NASM version 2.10.07 compiled on Jan  2 2013</li><li>TCC.EXE：用于16位C语言编程</li><li>TLINK.EXE：用于C语言与汇编语言链接</li><li>TASM.EXE：用于.asm文件的汇编</li></ul><h5 id="3-Ubuntu上的相关软件、编译器等">3.Ubuntu上的相关软件、编译器等</h5><ul><li>NASM version 2.14.02</li><li>makefile：GNU Make 4.2.1</li></ul><h3 id="实验前置知识">实验前置知识</h3><p>x86计算机在启动时会自动进入<strong>实模式状态</strong>，在内存的低位区（地址为0~1023[3FFH]，1KB）创建含256个中断向量的表IVT （每个向量[地址]占4个字节，<mark>格式为：16位段值:16位偏移值</mark>）。</p><img src="1.png" alt="image-20210413145103907" style="zoom:50%;" /><p>下图是中断向量表，我们可以看到这次实验用到的中断向量主要包括8号中断向量（时钟中断）和9号中断向量（键盘中断）</p><img src="2.png" alt="2" style="zoom:70%;" /><h3 id="实验过程">实验过程</h3><h4 id="1-例程分析">1.例程分析</h4><p>该代码实现的是，在窗口坐标为（12，39）的位置，显示字符。从’!'开始，按照ASCII的顺序，依次显示之后的所有字符。每隔一段时间字符就会变化一次。</p><ol><li><p>将Timer在代码中的偏移量设置为时钟中断向量（08h）的偏移地址（中断号为8，4*8 = 32，转换为16进制即20h）；再将该代码段的地址（CS）作为时钟中断向量的段地址。</p></li><li><p>程序在将初始字符’!'窗口中显示之后，就进入死循环。</p></li><li><p>而Timer中的代码会在很短的时间内进行调用：</p><ul><li><p>设置一个延迟计数，每四次中断才进行一次字符的变化；</p></li><li><p>每次字符变化在相应的ASCII码基础上+1；</p></li><li><p>中断结束后，需要发送EOI（End of Interrupt）到ISR相应的位置，将其清零，并中断返回</p></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs asm">org 100h            ; 程序加载到100h，可用于生成COM<br>; 设置时钟中断向量（08h），初始化段寄存器<br>    xor ax,ax; AX = 0<br>    mov es,ax; ES = 0<br>    mov word [es:20h],Timer; 设置时钟中断向量的偏移地址<br>    mov ax,cs <br>    mov word [es:22h],ax; 设置时钟中断向量的段地址=CS<br>    mov ds,ax; DS = CS<br>    mov es,ax; ES = CS<br>; 在屏幕右下角显示字符‘!’    <br>    movax,0B800h; 文本窗口显存起始地址<br>    movgs,ax; GS = B800h<br>    mov ah,0Fh; 0000：黑底、1111：亮白字（默认值为07h）<br>    mov al,&#x27;!&#x27;; AL = 显示字符值（默认值为20h=空格符）<br>    mov [gs:((80*12+39)*2)],ax; 屏幕第 24 行, 第 79 列<br>    jmp $; 死循环<br>; 时钟中断处理程序<br>    delay equ 4; 计时器延迟计数<br>    count db delay; 计时器计数变量，初值=delay<br>Timer:<br>    dec byte [count]; 递减计数变量<br>    jnz end; &gt;0：跳转<br>    inc byte [gs:((80*12+39)*2)]; =0：递增显示字符的ASCII码值<br>    mov byte[count],delay; 重置计数变量=初值delay<br>end:<br>    mov al,20h; AL = EOI<br>    out 20h,al; 发送EOI到主8529A<br>    out 0A0h,al; 发送EOI到从8529A<br>    iret; 从中断返回<br><br></code></pre></td></tr></table></figure><h4 id="2-在右下角显示“无敌风火轮”">2.在右下角显示“无敌风火轮”</h4><p>在老师的代码基础上进行修改。</p><p>我们只需要将风火轮的移动到右下角，并且将字符的变化修改为<code>/|\-</code>的依次变化即可（增加多一个横杠，会使风火轮更像是风火轮）。</p><p>主要修改的是Timer部分的代码。增加一个变量<code>pos</code>来对应字符的位置，每次中断发生，改变<code>pos</code>，即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs asm">char db &#x27; /|\-&#x27;            ;按顺序存储风火轮的四个状态<br>pos  dw  4                ;字符的索引<br>delay equ 1                    ; 计时器延迟计数<br>count db delay                ; 计时器计数变量，初值=delay<br>Timer:<br>    push ax        <br>    push bx<br>    push cx<br>    push dx<br>    push bp<br>    push es<br>    push ds<br><br>    movax,0B800h<br>    moves,ax<br>    mov ah,0Fh<br>    <br>    dec byte ptr [count]<br>    jnz end1<br>    <br>    mov bx, word ptr[pos]<br>    mov al,byte ptr[char+bx];获取新的字符<br>    mov [es:((80*24+79)*2)] , ax<br>    <br>    mov byte ptr[count],delay<br>    dec word ptr[pos]<br>    jz loop1;若pos已为0，<br>end1:<br>    mov al,20h; AL = EOI<br>    out 20h,al; 发送EOI到主8529A<br>    out 0A0h,al; 发送EOI到从8529A<br>    <br>    pop ds<br>    pop es <br>    pop bp<br>    pop dx <br>    pop cx<br>    pop bx<br>    pop ax<br>    iret<br><br>loop1:<br>    mov word ptr[pos], 4    <br>    jmp end1<br></code></pre></td></tr></table></figure><p>而在监控程序<code>monitor.asm</code>，也需要进行修改。在程序开始之前，需要将Timer设置到时钟中断的位置。注意！！！在这之后需要对寄存器重新设置初始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">xor ax,ax            ; AX = 0<br>mov es,ax            ; ES = 0<br>mov word ptr es:[20h],offset Timer<br>mov ax,cs <br>mov word ptr es:[22h],ax<br><br>mov ax,cs<br>mov ds,ax; DS = CS<br>mov es,ax; ES = CS<br>mov ss,ax; SS = cs<br></code></pre></td></tr></table></figure><h4 id="3-先尝试使用键盘中断实现风火轮">3.先尝试使用键盘中断实现风火轮</h4><p>我们先来尝试一下，把无敌风火轮改写为使用键盘来控制它转动与否。只需要改写一下9号中断向量的段地址和偏移地址，并添加下述代码到Timer这一段代码的最开头。</p><p><code>60h</code>为CPU对应键盘的输入缓冲端口 <code>in al,60h</code>就从键盘缓冲中读取1个byte，到<code>al</code>中。只有这样，才能够判断是否需要发生键盘中断。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">in</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">60h</span><br></code></pre></td></tr></table></figure><p>很快我们就能实现一个由键盘输入控制的风火轮了。</p><h4 id="4-OUCH">4.OUCH!</h4><p>首先，根据上述的方法，我们可以写出一个打印&quot;OUCH! OUCH!&quot;键盘中断程序。基本过程为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">寄存器入栈——&gt;输出字符串——&gt;延迟——&gt;清空输出的字符串——&gt;发送EOI——&gt;寄存器出栈——&gt;中断返回<br></code></pre></td></tr></table></figure><p>这里输出字符串，一开始使用的是BIOS中的<code>10h</code>中断，但是出现了一些bug，我改用了循环直接显示字符的方法，具体原因会在后文说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs asm">    ouch_delay equ 50000                <br>    ouch_ddelay equ 2000                        <br>    ouch_count dw ouch_delay<br>    ouch_dcount dw ouch_ddelay<br>ouch_str db &quot;OUCH! OUCH!&quot;<br>index dw 0<br>Keyboard:<br>    push ax                                <br>    push bx<br>    push cx<br>    push dx<br>    push bp<br>    push es<br>    push ds<br>    mov word ptr[index], 0<br>showagain:<br>    mov bx,word ptr[index]<br>    add bx,80*3+55<br>    mov ax,2<br>    mul bx<br>    mov bp,ax<br>    movax,0B800h<br>    moves,ax<br>    mov ah,07h          ;  0000：黑底、1111：亮白字（默认值为07h）<br>    mov bx,word ptr[index]<br>    mov al,byte ptr[ouch_str+bx]           ;  AL = 显示字符值（默认值为20h=空格符）<br>    mov es:[bp],ax          ;  显示字符的ASCII码值<br>    inc word ptr[index]<br>    cmp word ptr[index], 11<br>    jnz showagain<br>continue:<br>    <br>    ;延迟<br>    dec word ptr[ouch_count]             ; 递减计数变量<br>    jnz continue                   ; &gt;0：跳转;<br>    mov word ptr[ouch_count],ouch_delay       ;延时<br><br>    dec word ptr[ouch_dcount]            ; 递减计数变量<br>    jnz continue<br>    mov word ptr[ouch_count],ouch_delay<br>    mov word ptr[ouch_dcount],ouch_ddelay     ;延时<br><br>    ;清除<br>    mov ah,6<br>    mov al,0<br>    mov ch,3<br>    mov cl,55<br>    mov dh,3<br>    mov dl,65<br>    mov bh,7<br>    int 10H<br>    <br>    in al,60h<br>    mov al,20h    ; AL = EOI<br>    out 20h,al; 发送EOI到主8529A<br>    out 0A0h,al    ; 发送EOI到从8529A<br>    <br>    ;中断返回<br>    pop ds<br>    pop es<br>    pop bp<br>    pop dx<br>    pop cx<br>    pop bx<br>    pop ax<br>    <br>    iret<br></code></pre></td></tr></table></figure><p>那要如何实现在用户程序运行的过程中，能成功产生键盘中断，同时在用户程序结束后，还能够正常地通过键盘来进行输入与输出呢？</p><p>当运行用户程序时，要先把原有的中断向量口保存起来，然后将自己写的键盘中断<code>Keyboard</code>存放到9号中断位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">xor ax, ax<br>mov es, ax<br>mov bp,offset interrupt_saved<br>mov word ptr ax,es:[36]<br>mov word ptr [bp],ax<br>mov word ptr ax,es:[38]<br>mov word ptr [bp+2],ax <br><br>mov word ptr es:[36], offset Keyboard<br>mov word ptr es:[38], cs<br></code></pre></td></tr></table></figure><p>在用户程序返回内核之前，把原有键盘中断向量还原回去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">xor ax, ax<br>mov es, ax<br>mov bp,offset interrupt_saved<br>mov word ptr ax,[bp]<br>mov word ptr es:[36],ax<br>mov word ptr ax,[bp+2]<br>mov word ptr es:[38],ax<br></code></pre></td></tr></table></figure><h4 id="5-将所有文件进行编译，并写入软盘">5.将所有文件进行编译，并写入软盘</h4><p>这一次，我将用户程序和开机程序都存放到了磁头号为1的地方，以给内核更大的空间。（扇区号0~17，当满18的时候，就要在磁头号+1；而makefile文件中的seek值只需要继续往下数就可以了）</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile">BIN = loader.bin startOS.bin 19335209_A.bin 19335209_B.bin 19335209_C.bin 19335209_D.bin<br>IMG = wuhlan.img<br><span class="hljs-section">all: clear <span class="hljs-variable">$(BIN)</span> <span class="hljs-variable">$(IMG)</span></span><br><span class="hljs-section">clear:</span><br>    rm -f <span class="hljs-variable">$(BIN)</span> <span class="hljs-variable">$(IMG)</span><br><span class="hljs-section">%.bin: %.asm</span><br>    nasm -fbin <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><span class="hljs-section">%.img:</span><br>    /sbin/mkfs.msdos -C <span class="hljs-variable">$@</span> 1440<br>    dd if=loader.bin of=<span class="hljs-variable">$@</span> conv=notrunc<br>    dd if=MONITOR.COM of=<span class="hljs-variable">$@</span> seek=1 conv=notrunc<br>    dd if=19335209_A.bin of=<span class="hljs-variable">$@</span> seek=18 conv=notrunc<br>    dd if=19335209_B.bin of=<span class="hljs-variable">$@</span> seek=19 conv=notrunc<br>    dd if=19335209_C.bin of=<span class="hljs-variable">$@</span> seek=20 conv=notrunc<br>    dd if=19335209_D.bin of=<span class="hljs-variable">$@</span> seek=21 conv=notrunc<br>    dd if=startOS.bin of=<span class="hljs-variable">$@</span> seek=22 conv=notrunc<br></code></pre></td></tr></table></figure><h3 id="实验结果">实验结果</h3><p>通过观察，我们可以发现，无论是开机程序还是用户程序都可以成功显示&quot;OUCH! OUCH!&quot;，同时可以看到，无敌风火轮一直在右下角旋转。</p><p><img src="3.png" alt="image-20210416111142520"></p><p><img src="4.png" alt="image-20210416111029567"></p><p><img src="5.png" alt="image-20210416111057382"></p><h3 id="问题与解决方式">问题与解决方式</h3><ol><li><p>延续之前实验出现的错误，当C程序写的过多的时候，字符串的输出就会出现各种莫名错误。解决方法就是，将没有必要的函数如<code>upper()</code>、<code>lower()</code>等函数删除。</p></li><li><p>restart.bin开机动画程序可以显示&quot;OUCH! OUCH!&quot;，但是用户程序无法显示。</p><p>问题原因不太清楚，很可能与BIOS的<code>int 10h</code>调用有关。但是明明我已经将所有寄存器放入栈中。</p><p>我将其修改为直接将字符循环一个个地在窗口中显示，最终用户程序和开机程序都可以成功显示&quot;OUCH!&quot;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">    mov word ptr[index], 0<br>showagain:<br>    mov bx,word ptr[index]<br>    add bx,80*3+55<br>    mov ax,2<br>    mul bx<br>    mov bp,ax<br>    movax,0B800h<br>    moves,ax<br>    mov ah,07h          ;  0000：黑底、1111：亮白字（默认值为07h）<br>    mov bx,word ptr[index]<br>    mov al,byte ptr[ouch_str+bx]           ;  AL = 显示字符值（默认值为20h=空格符）<br>    mov es:[bp],ax          ;  显示字符的ASCII码值<br>    inc word ptr[index]<br>    cmp word ptr[index], 11<br>    jnz showagain<br></code></pre></td></tr></table></figure></li></ol><h3 id="创新性工作">创新性工作</h3><ol><li>在风火轮三种形态的基础上，再多添加一个横杠，使其更像是在转动</li><li>在&quot;OUCH! OUCH!&quot;出现之后，过一小段时间，会自动清空。给用户以警告——“不要再碰键盘啦！！！”。同时消失之后，不会影响用户程序的观看体验（捂脸，逃~）</li></ol><h3 id="实验总结">实验总结</h3><p>本次实验，是在上一个实验基础上完成的，仅仅加入了两个中断内容。本以为在上次搭好了基本框架后，这一次实验会相对轻松。但是。。。现实并不如我所愿。如果说之前搭的地基就歪了，接下来建造的楼只会越来越歪，最后甚至可能倒塌。</p><p>这次实验除了加入中断向量外，还需要对上次的实验进行完善，工作量并没有减少。首先是对所有的用户程序的扇区号进行后移，以提供给内核更大的空间，在这个过程中，对于磁盘的划分，磁头号扇区等有了更深的理解；其次是删除了C语言中冗余的函数；还有就是重写用户程序，曾经自以为是地使用“Esc”来返回用户程序，如今在用户程序运行的过程中，因为键盘中断被改写了，只好使用户程序在运行到某个特定地时刻，就自动返回监控程序。</p><p>本次实验重点学习了，中断向量表相关知识、用户程序执行过程中是如何发生中断的。在写中断程序相关的函数时，我特别地小心，在刚开始的时候就尽量将用到的所有寄存器都入栈，防止寄存器混乱出现莫名的错误。时间中断是相对容易实现的，只需要加入 入栈出栈的操作，并且在监控程序启动的时候就将该代码段存入中断向量表就可以了。但是键盘中断要复杂很多，涉及到用户程序启动时改变键盘中断，用户程序结束后恢复键盘中断的操作。而且很容易与现有的用户程序产生冲突，所以花的时间多很多。另外，我会尽可能地在一些完成一个小步骤或是小修改之后，就立刻进行编译debug，防止错误过多，到后期难以处理。</p><p>最后，希望接下来的操作系统实验能顺顺利利吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前缀树Trie</title>
    <link href="/wuhlan3/2021/04/14/%E5%89%8D%E7%BC%80%E6%A0%91Trie/"/>
    <url>/wuhlan3/2021/04/14/%E5%89%8D%E7%BC%80%E6%A0%91Trie/</url>
    
    <content type="html"><![CDATA[<h3 id="力扣——208-实现-Trie-前缀树"><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">力扣——208. 实现 Trie (前缀树)</a></h3><h3 id="题目">题目</h3><p>Trie（发音类似 “try”）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>样例如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">输入<br>[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]<br>[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]<br>输出<br>[<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>]<br><br>解释<br>Trie trie = <span class="hljs-built_in">new</span> Trie();<br>trie.<span class="hljs-keyword">insert</span>(&quot;apple&quot;);<br>trie.<span class="hljs-keyword">search</span>(&quot;apple&quot;);   // 返回 <span class="hljs-keyword">True</span><br>trie.<span class="hljs-keyword">search</span>(&quot;app&quot;);     // 返回 <span class="hljs-keyword">False</span><br>trie.startsWith(&quot;app&quot;); // 返回 <span class="hljs-keyword">True</span><br>trie.<span class="hljs-keyword">insert</span>(&quot;app&quot;);<br>trie.<span class="hljs-keyword">search</span>(&quot;app&quot;);     // 返回 <span class="hljs-keyword">True</span><br></code></pre></td></tr></table></figure><h3 id="算法思路">算法思路</h3><p>简单来说，前缀树就是一个26-叉树。</p><p>每个节点是一个结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span>&#123;<br>    vector&lt;Trie*&gt; children;  <span class="hljs-comment">//存储所有可能的下一个节点 大小为26的数组</span><br>    <span class="hljs-type">bool</span> isEnd;<span class="hljs-comment">//用于判断是否为单词的结尾</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="3.jpg" alt="来自算法4"></p><p>忽略了空节点之后可以简化为如下形式：</p><p><img src="2.jpg" alt="img"></p><h3 id="代码实现">代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;Trie*&gt; child;<br>    <span class="hljs-type">bool</span> isEnd = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-built_in">Trie</span>():<span class="hljs-built_in">child</span>(<span class="hljs-number">26</span>),<span class="hljs-built_in">isEnd</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>    <br>    <span class="hljs-comment">/** Inserts a word into the trie. */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        Trie* node = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : word)&#123;<br>            <span class="hljs-type">int</span> pos = c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(node-&gt;child[pos] == <span class="hljs-literal">nullptr</span>)&#123;<br>                node-&gt;child[pos] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Trie</span>();<br>            &#125;<br>            node = node-&gt;child[pos];<br>        &#125;<br>        node-&gt;isEnd = <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns if the word is in the trie. */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        Trie* node = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : word)&#123;<br>            <span class="hljs-type">int</span> pos = c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(node-&gt;child[pos] == <span class="hljs-literal">nullptr</span>)&#123;<br>                node = node-&gt;child[pos];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            node = node-&gt;child[pos];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-literal">nullptr</span> &amp;&amp; node-&gt;isEnd == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(string prefix)</span> </span>&#123;<br>        Trie* node = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : prefix)&#123;<br>            <span class="hljs-type">int</span> pos = c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(node-&gt;child[pos] == <span class="hljs-literal">nullptr</span>)&#123;<br>                node = node-&gt;child[pos];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            node = node-&gt;child[pos];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是，我们发现函数的重复率非常高，可以写一个搜索前缀的函数，修改为如下形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;Trie*&gt; child;<br>    <span class="hljs-type">bool</span> isEnd = <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-function">Trie* <span class="hljs-title">search_prefix</span><span class="hljs-params">(string word)</span></span>&#123;<br>        Trie* node = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : word)&#123;<br>            <span class="hljs-type">int</span> pos = c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(node-&gt;child[pos] == <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">return</span> node-&gt;child[pos];<br>            &#125;<br>            node = node-&gt;child[pos];<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-built_in">Trie</span>():<span class="hljs-built_in">child</span>(<span class="hljs-number">26</span>),<span class="hljs-built_in">isEnd</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>    <br>    <span class="hljs-comment">/** Inserts a word into the trie. */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        Trie* node = <span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : word)&#123;<br>            <span class="hljs-type">int</span> pos = c - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(node-&gt;child[pos] == <span class="hljs-literal">nullptr</span>)&#123;<br>                node-&gt;child[pos] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Trie</span>();<br>            &#125;<br>            node = node-&gt;child[pos];<br>        &#125;<br>        node-&gt;isEnd = <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns if the word is in the trie. */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        Trie* node = <span class="hljs-built_in">search_prefix</span>(word);<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-literal">nullptr</span> &amp;&amp; node-&gt;isEnd == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(string prefix)</span> </span>&#123;<br>        Trie* node = <span class="hljs-built_in">search_prefix</span>(prefix);<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="拓展一下">拓展一下</h3><p><strong>压缩前缀树</strong></p><p>由于一个字母占用一个节点（含有大小为26的数组），非常浪费空间。压缩前缀树是前缀树的一种优化方案。</p><p><img src="1.jpg" alt="img"></p><h3 id="应用场景">应用场景</h3><p>当然在本题中前缀树起到的作用仅仅是判断是否收录了某个单词。在实际应用中可以通过修改isEnd为一个值，形成健与值的映射，增加应用范围。</p><p>这种时候，我们很自然地就会将前缀树与哈希表进行对比。</p><ul><li><p>哈希表</p><p>当哈希表hash函数选取的好，计算量少且冲突少时，效率可达$O(1)$。</p><p>哈希表不能支持动态查询功能（即写前缀，显示后缀）</p></li><li><p>前缀树</p><p>前缀树的时间复杂度为$O(L)$，其中$L$为字符串长度。处理大量字符串的时候，效率比哈希表高。但是额外消耗的空间较大。经典：以空间换时间。</p></li></ul><ol><li><p>字符串的快速检索</p></li><li><p>字符串排序</p></li><li><p>最长公共前缀</p></li><li><p>自动匹配前缀显示后缀</p><p>如我们在搜索引擎和字典中输入前面的东西，会自动显示后面的内容。（只需把后缀遍历显示出来）</p></li></ol><h3 id="参考资料">参考资料</h3><p>https://zhuanlan.zhihu.com/p/46670859</p><p>https://cloud.tencent.com/developer/article/1678886</p><p>https://leetcode-cn.com/problems/implement-trie-prefix-tree/</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《引力和宇宙学：广义相对论的原理和应用》读书笔记一</title>
    <link href="/wuhlan3/2021/04/13/%E3%80%8A%E5%BC%95%E5%8A%9B%E5%92%8C%E5%AE%87%E5%AE%99%E5%AD%A6%EF%BC%9A%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <url>/wuhlan3/2021/04/13/%E3%80%8A%E5%BC%95%E5%8A%9B%E5%92%8C%E5%AE%87%E5%AE%99%E5%AD%A6%EF%BC%9A%E5%B9%BF%E4%B9%89%E7%9B%B8%E5%AF%B9%E8%AE%BA%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="《引力和宇宙学：广义相对论的原理和应用》读书笔记（一）">《引力和宇宙学：广义相对论的原理和应用》读书笔记（一）</h2><h3 id="作者：二噁英">作者：<a href="https://zhuanlan.zhihu.com/p/355605435?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=681547072679972864&amp;utm_content=group3_article&amp;utm_campaign=shareopn">二噁英</a></h3><p>背景嘛，发现宇宙学方向的课题挺好玩的，而且当前学习阶段用到张量内容也挺多的，就学着玩玩，做专栏以勉励自己吧！翻阅图书馆关于宇宙学的书，，里面40%民科书，50%科普书，正儿八经的的中文教材少得可怜。而图书馆的广义相对论的书也多是老旧书籍，但是这本新出版的《引力与宇宙学》真的让我眼前一亮。在学习这本书的时候，我还会辅以其他的书比如梁老先生的《微分几何与广义相对论》、<em>A First Course in GENERAL RELATIVITY</em> 等，希望能降低学习曲线吧（苦笑），毕竟知识水平有限。</p><blockquote><p>“但是，历史故事构成了紧靠时间之河的一道非常坚固的堡垒，在一定程度上控制着它不可抗拒的流淌和在前间的所作的一切，由于历史的尽力管控，它得以安全合流，不致跌入被遗忘的深渊。”</p><div align="right">——安娜 科穆宁，《阿列克塞传》</div></blockquote><p>翻开书的第一章就看到了这段话，之前常看稚嫩的魔法师做的视频，看到《阿莱克修斯传》出现在第一章扉页，感觉有种现实和想象融为一体的震撼感！</p><p>发完感慨后，直接从第二章开始吧！</p><p><img src="1.png" alt="image-20210413124415963"></p><p>光速是一个常数，取光速为1，做无量纲化，虽然初次接触会有些不适，但是用多了就会习惯区别于SI的量纲。</p><p>牛顿运动定律对伽利略变换不变，但麦克斯韦方程组伽利略变换则会有矛盾。而在洛伦兹变化下，这一矛盾被解决了。</p><p>洛伦兹变换具有如下形式<br>$$<br>x<sup>{'\alpha}=\Lambda</sup>{\alpha}<em>{\beta}x<sup>{\beta}+a</sup>{\alpha} \tag{1}\<br>$$<br>其中 $a^{\alpha}$ 与 $\Lambda^{\alpha}</em>{\beta}$ 为常数，且满足<br>$$<br>\Lambda<sup>{\alpha}_{\gamma}\Lambda</sup>{\beta}<em>{\delta}\eta</em>{\alpha\beta}=\eta_{\gamma\delta}\tag{2}\<br>$$</p><p>其中<br>$$<br>\eta_{\alpha\beta}=\left{ \begin{aligned}  1&amp; &amp; \alpha=\beta\neq0\ -1&amp; &amp; \alpha=\beta=0\ 0&amp;&amp;\alpha\neq\beta\ \end{aligned} \right.\<br>$$<br>$x^0$ 代表时间t。</p><p>定义任一矢量<strong>v</strong>,指标在上 $V^{\alpha}$ 为逆变矢量，指标在下为协变矢量  $V_{\alpha}$，矢量视为一阶张量，则逆变张量和协变张量的定义一致</p><p>任何指标一次在上，一次在下则理解为求和，遍历不同指标。</p><p>如</p><p>$$<br>x<sup>{'\alpha}=\Lambda</sup>{\alpha}<em>{\beta}x<sup>{\beta}+a</sup>{\alpha}=\Lambda<sup>{\alpha}_{0}x_{0}+\Lambda</sup>{\alpha}</em>{1}x_{1}+\Lambda<sup>{\alpha}_{2}x_{2}+\Lambda</sup>{\alpha}<em>{3}x</em>{3}+a_{\alpha} \<br>$$<br>洛伦兹变换的重要标志是它保持固有时不变</p><p>$$<br>d \tau^{2}=d t<sup>{2}-\sum_{i}dx_{i}</sup>{2}=-\eta_{\alpha\beta}dx<sup>{\alpha}dx</sup>{\beta}\tag{3}\<br>$$<br>洛伦兹变换后的固有时</p><p>$$<br>d\tau<sup>{'2}=-\eta_{\alpha\beta}\Lambda</sup>{\alpha}_{\gamma}\Lambda<sup>{\beta}_{\delta}dx</sup>{\gamma}dx<sup>{\delta}=-\eta_{\gamma\delta}dx</sup>{\gamma}dx<sup>{\delta}=d\tau</sup>{2}\<br>$$<br>固有时的导入解释了光速在全部惯性系中数值相同的现象</p><p>以上内容看起来有点像是逻辑上的循环论证，但是关于狭义相对论的具体导出，在大一力学和电磁学都有导出过几次，这里就不再赘述。</p><p>我们假定一个观测者在O观测到一个粒子静止，而在 $O’$ 中以V的速度运动<br>$$<br>dx<sup>{'\alpha}=\Lambda</sup>{\alpha}<em>{0}dx^{0}\  dt<sup>{'}=\Lambda</sup>{\alpha}</em>{0}dt<br>$$<br>注意到 $dt=dx^0$ 做个简单的除法会有<br>$$<br>v_{i}\Lambda<sup>{0}_{0}=\Lambda</sup>{i}_{0}\tag{4}\<br>$$<br>(2)式取$\gamma和{\delta}$为0会有</p><p>$$<br>\Lambda_{0}<sup>{\alpha}\Lambda</sup>{\beta}<em>{0}\eta</em>{\alpha\beta}=\sum_{i=1,2,3}(\Lambda<sup>{i}_{0})</sup>{2}-(\Lambda<sup>{0}_{0})</sup>{2}=-1\<br>$$<br>代入(4)式，会有</p><p>$$<br>\begin{align} \Lambda<sup>{0}_{0}=\frac{1}{\sqrt{1-v</sup>{2}}}\ \Lambda<sup>{i}_{0}=\frac{v_{i}}{\sqrt{1-v</sup>{2}}}\ \end{align}\<br>$$<br>定义 $\gamma=\frac{1}{\sqrt{1-v^{2}}}$ ,我们就导出了洛伦兹变换群的一点特征。</p><p>正其次的洛伦兹变换有子群是由转动构成的。 $\Lambda^{\alpha}_{\beta}$ 把一个粒子从静止变为速度v，则有任意转动矩阵R使粒子由静止变为速度v</p><p>我们会有<br>$$<br>\begin{align} \Lambda<sup>{i}_{j}&amp;=\delta_{ij}+v_{i}v_{j}\frac{(\gamma-1)}{v</sup>{2}}\ \Lambda^{0}<em>{j}&amp;=\gamma v</em>{j} \end{align}\<br>$$<br>我们考虑一个只沿x方向的粒子<br>$$<br>\Lambda = \left(<br>\begin{array}{l}<br>\gamma&amp;{\gamma}v&amp;0&amp;0\<br>{\gamma}v&amp;{\gamma}&amp;0&amp;0\<br>0&amp;0&amp;1&amp;0\<br>0&amp;0&amp;0&amp;1<br>\end{array}<br>\right)<br>$$<br>先引入能量-动量四维矢量<br>$$<br>p<sup>{\alpha}=m\frac{dx</sup>{\alpha}}{d\tau}\tag{5}<br>$$<br>牛二可以写成<br>$$<br>\frac{dp<sup>{\alpha}}{d\tau}=f</sup>{\alpha}\<br>$$</p><p>$$<br>p^{\alpha}空间分量构成空间动量 \p=m\gamma v<br>$$</p><p>$$<br>p^{\alpha}的时间分量即为能量\ p^{0}=m\gamma<br>$$</p><p>$$<br>E(p)=\sqrt{p<sup>{2}c</sup>{2}+m<sup>{2}c</sup>{4}}\<br>$$</p><p>对于无质量粒子来说 $E=pc$</p><p>注意到(5)式，有<br>$$<br>\eta_{\alpha\beta}p<sup>{\alpha}p</sup>{\beta}=-m^{2}<br>$$<br>由能量-动量四维矢量，引出其密度和流密度<br>$$<br>T<sup>{\alpha\beta}(x)=\sum_{n}p_{n}</sup>{\alpha}\frac{dx_{n}<sup>{\beta}}{dt}\delta</sup>{3}(x-x_n(t))\tag{6}\<br>$$<br>由 $p_{n}<sup>{\beta}=E_{n}v_{n}</sup>\beta$ (6)可以写成<br>$$<br>T<sup>{\alpha\beta}(x)=\sum_{n}\frac{p_{n}</sup>{\alpha}p_{n}<sup>{\beta}}{E_n}\delta</sup>{3}(x-x_n(t))\<br>$$<br>导出力密度<br>$$<br>\frac{\partial}{\partial x<sup>\beta}T</sup>{\alpha\beta}=G^{\alpha}\<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>友情栏目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验3：开发独立内核的操作系统</title>
    <link href="/wuhlan3/2021/04/10/%E5%AE%9E%E9%AA%8C3%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8B%AC%E7%AB%8B%E5%86%85%E6%A0%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/wuhlan3/2021/04/10/%E5%AE%9E%E9%AA%8C3%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8B%AC%E7%AB%8B%E5%86%85%E6%A0%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1>实验3：开发独立内核的操作系统</h1><h3 id="实验要求">实验要求</h3><ol><li>寻找或测试一套匹配的汇编与c编译器组合。利用c编译器，将一个样板C程序进行编译，获得符号列表文档，分析全局变量、局部变量、变量初始化、函数调用、参数传递情况，确定一种匹配的汇编语言工具，在实验报告中描述这些工作。</li><li>写一个汇编程和c程序混合编程实例，展示你所用的这套组合环境的使用。汇编模块中定义一个字符串，调用C语言的函数，统计其中某个字符出现的次数（函数返回），汇编模块显示统计结果。执行程序可以在DOS中运行。</li><li>重写实验二程序，实验二的的监控程序从引导程序分离独立，生成一个COM格式程序的独立内核，在1.44MB软盘映像中，保存到特定的几个扇区。利用汇编程和c程序混合编程监控程序命令保留原有程序功能，如可以按操作选择，执行一个或几个用户程序、加载用户程序和返回监控程序；执行完一个用户程序后，可以执行下一个。</li><li>利用汇编程和c程序混合编程的优势，多用c语言扩展监控程序命令处理能力。</li><li>重写引导程序，加载COM格式程序的独立内核。</li><li>拓展自己的软件项目管理目录，管理实验项目相关文档</li></ol><p><img src="00.png" alt="image-20210413134036722"></p><h3 id="实验环境">实验环境</h3><h5 id="1-系统与虚拟机">1.系统与虚拟机</h5><ul><li>Windows 10 - x64 18363.1139</li><li>VMware Workstation 16 Player：用于跑ubuntu虚拟机</li><li>Ubuntu 20.04.2 LTS</li><li>VirtualBox-6.1.18-142142-Win：用于运行.img文件</li><li>DOSBox DOS Emulator 0,74,0,0：用于tcc和tasm编译，并且运行.com文件</li></ul><h5 id="2-windows上的相关软件、编译器等">2.windows上的相关软件、编译器等</h5><ul><li>NASM version 2.10.07 compiled on Jan  2 2013</li><li>TCC.EXE：用于16位C语言编程</li><li>TLINK.EXE：用于C语言与汇编语言链接</li><li>TASM.EXE：用于.asm文件的汇编</li></ul><h5 id="3-Ubuntu上的相关软件、编译器等">3.Ubuntu上的相关软件、编译器等</h5><ul><li>NASM version 2.14.02</li><li>makefile：GNU Make 4.2.1</li></ul><h3 id="实验前置知识">实验前置知识</h3><h5 id="1-汇编调用C中的函数与变量">1.汇编调用C中的函数与变量</h5><ul><li><p>在C语言中要把相关变量和函数定义在全局之中；</p></li><li><p>在汇编中要把调用的函数名与变量编程这样的形式<code>extrn _a</code>（加入了extrn和下划线），这是因为C语言在汇编后，会自动在所有变量名前面添加下划线，这可以使程序员不必为了变量名可能重名而小心翼翼。</p></li></ul><h5 id="2-C调用汇编中的函数与变量">2.C调用汇编中的函数与变量</h5><ul><li>汇编的所有函数名前面需要添加下划线，并且使用public来声明使变量成为全局变量</li><li>在C语言中使用extern来声明调用的函数，如<code>extern int sum(int a, int b);</code></li></ul><h3 id="实验过程">实验过程</h3><h4 id="1-掌握编译方法（tcc-tasm-tlink）">1.掌握编译方法（tcc+tasm+tlink）</h4><p>由于tcc和tasm都是16位的，它们无法在windows或linux下运行，所以我们需要在dosbox下编译和链接。</p><p>编译的命令主要是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcc -mt -c -oupper.obj upper.c &gt; ccmsg.txt<br>tasm showstr.asm showstr.obj &gt; amsg.txt<br>tlink /3 /t showstr.obj upper.obj, showstr.com,,<br></code></pre></td></tr></table></figure><p>当然，也有批处理的方式（老师提供的文件中有这几个写好的文件）：</p><p><img src="0" alt="image-20210408194105037"></p><p>打开文件，可以看到运行方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ta showstr<br>tc upper<br>tl showstr upper<br></code></pre></td></tr></table></figure><p><img src="1.png" alt="image-20210408194341220"></p><p><img src="2.png" alt="image-20210408194405268"></p><p><img src="3.png" alt="image-20210408194656964"></p><p>可以看到在这个过程中，C程序编译生成.obj文件，asm文件汇编生成.obj文件，再通过tlink将两个.obj文件链接成.com文件。最终运行结果正确，字符串中的所有字符从小写转为大写。</p><h4 id="2-写一个汇编程序和c程序混合编程实例">2.写一个汇编程序和c程序混合编程实例</h4><p>由于考虑到在后续的实验过程中我还会需要用到各种函数。并且我猜想，如果把所有IO操作/程序调用的相关函数准备好，以C语言作为主要的编程语言，我将可以非常轻松的完成自己的操作系统。</p><p>我的<strong>monitor.asm</strong>文件如下，它的主要功能是准备好各种全局变量，比如字符串Message，调用准备好的asm函数库，并且在程序运行后，立刻跳入我的mymain函数中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs asm">extrn _mymain:near<br>public _Message<br>.8086<br>_TEXT segment byte public &#x27;CODE&#x27;<br>DGROUP group _TEXT,_DATA,_BSS<br>       assume cs:_TEXT<br>org 100h<br>start:<br>    mov ax,cs<br>    mov ds,ax; DS = CS<br>    mov es,ax; ES = CS<br>    mov ss,ax; SS = cs<br>    call near ptr _mymain ;跳入C里的mymain函数<br>  jmp $    <br>    include asm_lib.asm;调用汇编函数库<br>_datadef:<br>    _Message db &#x27;WuHaolan 19335209 WuHaolan 19335209  &#x27;,0;一个全局定义的字符串<br>_TEXT ends<br>;************DATA segment*************<br>_DATA segment word public &#x27;DATA&#x27;<br>_DATA ends<br>;*************BSS segment*************<br>_BSS    segment word public &#x27;BSS&#x27;<br>_BSS ends<br>;**************end of file***********<br>end start<br><br></code></pre></td></tr></table></figure><p>汇编函数库<strong>asm_lib.asm</strong>中，只写了一个字符输出的函数。（具体的相关内容我会在后文解释）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asm">;输出字符<br>public _printChar<br>_printChar proc <br>    push bp<br>    mov bp,sp<br>    mov al,[bp+4]<br>    mov bl,0<br>    mov ah,0eh<br>    int 10h<br>    mov sp,bp<br>    pop bp<br>    ret<br>_printChar endp<br></code></pre></td></tr></table></figure><p>C语言函数库<strong>main.c</strong>中，准备了字符串输出函数<code>print_str(char * str)</code>，数字输出函数<code>print_int(int num)</code>，小写转大写函数<code>upper()</code>，统计字符串中的&quot;a&quot;的数量的函数<code>word_cnt(char* str)</code>，主函数<code>mymain()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> Message[];<br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title">printChar</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span>;    <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">upper</span>()&#123;<br>   <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span>(Message[i]) &#123;<br>     <span class="hljs-keyword">if</span> (Message[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;Message[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)  <br>      Message[i]=Message[i]+<span class="hljs-string">&#x27;A&#x27;</span>-<span class="hljs-string">&#x27;a&#x27;</span>;<br>      i++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(str[i])&#123;<br>        <span class="hljs-built_in">printChar</span>(str[i]);<br>        i++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_int</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>        buf[i] = num % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        num = num / <span class="hljs-number">10</span>;<br>        i++;<br>    &#125;<br>    buf[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (i = i<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-built_in">printChar</span>(buf[i]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">word_cnt</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(str[i])&#123;<br>        <span class="hljs-keyword">if</span>(str[i] == <span class="hljs-string">&#x27;a&#x27;</span>)&#123;<br>            cnt++;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-built_in">print_int</span>(cnt);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mymain</span><span class="hljs-params">( )</span></span>&#123;<br>    <span class="hljs-built_in">print_str</span>(Message);<br>    <span class="hljs-built_in">word_cnt</span>(Message);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如图，可以看到，字符串<code>&quot;WuHaolan 19335209 WuHaolan 19335209  &quot;</code>中，总共有4个<code>'a'</code>，结果正确</p><p><img src="4.png" alt="image-20210408231153207"></p><h4 id="3-生成一个COM格式程序的独立内核">3.生成一个COM格式程序的独立内核</h4><p>基本架构：</p><ul><li>内核：MONITOR.COM由monitor.asm + main.c + asm_lib.asm 构成。</li><li>引导程序：loader.asm</li><li>开机图标：startOS.asm</li><li>用户程序：1.asm 2.asm 3.asm 4.asm</li></ul><p>接下来我将按顺序分别说明每个程序：</p><p>（1）monitor.asm的作用更像是一个桥，他起到连接C中的主函数、C函数库与汇编函数库的作用。使用<code>call</code>直接进入C函数，这是因为我对于tasm语法不够熟悉（这种上古级汇编语言），能找到相关的资料也有限。我不希望花太多功夫在汇编程序上，使用C语言来编程，我会更将轻松一些。使用<code>include</code>可以引入在另一个文件里的汇编函数库asm_lib.asm，分开文件来编写，会更加清晰一些。在最后只需要对monitor.asm和main.c进行编译即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs asm">extrn _mymain:near<br><br>.8086<br>_TEXT segment byte public &#x27;CODE&#x27;<br>DGROUP group _TEXT,_DATA,_BSS<br>       assume cs:_TEXT<br>org 100h<br>start:<br>    mov ax,cs<br>    mov ds,ax; DS = CS<br>    mov es,ax; ES = CS<br>    mov ss,ax; SS = cs<br>    <br>    call near ptr _mymain ;进入C主程序<br>  jmp $    <br>    include asm_lib.asm ;使用include引用汇编函数库<br>_TEXT ends<br>;************DATA segment*************<br>_DATA segment word public &#x27;DATA&#x27;<br>_DATA ends<br>;*************BSS segment*************<br>_BSS    segment word public &#x27;BSS&#x27;<br>_BSS ends<br>;**************end of file***********<br>end start<br><br></code></pre></td></tr></table></figure><p>（2）asm_lib.asm中包含了一些常用的I/O操作、清屏、将程序导入内存的过程、获取时间的过程。这些过程大都与底层硬件交互有关，在此基础上才能写出C函数库。</p><p>写汇编函数的基本方法是，以<code>函数名+proc</code>为开头，将使用到的关键寄存器<code>push</code>，并在使用后<code>pop</code>，最后<code>ret</code>以返回到调用的代码地址，以<code>函数名+endp</code>为结尾。</p><p>（i）输出一个字符</p><p>使用下述的这种功能号，可以使得输出字符，同时光标会往后移。要怎么寻找到入栈的变量呢？想将栈寄存器sp的值赋给bp，此时栈中已经压入了bp和ip，要想找到新传入的参数ch，就要将bp+4。</p><p><img src="5.png" alt="image-20210410115600056"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _printChar<br>_printChar proc <br>    push bp<br>    mov bp,sp<br>    mov al,[bp+4]   ;ch\ip\bp  通过bp来寻找变量，需要bp+4<br>    mov bl,0;测试过，非图形模式无法改变颜色<br>    mov ah,0eh;功能号0eh teletype模式<br>    int 10h<br>    mov sp,bp<br>    pop bp<br>    ret<br>_printChar endp<br></code></pre></td></tr></table></figure><p>（ii）输入一个字符</p><p>这只是直接获取一个字符，并将其赋值给变量cin。但是想要达成边输入边显示和光标后移的效果，需要在C函数中再做更多的处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">;输入字符<br>public _Readchar<br>_Readchar proc<br>    mov ah,0<br>    int 16h<br>    mov byte ptr [_cin],al;将输入的值赋给cin变量<br>    ret<br>_Readchar endp<br></code></pre></td></tr></table></figure><p>（iii）清屏</p><p>由于使用到的寄存器较多，需要将它们都入栈。调用中断int 10h，进行清屏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _cls<br>_cls proc <br>; 清屏<br>    push ax<br>    push bx<br>    push cx<br>    push dx<br>    movax, 600h; AH = 6,  AL = 0<br>    movbx, 700h; 黑底白字(BL = 7)<br>    movcx, 0; 左上角: (0, 0)<br>    movdx, 184fh; 右下角: (24, 79)<br>    int10h; 显示中断<br><br>    mov ah,2<br>    mov bh,0<br>    mov dx,0<br>    int 10h<br><br>    pop dx<br>    pop cx<br>    pop bx<br>    pop ax<br>    ret<br>_cls endp<br></code></pre></td></tr></table></figure><p>（iv）载入用户程序</p><p>基本结构与实验2中的类似，不再赘述。</p><p>这个函数会传递一个参数，对应的是扇区号。通过bp来寻得该参数，然后将该扇区的代码端加载到内存中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _RunProm<br>_RunProm proc<br>    push ds<br>    push es<br>    push bp<br>    mov bp,sp<br>    mov ax,cs                ;段地址 ; 存放数据的内存基地址<br>    mov es,ax                ;设置段地址（不能直接mov es,段地址）<br>    mov bx, OffSetOfUserPrg  ;偏移地址; 存放数据的内存偏移地址<br>    mov ah,2                 ; 功能号<br>    mov al,1                 ;扇区数<br>    mov dl,0                 ;驱动器号 ; 软盘为0，硬盘和U盘为80H<br>    mov dh,0                 ;磁头号 ; 起始编号为0<br>    mov ch,0                 ;柱面号 ; 起始编号为0<br>    mov cl,[bp+8]            ;起始扇区号 ; 起始编号为1<br>    int 13H ;                调用读磁盘BIOS的13h功能<br>    ; 用户程序a.com已加载到指定内存区域<br>    mov bx,OffSetOfUserPrg <br>    call bx ;执行用户程序<br>    pop bp<br>    pop  es<br>    pop  ds  <br>    ret<br>_RunProm endp<br></code></pre></td></tr></table></figure><p>（v）获取系统时间</p><p>调用BIOS中的<code>int 1ah</code>，功能号<code>02h</code>，可以得到小时、分钟、秒的BCD格式编码。比如现在时14：42：50，得到的数字是（0x14：0x42：0x50）。</p><p><img src="6.png" alt="image-20210410143818187"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asm">public _time<br>_time proc<br>    push ax<br>    push bx<br>    push cx<br>    push dx<br>    <br>    mov ah,02h<br>    int 1ah<br>    mov byte ptr[_h], ch<br>    mov byte ptr[_min], cl<br>    mov byte ptr[_sec], dh<br>    <br>    pop dx<br>    pop cx<br>    pop bx<br>    pop ax<br>    ret<br>_time endp<br></code></pre></td></tr></table></figure><p>（3）main.c中包含了主函数与一些常用的C函数</p><p>该文件中，主要包含了C函数库，与<code>mymain()</code>函数，是整个OS最核心部分</p><p>（i）输出相关函数</p><p>使用汇编函数库中的<code>extern void printChar(char c);</code>，分别写出一个字符串与数字的输出函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">print_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(str[i])&#123;<br>        printChar(str[i]);<br>        i++;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print_int</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(!num)printChar(<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">while</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br>        buf[i] = num % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        num = num / <span class="hljs-number">10</span>;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = i<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>;i--)&#123;<br>        printChar(buf[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（ii）输入函数</p><p>调用readchar来读取一行字符串。由于<code>readchar</code>已经读取的字符存入<code>cin</code>，根据回车键（ASCII码为：13）来判断什么时候输入结束，需要判断用户是否按下退格键（ASCII码为：8），由于退格键的效果只能使得光标后退一个，而不能使字符去除。所以我们可以反复输出空格键和退格键，达成我们习惯的效果。具体过程可看下面代码的注释。</p><p><img src="7.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_str</span><span class="hljs-params">(<span class="hljs-type">char</span>* cin_line)</span></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">Readchar</span>();<br>    <span class="hljs-keyword">while</span>(cin!=<span class="hljs-number">13</span>)&#123;<br>        <span class="hljs-keyword">if</span>(cin==<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-built_in">printChar</span>(cin);    <span class="hljs-comment">//如 abcd， 此时光标在d处</span><br>            <span class="hljs-built_in">printChar</span>(<span class="hljs-number">32</span>);    <span class="hljs-comment">// abc _， 此时光标在空格后面</span><br>            i--;<br>            <span class="hljs-built_in">printChar</span>(cin);    <span class="hljs-comment">// abc_， 再次回退，是光标位于c后面</span><br>            <span class="hljs-built_in">Readchar</span>();<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">printChar</span>(cin);<br>        cin_line[i]=cin;  <br>        i++;<br>        <span class="hljs-built_in">Readchar</span>();<br>    &#125;<br>    cin_line[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（iii）几个字符串处理函数：<code>void word_cnt(char* str, char c );</code>、<code>void upper(char * str);</code>、<code>void lower(char * str);</code>、<code>int isstr_eql(char* a, char* b);</code>，此处不必赘述。</p><p>（iv）输出当前的时间</p><p>根据上述我们得到了时间参数的BCD码，它是十六进制的，所以我们只需要<code>temp= h/16*10 + h%16;</code>，就可以得到十进制的时间。</p><p>吐槽：由于没有给三个变量初始化，我硬是debug了半个小时。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_time</span><span class="hljs-params">()</span></span>&#123;<br>    h = <span class="hljs-number">0</span>;<br>    min = <span class="hljs-number">0</span>;<br>    sec = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">time</span>();<br>    temp= h/<span class="hljs-number">16</span>*<span class="hljs-number">10</span> + h%<span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">print_str</span>(<span class="hljs-string">&quot;00&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp &lt; <span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">printChar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-built_in">print_int</span>(temp);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">print_int</span>(temp);<br>    &#125;<br>    <span class="hljs-built_in">printChar</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br>    temp= min/<span class="hljs-number">16</span>*<span class="hljs-number">10</span> + min%<span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">print_str</span>(<span class="hljs-string">&quot;00&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp &lt; <span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">printChar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-built_in">print_int</span>(temp);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">print_int</span>(temp);<br>    &#125;<br>    <span class="hljs-built_in">printChar</span>(<span class="hljs-string">&#x27;:&#x27;</span>);<br>    temp= sec/<span class="hljs-number">16</span>*<span class="hljs-number">10</span> + sec%<span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">print_str</span>(<span class="hljs-string">&quot;00&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp &lt; <span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-built_in">printChar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-built_in">print_int</span>(temp);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">print_int</span>(temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（v）指令判断函数<code>void get_command(char* str);</code></p><p>根据输入的字符串，进行分支判断是那种指令，如果不存在该指令则输出“非法指令”。</p><p>（vi）主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">mymain</span><span class="hljs-params">( )</span>&#123;<br>    cls();<span class="hljs-comment">//清屏</span><br>    RunProm(<span class="hljs-number">16</span>);<span class="hljs-comment">//跑开机标志的程序</span><br>    start();<span class="hljs-comment">//输入打招呼的语句</span><br>    is_loop = <span class="hljs-number">1</span>;<span class="hljs-comment">//用于判断是否结束循环</span><br>    <span class="hljs-keyword">while</span>(is_loop)&#123;<br>        print_str(<span class="hljs-string">&quot;\r\n&gt;&gt;&gt;&quot;</span>);<br>        get_str(Message);<span class="hljs-comment">//输入命令</span><br>        get_command(Message);<span class="hljs-comment">//执行命令</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（vii）文件目录</p><p>使用了一个结构体来储存文件信息，并且有函数可以直接输出所有文件信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fileContent</span>&#123;<br>    <span class="hljs-type">char</span> filename[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> filesize[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">char</span> filesector[<span class="hljs-number">10</span>];<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fileContent</span> content[<span class="hljs-number">5</span>]=&#123;<br>    &#123;<span class="hljs-string">&quot;1.bin&quot;</span> , <span class="hljs-string">&quot;401 bytes&quot;</span>, <span class="hljs-string">&quot;sec 12&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;2.bin&quot;</span> , <span class="hljs-string">&quot;348 bytes&quot;</span>, <span class="hljs-string">&quot;sec 13&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;3.bin&quot;</span> , <span class="hljs-string">&quot;365 bytes&quot;</span>, <span class="hljs-string">&quot;sec 14&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;4.bin&quot;</span> , <span class="hljs-string">&quot;401 bytes&quot;</span>, <span class="hljs-string">&quot;sec 15&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;startOS.bin&quot;</span> , <span class="hljs-string">&quot;512 bytes&quot;</span>, <span class="hljs-string">&quot;sec 16&quot;</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(isstr_eql(str,<span class="hljs-string">&quot;list&quot;</span>))&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i ++)&#123;<br>            print_str(content[i].filename);<br>            printChar(<span class="hljs-string">&#x27;  &#x27;</span>);<br>            print_str(content[i].filesize);<br>            printChar(<span class="hljs-string">&#x27;  &#x27;</span>);<br>            print_str(content[i].filesector);<br>            print_str(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>（4）引导程序loader.asm，主要作用是当虚拟机开启的时候，立刻跳转到内核文件。所以需要<code>org 7c00h</code>，以便开机执行。然后把从扇区中将内核程序载入到内存中，控制权交给内核。注意：需要确保512B的大小，并且以<code>55aa</code>结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asm">org  7c00h        ; BIOS将把引导扇区加载到0:7C00h处，并开始执行<br>OS_offset equ 0A100h<br><br>ReadOs:<br>    mov ax,cs                ;段地址 ; 存放数据的内存基地址<br>    mov es,ax                ;设置段地址（不能直接mov es,段地址）<br>    mov bx, OS_offset   <br>    mov ah,2                 ;功能号<br>    mov al,5                 ;扇区数，内核占用扇区数  注意：不止加载了一个扇区<br>    mov dl,0                 ;驱动器号 ; 软盘为0，硬盘和U盘为80H<br>    mov dh,0                 ;磁头号 ; 起始编号为0<br>    mov ch,0                 ;柱面号 ; 起始编号为0<br>    mov cl,2                 ;2号扇区存放的是内核程序<br>    int 13H                  ;调用读磁盘BIOS的13h功能<br>    jmp 0a00h:100h            <br><br>times 510 - ($ - $$) db 0 <br>db 0x55<br>db 0xaa<br></code></pre></td></tr></table></figure><p>（5）StartOS.asm，是开机显示标志的程序</p><p>考虑到Windows和Linux开机都会由一段动画。我也决定做一个，但是做出动态的动画要花更多的时间，所以我制作了一个标志，这样能够使大家对我的操作系统印象更加深刻。</p><p>使用了三次清屏过程，来达成显示三个不同颜色框框的效果。将几行文字输出，并且仿照老师最初给的程序，使用两个延时器，达成延迟的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs asm">    delay equ 50000                <br>    ddelay equ 35000                                <br>org 8c00h<br>start:<br>    xor ax,ax; AX = 0   程序加载到0000：100h才能正确执行<br>    mov ax,cs                    ; 开机这些寄存器都为0<br>    mov es,ax; ES = 0<br>    mov ds,ax; DS = CS<br>    mov es,ax; ES = CS<br>    movax,0B800h; 文本窗口显存起始地址<br>    movgs,ax; GS = B800h<br><br>    mov ah,6;清屏成蓝色 显示在显示屏幕中部<br>    mov al,0 ;0全屏幕为空白<br>    <br>    mov ch,4 ;左上角行号<br>    mov cl,14 ;左上角列号<br>    mov dh,20;右下角行号<br>    mov dl,66;右下角列号<br>    mov bh,00010010b;蓝色 00010010<br>    int 10h<br>    <br>    mov ch,5             ;左上角行号<br>    mov cl,18 ;左上角列号<br>    mov dh,19;右下角行号<br>    mov dl,62;右下角列号<br>    mov bh,00110010b;青色 00110010<br>    int 10h<br>    <br>    mov ch,6             ;左上角行号<br>    mov cl,22 ;左上角列号<br>    mov dh,18;右下角行号<br>    mov dl,58;右下角列号<br>    mov bh,00100010b;绿色 00100010<br>    <br>    int 10h<br>print:<br>    mov cx,11<br>    mov ax,str0<br>    mov si,ax<br>    mov bp,1172    <br>loop1:<br>    push cx<br>    mov cx,29 <br>    <br>loop2:    <br>    mov ah,0fh<br>    mov al,[si]               <br>    mov word[gs:bp],ax<br>    inc si<br>    add bp,2<br>    sub cx,1<br>    jnz loop2<br>    add bp,102<br>    pop cx<br>    sub cx,1   <br>    jnz loop1<br>loop3:                            ;延迟<br>    dec word[count]             ; 递减计数变量<br>    jnz loop3                   ; &gt;0：跳转;<br>    mov word[count],delay       ;延时<br><br>    dec word[dcount]            ; 递减计数变量<br>    jnz loop3<br>    mov word[count],delay<br>    mov word[dcount],ddelay     ;延时<br><br>return: <br>    ret<br><br>datadef:            <br>   str0 db  &quot; --------------------------- &quot;<br>        db  &quot; |            *     *      | &quot;<br>        db  &quot; |          ***********    | &quot;<br>        db  &quot; |    ***      *   *       | &quot;<br>        db  &quot; |   *   *   *********     | &quot;<br>        db  &quot; |   *   *  *    *    *    | &quot;<br>        db  &quot; |    ***   ***********    | &quot;<br>        db  &quot; |          *    *    *    | &quot;<br>        db  &quot; |           *********     | &quot;<br>        db  &quot; --------------------------- &quot;<br>        db  &quot;        Wuhlan3&#x27;s OS!        &quot;<br>    count dw delay<br>    dcount dw ddelay<br>times 512 - ($ - $$) db 0 <br></code></pre></td></tr></table></figure><p>（6）4个用户程序，由于只做了一定的修改，便不在此处放出来了。关于如何返回内核程序，会在下文提及。</p><h4 id="4-将所有文件进行编译，并写入软盘">4.将所有文件进行编译，并写入软盘</h4><p>回想起实验二中，为了写盘，每一次修改程序，都需要使用软件Winhex，来注意复制二进制文件再粘贴。实在太浪费时间了！！！“写程序一分钟，编译五分钟”。</p><p>因此，这次学习了一下makefile，并结合linux中的创建软盘功能，子啊Ubuntu中进行编译与写盘。</p><p>由于.com程序已经再dosbox中编译成功，所以只需要对所有.asm文件使用nasm进行编译。生成一个1.44MB的软盘，将所有的文件写入相应的扇区之中。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile">BIN = loader.bin startOS.bin 1.bin 2.bin 3.bin 4.bin<br>IMG = wuhlan.img<br><span class="hljs-section">all: clear <span class="hljs-variable">$(BIN)</span> <span class="hljs-variable">$(IMG)</span></span><br><span class="hljs-section">clear:</span><br>    rm -f <span class="hljs-variable">$(BIN)</span> <span class="hljs-variable">$(IMG)</span><br><span class="hljs-section">%.bin: %.asm</span><br>    nasm -fbin <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><span class="hljs-section">%.img:</span><br>    /sbin/mkfs.msdos -C <span class="hljs-variable">$@</span> 1440<br>    dd if=loader.bin of=<span class="hljs-variable">$@</span> conv=notrunc<br>    dd if=MONITOR.COM of=<span class="hljs-variable">$@</span> seek=1 conv=notrunc<br>    dd if=1.bin of=<span class="hljs-variable">$@</span> seek=11 conv=notrunc<br>    dd if=2.bin of=<span class="hljs-variable">$@</span> seek=12 conv=notrunc<br>    dd if=4.bin of=<span class="hljs-variable">$@</span> seek=13 conv=notrunc<br>    dd if=3.bin of=<span class="hljs-variable">$@</span> seek=14 conv=notrunc<br>    dd if=startOS.bin of=<span class="hljs-variable">$@</span> seek=15 conv=notrunc<br></code></pre></td></tr></table></figure><h3 id="实验结果">实验结果</h3><p>开机标志：</p><p><img src="8.png" alt=""></p><p>help：</p><p><img src="9.png" alt=""></p><p>time/upper/wordcnt/list</p><p><img src="10.png" alt="image-20210410163703788"></p><p>用户程序，以1.bin为例</p><p><img src="11.png" alt="image-20210410163753431"></p><h3 id="问题与解决方式">问题与解决方式</h3><ol><li>使用gcc+nasm的编译和链接方式的时候，打印出来的字符始终为AaBbCcDdEe，小写转换为大写的函数没有发挥作用。与同学交流后无果，最终还是选择使用tcc+tasm的编译和链接方式。</li></ol><img src="12.png" alt="image-20210406194248993" style="zoom: 67%;" /><ol start="2"><li><p>我实在厌恶了每次打开dosbox都要mount，浪费时间！！！！！！！</p><p>可以在这个路径下的文件中添加几行命令，每次打开dosbox都会自动mount到指定路径，甚至可以将所需工具添加到环境变量中。这将大大提高开发效率！！！</p><img src="13.png" alt="image-20210408200911202" style="zoom: 40%;" /><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mount c: C:\Users\administrator\Desktop<br><span class="hljs-function">c:</span><br><span class="hljs-function"><span class="hljs-title">cd</span> <span class="hljs-title">newos</span></span><br></code></pre></td></tr></table></figure></li><li><p>如何加快dosbox中的编译的速度呢？</p><p>仿照老师提供的几个bat文件，我们也可以自己写出一个bat文件，它将会一键达成编译链接的所有过程.</p><p>这也将大大提高开发效率！！！</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">del</span> *.obj<br><span class="hljs-built_in">del</span> *.com<br>tcc -mt -c -oupper.obj upper.c &gt; ccmsg.txt<br>tasm showstr.asm showstr.obj &gt; amsg.txt<br>tlink /<span class="hljs-number">3</span> /t showstr.obj upper.obj, showstr.com,,<br></code></pre></td></tr></table></figure></li><li><p>如何从用户程序返回到内核呢？</p><p>本以为直接使用jmp就可以再内核和用户程序之间相互跳转。但是，实际上并不行。经过上网查阅了，很可能是用户程序准备返回的时候，ds与cs寄存器的值被修改了，导致程序运行错误。</p><p>我再尝试了一下使用call 和 ret的组合，结果成功了。</p></li><li><p>发现了一些有趣的玄学问题。</p><p><img src="14.png" alt="image-20210410104746249"></p><p>制表符<code>'\t'</code>或者<code>tab</code>会在virtualbox中显示小圈圈，无法起到制表的效果，但是在dosbox中显示正常</p></li><li><p>C程序中竟然不能有任何的注释，无论是中文还是英文。</p><p>一种可能性应该是tcc并不支持将所有的注释自动删除！！！</p></li></ol><h3 id="创新性工作">创新性工作</h3><ol><li>增加了一个获取系统时间的函数。这里需要查找BIOS中的相应功能号，并且理解BCD码的传递方式</li><li>学习了dosbox的挂载和批处理方式，提高工作效率</li><li>学习写makefile，可以一键完成编译与写盘工作</li><li>添加了一个开机显示标志，使得系统更加完整，并且学习了如何绘画出好看图案（可惜提供的颜色太少了）</li></ol><h3 id="实验总结">实验总结</h3><p>本次实验花了非常多的时间。整个过程是非常绝望的，因为可以说在最开始地七天，毫无进展。哪怕是同学们也都没有找到一个明确的方向。其中仅仅是为了把环境和编译方式确定下来就花了超过一周的时间，而且同学们在q群里也讨论无果。在gcc+nasm+ld这种编译方式，实在反人类，把所有可能性都尝试过了，最后还是失败了。但是转去使用tcc+tasm+tl的组合后，竟然很快就成功了！</p><p>当所有环境和编译方式确定好后，一切就都势如破竹了。接下来就是更深刻地理解汇编语言与C语言之间是如何相互调用的，如何调用用户程序、如何从用户程序返回内核。</p><p>当使用汇编语言写好函数库之后，我们就可以直接进行输入与输出。接下来80%的步骤都只需要使用C语言实现，立刻就变成重复性和细节性的工作。为了能使自己的操作系统与别人与众不同一些，我制作了一个开机就显示的图标，能使人印象更加深刻。</p><p>当然，还有一些问题没有解决，比如C语言当我写道大概230行的时候，我发现再继续写一些字符串处理的函数，就有可能出错！！！（开机之后的个人信息，显示失败）因此，本来写了一个显示系统日期的函数，最后只能删除掉，确保程序不会出错。具体原因呢，我猜想与存放字符串的空间已满有关。希望在后面的实验中，如果再次遇到这个问题，我能解决掉。</p><p>可以说，整个实验过程是大起大落。从完全的黑暗——可能不到一丝希望，到稍微有点起色，就开始疯狂爆肝。怎么说呢，最终看着自己的成果，还是非常开心的！</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网实验——套接字程序设计</title>
    <link href="/wuhlan3/2021/03/11/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E5%A5%97%E6%8E%A5%E5%AD%97%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/wuhlan3/2021/03/11/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E5%A5%97%E6%8E%A5%E5%AD%97%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1>计网实验——套接字程序设计</h1><h2 id="遇到的问题">遇到的问题</h2><h3 id="问题一：">问题一：</h3><p><strong>inet_addr在高版本的VS中不能使用</strong></p><p>网络上给出解决方法是:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">项目</span><span class="hljs-literal">----</span><span class="hljs-comment">项目属性</span><span class="hljs-literal">----</span><span class="hljs-comment">c/c</span><span class="hljs-literal">++----</span><span class="hljs-comment">常规</span><span class="hljs-literal">----</span><span class="hljs-comment">SDL检查改为“否”</span><br></code></pre></td></tr></table></figure><p>但是发现还是不行，另外的解决方法是：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">项目</span><span class="hljs-literal">----</span><span class="hljs-comment">项目属性</span><span class="hljs-literal">----</span><span class="hljs-comment">c/c</span><span class="hljs-literal">++----</span><span class="hljs-comment">常规</span><span class="hljs-literal">----</span><span class="hljs-comment">将SDL检查后面的项完全删去</span><br></code></pre></td></tr></table></figure><h3 id="问题二：">问题二：</h3><p><strong>ctime: This function or variable may be unsafe</strong></p><p>解决方法：（貌似，其实问题一解决了，问题二也就不存在了）</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">属性————预处理器————预处理器定义————添加“<span class="hljs-variable">_CRT_SECURE_NO_WARNINGS</span>”<br></code></pre></td></tr></table></figure><img src="image-20210311202014450.png" alt="image-20210311202014450" style="zoom: 33%;" /><img src="image-20210311202043133.png" alt="image-20210311202043133" style="zoom:50%;" /><h3 id="问题三：">问题三：</h3><p><strong>字符串与char*的冲突</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* p = <span class="hljs-string">&quot;abc&quot;</span>;　　<span class="hljs-comment">// valid in C, invalid in C++</span><br></code></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span>* p = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;abc&quot;</span>;  <span class="hljs-comment">// OK</span><br><span class="hljs-type">char</span> <span class="hljs-type">const</span> *p = <span class="hljs-string">&quot;abc&quot;</span>;　　<span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><h3 id="问题四：">问题四：</h3><p><strong>运行客户端程序而不运行服务器程序会出现什么错误</strong></p><p><img src="wps1.jpg" alt="img"></p><p>Error:10057即,connect 尝试连接时连接不通立即返回</p><p>解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> ret = connect(sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));  <span class="hljs-comment">// 连接到服务器，第二个参数指向存放服务器地址的结构，第三个参数为该结构的大小，返回值为0时表示无错误发生，返回SOCKET_ERROR表示出错，应用程序可通过WSAGetLastError()获取相应错误代码。</span><br>    <span class="hljs-comment">/*如果没有成功连接到服务器,则ret == -1*/</span><br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有成功连接到服务器.\n&quot;</span>);<br>        closesocket(sock);<br>        WSACleanup();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="问题五：">问题五：</h3><p><strong>服务器如何可以退出循环？</strong></p><p>当接收到exit消息的时候，服务器与客户端同时关闭。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;exit&quot;</span>)) &#123;<br>            (<span class="hljs-type">void</span>)<span class="hljs-built_in">closesocket</span>(ssock);                              <span class="hljs-comment">// 关闭连接套接字</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器已关闭！！！\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><img src="wps3.jpg" alt="img" style="zoom:90%;"/><h2 id="前置知识的学习">前置知识的学习</h2><p>结构体<code>sockaddr_in</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span>&#123;</span><br> <br><span class="hljs-type">short</span> sin_family;            <span class="hljs-comment">/*Address family一般来说AF_INET（地址族）PF_INET（协议族）*/</span><br> <br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> sin_port;    <span class="hljs-comment">/*端口号 Port number(必须要采用网络数据格式,普通数字可以用htons()函数转换成网络数据格式的数字) */</span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span>    <span class="hljs-comment">/*IP address in network byte order（Internet address）可以用来表示一个32位的IPv4地址，其字节顺序为网络顺序（network byte ordered)，即该无符号整数采用大端字节序*/</span><br> <br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sin_zero[<span class="hljs-number">8</span>];    <span class="hljs-comment">/*Same size as struct sockaddr没有实际意义,只是为了　跟SOCKADDR结构在内存中对齐 */</span><br> <br>&#125;;    <span class="hljs-comment">//总字节数：2 + 2 + 4 + 8 = 16</span><br></code></pre></td></tr></table></figure><p>上述结构体中的结构体<code>in_addr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> &#123;</span><br>  <span class="hljs-type">in_addr_t</span> s_addr;<span class="hljs-comment">/*in_addr_t 一般为 32位的unsigned int，其字节顺序为网络顺序（network byte ordered)，即该无符号整数采用大端字节序</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">其中每8位代表一个IP地址位中的一个数值.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">例如192.168.3.144记为0x9003a8c0,其中 c0 为192 ,a8 为 168, 03 为 3 , 90 为 144</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">打印的时候可以调用inet_ntoa()函数将其转换为char *类型.*/</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="作业实现">作业实现</h2><p>客户端：</p><p><img src="image-20210312173653068.png" alt="image-20210312173653068"></p><p>服务器：</p><p><img src="wps4.jpg" alt="img"></p><h2 id="TCP程序设计">TCP程序设计</h2><h3 id="编写TCP-client-Echo程序">编写TCP_client_Echo程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* TCPClient.cpp */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    BUFLEN2000                  <span class="hljs-comment">// 缓冲区大小</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WSVERS        MAKEWORD(2, 0)        <span class="hljs-comment">// 指明版本2.0 </span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)         <span class="hljs-comment">// 使用winsock 2.0 Llibrary</span></span><br><br><span class="hljs-comment">/*------------------------------------------------------------------------</span><br><span class="hljs-comment"> * main - TCP client for TIME service</span><br><span class="hljs-comment"> *------------------------------------------------------------------------</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    <span class="hljs-type">char</span>* host = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;127.0.0.1&quot;</span>;        <span class="hljs-comment">/* server IP to connect         */</span><br>    <span class="hljs-type">char</span>* service = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;50500&quot;</span>;          <span class="hljs-comment">/* server port to connect       */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span>                <span class="hljs-comment">/* an Internet endpoint address*/</span><br>    <span class="hljs-type">char</span>    buf[BUFLEN + <span class="hljs-number">1</span>];       <span class="hljs-comment">/* buffer for one line of text*/</span><br>    SOCKET    sock;              <span class="hljs-comment">/* socket descriptor    */</span><br>    <span class="hljs-type">int</span>    cc;                    <span class="hljs-comment">/* recv character count    */</span><br><br>    WSADATA wsadata;<br>    WSAStartup(WSVERS, &amp;wsadata);                          <span class="hljs-comment">//加载winsock library。WSVERS为请求的版本，wsadata返回系统实际支持的最高版本</span><br><br>    sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);      <span class="hljs-comment">//创建套接字，参数：因特网协议簇(family)，流套接字，TCP协议</span><br>                                                          <span class="hljs-comment">//返回：要监听套接字的描述符或INVALID_SOCKET</span><br><br>    <span class="hljs-built_in">memset</span>(&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));                          <span class="hljs-comment">// 从&amp;sin开始的长度为sizeof(sin)的内存清0</span><br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;                              <span class="hljs-comment">// 因特网地址簇</span><br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = inet_addr(host);                <span class="hljs-comment">// 设置服务器IP地址(32位)</span><br>    <span class="hljs-built_in">sin</span>.sin_port = htons((u_short)atoi(service));         <span class="hljs-comment">// 设置服务器端口号  </span><br>    <span class="hljs-type">int</span> ret = connect(sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));  <span class="hljs-comment">// 连接到服务器，第二个参数指向存放服务器地址的结构，第三个参数为该结构的大小，返回值为0时表示无错误发生，返回SOCKET_ERROR表示出错，应用程序可通过WSAGetLastError()获取相应错误代码。</span><br>    <span class="hljs-comment">/*如果没有成功连接到服务器,则ret == -1*/</span><br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有成功连接到服务器.\n&quot;</span>);<br>        closesocket(sock);<br>        WSACleanup();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入你要发送的信息：&quot;</span>);<br>    fgets(buf, BUFLEN, <span class="hljs-built_in">stdin</span>);<br>    buf[<span class="hljs-built_in">strlen</span>(buf) - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 把换行符替换为空字符</span><br>    send(sock, buf, <span class="hljs-built_in">strlen</span>(buf) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);      <span class="hljs-comment">// 发送信息，信息末尾不带换行符</span><br>    <span class="hljs-keyword">if</span> (buf[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf,<span class="hljs-string">&quot;exit&quot;</span>))<br>    &#123;<br>        closesocket(sock);<br>        WSACleanup();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-comment">// 用户退出</span><br>    <br>    cc = recv(sock, buf, BUFLEN, <span class="hljs-number">0</span>);                <span class="hljs-comment">// 第二个参数指向缓冲区，第三个参数为缓冲区大小(字节数)，第四个参数一般设置为0，返回值:(&gt;0)接收到的字节数,(=0)对方已关闭,(&lt;0)连接出错</span><br>    <span class="hljs-keyword">if</span> (cc == SOCKET_ERROR)                          <span class="hljs-comment">// 出错。其后必须关闭套接字sock</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %d.\n&quot;</span>, GetLastError());<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cc == <span class="hljs-number">0</span>) &#123;                             <span class="hljs-comment">// 对方正常关闭</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Server closed!&quot;</span>, buf);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cc &gt; <span class="hljs-number">0</span>) &#123;<br>        buf[cc] = <span class="hljs-string">&#x27;\0&#x27;</span>;                           <span class="hljs-comment">// ensure null-termination</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n服务器的echo：\n%s&quot;</span>, buf);                         <span class="hljs-comment">// 显示所接收的字符串</span><br>    &#125;<br>    closesocket(sock);                             <span class="hljs-comment">// 关闭监听套接字</span><br>    WSACleanup();                                  <span class="hljs-comment">// 卸载winsock library</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按回车键继续...&quot;</span>);<br>    getchar();                                        <span class="hljs-comment">// 等待任意按键</span><br>    getchar();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写TCP-server-Echo程序">编写TCP_server_Echo程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* TCPServer.cpp - main */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;conio.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    WSVERSMAKEWORD(2, 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    BUFLEN2000                  <span class="hljs-comment">// 缓冲区大小</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)  <span class="hljs-comment">//使用winsock 2.2 library</span></span><br><span class="hljs-comment">/*------------------------------------------------------------------------</span><br><span class="hljs-comment"> * main - Iterative TCP server for TIME service</span><br><span class="hljs-comment"> *------------------------------------------------------------------------</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br><span class="hljs-comment">/* argc: 命令行参数个数， 例如：C:\&gt; TCPServer 8080</span><br><span class="hljs-comment">                     argc=2 argv[0]=&quot;TCPServer&quot;,argv[1]=&quot;8080&quot; */</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span><span class="hljs-title">sockaddr_in</span> <span class="hljs-title">fsin</span>;</span>    <span class="hljs-comment">/* the from address of a client  */</span><br>    SOCKETmsock, ssock;    <span class="hljs-comment">/* master &amp; slave sockets      */</span><br>    WSADATA wsadata;<br>    <span class="hljs-type">char</span>* service = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;50500&quot;</span>;<span class="hljs-comment">/*要绑定的本地端口*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span>    <span class="hljs-comment">/* an Internet endpoint address*/</span><br>    <span class="hljs-type">int</span>    alen;        <span class="hljs-comment">/* from-address length来源的地址长度        */</span><br>    <span class="hljs-type">char</span>* pts;        <span class="hljs-comment">/* pointer to time string 时间字符串指针       */</span><br>    <span class="hljs-type">time_t</span>now;        <span class="hljs-comment">/* current time 时间变量           */</span><br>    <span class="hljs-type">char</span>buf[BUFLEN + <span class="hljs-number">1</span>];       <span class="hljs-comment">/* buffer for one line of text*/</span><br><br>    WSAStartup(WSVERS, &amp;wsadata);<span class="hljs-comment">// 加载winsock library。WSVERS指明请求使用的版本。wsadata返回系统实际支持的最高版本</span><br>    msock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);<span class="hljs-comment">// 创建套接字，参数：因特网协议簇(family)，流套接字，TCP协议</span><br>                                                        <span class="hljs-comment">// 返回：要监听套接字的描述符或INVALID_SOCKET</span><br><br>    <span class="hljs-built_in">memset</span>(&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));<span class="hljs-comment">// 从&amp;sin开始的长度为sizeof(sin)的内存清0</span><br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<span class="hljs-comment">// 因特网地址簇(INET-Internet)</span><br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = INADDR_ANY;<span class="hljs-comment">// 监听所有(接口的)IP地址。事实上就是0.0.0.0，表示的就是任意IP地址</span><br>    <span class="hljs-built_in">sin</span>.sin_port = htons((u_short)atoi(service));<span class="hljs-comment">// 监听的端口号。atoi--把ascii转化为int，htons--主机序到网络序(host to network，s-short 16位)</span><br>    bind(msock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));  <span class="hljs-comment">// 绑定监听的IP地址和端口号</span><br><br>    listen(msock, <span class="hljs-number">5</span>);                                   <span class="hljs-comment">// 建立长度为5的连接请求队列，并把到来的连接请求加入队列等待处理。</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器启动成功！！！！\n\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!_kbhit()) &#123;                                    <span class="hljs-comment">// 检测是否有按键,如果没有则进入循环体执行</span><br>        alen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr);                         <span class="hljs-comment">// 取到地址结构的长度</span><br>        ssock = accept(msock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;fsin, &amp;alen); <span class="hljs-comment">// 如果在连接请求队列中有连接请求，则接受连接请求并建立连接，返回该连接的套接字，否则，本语句被阻塞直到队列非空。fsin包含客户端IP地址和端口号</span><br>        <span class="hljs-type">int</span> recvlen = recv(ssock, buf, BUFLEN, <span class="hljs-number">0</span>); <span class="hljs-comment">// 接收信息</span><br>        buf[recvlen] = <span class="hljs-string">&#x27;\0&#x27;</span>;                       <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;exit&quot;</span>)) &#123;<br>            (<span class="hljs-type">void</span>)closesocket(ssock);                              <span class="hljs-comment">// 关闭连接套接字</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器已关闭！！！\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        (<span class="hljs-type">void</span>)time(&amp;now);                                      <span class="hljs-comment">// 取得系统时间</span><br>        pts = ctime(&amp;now);                                      <span class="hljs-comment">// 把时间转换为字符串</span><br>        <span class="hljs-type">char</span>temp_buf[BUFLEN + <span class="hljs-number">1</span>];       <span class="hljs-comment">/* buffer for one line of text*/</span><br>        <span class="hljs-built_in">sprintf</span>(temp_buf, <span class="hljs-string">&quot;接收到的信息：%s\n收到的时间：%s\n&quot;</span>, buf, pts);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, temp_buf);<span class="hljs-comment">// </span><br><br>        <span class="hljs-type">int</span> cc = send(ssock, temp_buf, <span class="hljs-built_in">strlen</span>(temp_buf), <span class="hljs-number">0</span>);              <span class="hljs-comment">// 第二个参数指向发送缓冲区，第三个参数为要发送的字节数，第四个参数一般置0，返回值：&gt;=0 实际发送的字节数，0 对方正常关闭，SOCKET_ERROR 出错。</span><br>        <br>        (<span class="hljs-type">void</span>)closesocket(ssock);                              <span class="hljs-comment">// 关闭连接套接字</span><br>    &#125;<br>    (<span class="hljs-type">void</span>)closesocket(msock);                                 <span class="hljs-comment">// 关闭监听套接字</span><br>    WSACleanup();                                             <span class="hljs-comment">// 卸载winsock library</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按回车键继续...&quot;</span>);<br>    getchar();<span class="hljs-comment">// 等待任意按键</span><br>    getchar();<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写TCP-Echo增强程序">编写TCP Echo增强程序</h3><p>只需在原程序的基础上进行稍微的修改：</p><p>要求对<code>sockaddr_in</code>有所理解，且掌握<code>%u</code>、<code>%hu</code>的输出方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">sprintf</span>(temp_buf, <span class="hljs-string">&quot;接收到的信息：%s\n收到的时间：%s客户端的IP地址:%u.%u.%u.%u\n客户端的端口号:%hu\n&quot;</span><br>            , buf<br>            , pts<br>            , fsin.sin_addr.S_un.S_un_b.s_b1<br>            , fsin.sin_addr.S_un.S_un_b.s_b2<br>            , fsin.sin_addr.S_un.S_un_b.s_b3<br>            , fsin.sin_addr.S_un.S_un_b.s_b4<br>            , fsin.sin_port<br>        );<span class="hljs-comment">//输出所有信息</span><br>        <br></code></pre></td></tr></table></figure><h2 id="UDP程序设计">UDP程序设计</h2><h4 id="编写UDP-client程序">编写UDP_client程序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* UDPClient.cpp */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    BUFLEN2000                  <span class="hljs-comment">// 缓冲区大小</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WSVERS        MAKEWORD(2, 2)        <span class="hljs-comment">// 指明版本2.2 </span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)         <span class="hljs-comment">// 加载winsock 2.2 Llibrary</span></span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    <span class="hljs-type">char</span>* host = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;127.0.0.1&quot;</span>;    <span class="hljs-comment">/* server IP to connect         */</span><br>    u_short service = <span class="hljs-number">50500</span>;      <span class="hljs-comment">/* server port to connect       */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">toAddr</span>;</span>        <span class="hljs-comment">/* an Internet endpoint address*/</span><br>    <span class="hljs-type">int</span> toAddrsize = <span class="hljs-keyword">sizeof</span>(toAddr);<br>    <span class="hljs-type">char</span>buf[BUFLEN + <span class="hljs-number">1</span>];       <span class="hljs-comment">/* buffer for one line of text*/</span><br>    SOCKETsock;              <span class="hljs-comment">/* socket descriptor    */</span><br>    <span class="hljs-type">int</span>cc;                    <span class="hljs-comment">/* recv character count    */</span><br>    <span class="hljs-type">char</span>* pts;            <span class="hljs-comment">/* pointer to time string    */</span><br>    <span class="hljs-type">time_t</span>now;            <span class="hljs-comment">/* current time        */</span><br><br>    WSADATA wsadata;<br>    WSAStartup(WSVERS, &amp;wsadata);       <span class="hljs-comment">/* 启动某版本Socket的DLL        */</span><br><br>    sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);<br><br>    <span class="hljs-built_in">memset</span>(&amp;toAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(toAddr));<br>    toAddr.sin_family = AF_INET;<br>    toAddr.sin_port = htons(service);    <span class="hljs-comment">//atoi：把ascii转化为int. htons：主机序(host)转化为网络序(network), s--short</span><br>    toAddr.sin_addr.s_addr = inet_addr(host);           <span class="hljs-comment">//如果host为域名，需要先用函数gethostbyname把域名转化为IP地址</span><br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入你要发送的信息：&quot;</span>);<br>    fgets(buf, BUFLEN, <span class="hljs-built_in">stdin</span>);<br>    buf[<span class="hljs-built_in">strlen</span>(buf) - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    cc = sendto(sock, buf, BUFLEN, <span class="hljs-number">0</span>, (SOCKADDR*)&amp;toAddr, <span class="hljs-keyword">sizeof</span>(toAddr));<br>    <span class="hljs-keyword">if</span> (buf[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;exit&quot;</span>))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器关闭！！！&quot;</span>);<br>        closesocket(sock);<br>        WSACleanup();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-comment">// 用户退出</span><br>    <span class="hljs-keyword">if</span> (cc == SOCKET_ERROR) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送失败，错误号：%d\n&quot;</span>, WSAGetLastError());<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;发送成功!\r\n&quot;</span>);<br>    &#125;<br>    cc = recvfrom(sock, buf, BUFLEN, <span class="hljs-number">0</span>, (SOCKADDR*)&amp;toAddr, &amp;toAddrsize);<br>    buf[cc] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>    closesocket(sock);<br>    WSACleanup();                 <span class="hljs-comment">/* 卸载某版本的DLL */</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键退出...&quot;</span>);<br>    getchar();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写UDP-server程序">编写UDP_server程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* UDPServer.cpp */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;conio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>    BUFLEN2000                   </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WSVERS        MAKEWORD(2, 2)        </span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;ws2_32.lib&quot;</span>)          </span><br><br><span class="hljs-comment">/*------------------------------------------------------------------------</span><br><span class="hljs-comment"> * main - TCP client for DAYTIME service</span><br><span class="hljs-comment"> *------------------------------------------------------------------------</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    <span class="hljs-type">char</span>* host = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;127.0.0.1&quot;</span>;    <span class="hljs-comment">/* server IP Address to connect */</span><br>    <span class="hljs-type">char</span>* service = (<span class="hljs-type">char</span>*)<span class="hljs-string">&quot;50500&quot;</span>;      <span class="hljs-comment">/* server port to connect       */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span>        <span class="hljs-comment">/* an Internet endpoint address*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">from</span>;</span>        <span class="hljs-comment">/* sender address               */</span><br>    <span class="hljs-type">int</span>    fromsize = <span class="hljs-keyword">sizeof</span>(from);<br>    <span class="hljs-type">char</span>   buf[BUFLEN + <span class="hljs-number">1</span>];       <span class="hljs-comment">/* buffer for one line of text*/</span><br>    SOCKETsock;          <span class="hljs-comment">/* socket descriptor    */</span><br>    <span class="hljs-type">int</span>cc;                <span class="hljs-comment">/* recv character count    */</span><br>    <span class="hljs-type">char</span> temp_buf[BUFLEN+<span class="hljs-number">1</span>];<br><br>    WSADATA wsadata;<br>    WSAStartup(WSVERS, &amp;wsadata);   <br>    sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP); <br>    <span class="hljs-built_in">memset</span>(&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));<br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_addr.s_addr = INADDR_ANY;                     <br>    <span class="hljs-built_in">sin</span>.sin_port = htons((u_short)atoi(service));         <br>    bind(sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;<span class="hljs-built_in">sin</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));    <br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器已开启！！！\n\n&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (!_kbhit()) &#123;                                    <br>        cc = recvfrom(sock, buf, BUFLEN, <span class="hljs-number">0</span>, (SOCKADDR*)&amp;from, &amp;fromsize);  <br>        buf[cc] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (buf[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;exit&quot;</span>)) &#123;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;服务器关闭！！！&quot;</span>);<br>            closesocket(sock);<br>            WSACleanup();<br>            getchar();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (cc == SOCKET_ERROR) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;recvfrom() failed; %d\n&quot;</span>, WSAGetLastError());<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cc == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">char</span>* pts;        <span class="hljs-comment">/* pointer to time string 时间字符串指针       */</span><br>            <span class="hljs-type">time_t</span>now;        <span class="hljs-comment">/* current time 时间变量           */</span><br>            (<span class="hljs-type">void</span>)time(&amp;now);                                      <span class="hljs-comment">// 取得系统时间</span><br>            pts = ctime(&amp;now);                                      <span class="hljs-comment">// 把时间转换为字符串</span><br>            <span class="hljs-built_in">sprintf</span>(temp_buf, <span class="hljs-string">&quot;接收到的信息：%s\n收到的时间：%s客户端的IP地址:%u.%u.%u.%u\n客户端的端口号:%hu\n&quot;</span><br>                , buf<br>                , pts<br>                , from.sin_addr.S_un.S_un_b.s_b1<br>                , from.sin_addr.S_un.S_un_b.s_b2<br>                , from.sin_addr.S_un.S_un_b.s_b3<br>                , from.sin_addr.S_un.S_un_b.s_b4<br>                , from.sin_port<br>            );<span class="hljs-comment">//输出所有信息</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, temp_buf);<br>            cc = sendto(sock, temp_buf, BUFLEN, <span class="hljs-number">0</span>, (SOCKADDR*)&amp;from, <span class="hljs-keyword">sizeof</span>(from));<br>        &#125;<br>    &#125;<br>    closesocket(sock);<br>    WSACleanup();                <br>    getchar();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《局外人》读笔</title>
    <link href="/wuhlan3/2021/03/06/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B%E8%AF%BB%E7%AC%94/"/>
    <url>/wuhlan3/2021/03/06/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B%E8%AF%BB%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>这本书描写了一个人——默尔索，一个三十来岁的职员，一个对周遭的一切漠不关心、将自己置身事外的人。</p><p>对于母亲的死，他说出了这样的话：“今天，妈妈死了。也可能是昨天，我不知道。”奔丧过程中，他没有哭，拒绝了看妈妈最后一眼的建议，甚至有着“想到就要上床睡上十二个钟头时心头的喜悦”。在葬礼的第二天，他就开始与新结识的女友游泳、看电影、做爱。面对女友关于爱不爱她的提问，他也认为“这种话毫无意义，但是我还像并不爱她”。</p><p>他应邀和新结识的邻居朋友雷蒙去海边度假，与雷蒙情妇的兄弟结派的几个阿拉伯人相遇，并打了一架。在那之后，默尔索再次一个人去了海滩，结果却在阿拉伯人袭击自己之前，开枪射杀对方。他入狱之后，调查人员得知他在母亲葬礼那天“表现得麻木不仁”，这很可能成为他被判刑的证据——一个没有在妈妈葬礼上哭泣的人，毫无疑问是个冷血动物，残忍的杀人犯。尽管如此，默尔索还是拒绝了说谎话来减刑，因为他确实觉得无所谓，他不想做令他讨厌的事情，哪怕是在生死面前。最终他被斩首示众，面对死亡他发出了生命中最后的呐喊：</p><blockquote><p>我也一样，我也感到准备好，把一切从头来过。好像这场勃然的怒火净除了我精神上的痛苦，也清空了我的希望，面对这样一个充满启示与星斗的夜，我第一次向这个世界温柔的冷漠敞开了胸怀。我体验到这个世界和我如此相像，终究是如此友爱，我觉得我曾是幸福的，现在依然是幸福的。为了让一切有个了结，为了使我不感到那么孤独，我还是希望我被处决的那天有很多人来观看，我希望他们用仇恨的喊声来欢迎我。</p></blockquote><p>能够与此书产生共鸣，或许是我们心中都存在着一个默尔索吧。有的时候，我们厌恶了社会中的规则，厌恶舆论裹挟司法的判决，厌恶多数人的声音淹没了少数人的呐喊。</p><p>某种角度上来说，我对默尔索是羡慕的，虽然他在社会规则这台巨大的粉碎机面前没有任何还手之力，但他的人生过着他想过的样子。加缪也认为他笔下的默尔索是赤子，是一个无比真诚的人。引用某个书评的话，<strong>“所有的规则皆是跳房子的格子线，我只需蹦着跳着越过去，有什么不可以。“</strong></p><p>他高高兴兴提着酱油瓶来了这世界，打满了酱油就走了。</p><p><img src="%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200928081908.jpg" alt=""></p><h3 id="关于葬礼与死亡">关于葬礼与死亡</h3><p>或许该小说与葬礼、死亡的话题不是紧密联系的，但它确实使我想起参加过的葬礼。曾祖父、曾祖母、外公已经相继离世了，每当我得知消息的时候我的心里往往不会产生太多波动。因为我是亲眼看见他们老人家因病痛折磨得长期卧床不起，弥留之际往往已经说不出话来、无法移动身体。我真切的认为死亡，某种意义上讲，也是一种解脱。尽管如此，我还是会因为自己没有流露出悲伤而憎恨自己：“<strong>是不是太过冷漠了呀</strong>”。</p><p>外公很瘦很瘦，尤其是在得了癌症之后，好似找不到一两肉了，只剩下皮包骨。印象中的他是最典型的老人形象，由于牙齿掉光了， 嘴巴就像用针线缝过的那样，干瘪瘪的。在脑袋上有一个很大的肉瘤，记得十年前他曾经因此入过院，所幸出院之后对生活都没有什么影响。肉瘤初看着吓人，但是可以说已经与他的身体融为一体，也没有进一步恶化，倒是成为一个标志性的东西。</p><p>在外公离世的当晚，我被告知要去守夜。说来惭愧，我第一时间内心所产生出的想法是“麻烦、浪费时间、这种传统习俗大可不必”。<strong>那个时候的我就像一个局外人一样。所幸，这种想法很快就改变了</strong>。当我坐在水晶棺旁边时，水晶棺里躺着的就是永远闭上双眼的外公。我意识到这种场合下，玩手机是对逝者的不敬。便看着水晶棺、看着人来人往、看着香一点一点地烧尽。村里很多人都来了。有以往和外公天天打牌的牌友，他进门叹了几口气，站在水晶棺旁边，像老友打招呼一样说到：“军师，一路走好！”；有常常来外公开的小卖部里搭两句话的街坊，一言不发，离水晶棺非常近，看了许久才不舍地离去；也有邻居带着小孩，他们不许小孩进来看，仅仅是在门外拜了三拜，上香离去……原来外公在那么多人心中活过。</p><blockquote><p>人的一生，要死去三次。</p><p>第一次，当你的心跳停止，呼吸消逝，你在生物学上被宣告了死亡。</p><p>第二次，当你下葬，人们穿着黑衣出席你的葬礼。他们宣告，你在这个社会上不复存在，你悄然离去。</p><p>第三次死亡，是这个世界上最后一个记得你的人，把你忘记。于是，你就真正地死去，整个宇宙都将不再和你有关。</p><p align = "right">——大卫·伊格曼《生命的清单》</p></blockquote><p>一个个片段在我的脑海里，像幻灯片一样闪过。外公是一个胆小的人，记得老一辈曾经提起过：外公在田里种地，突然轰隆隆一声雷响，他便吓得把锄头扔在地上，头也不回地奔回家里；还记得外公身体出了些毛病，无论家人怎么劝说，他就是不肯去医院看一下。尽管如此，<strong>他的一生过得也不窝囊</strong>。我自打有记忆起似乎就没见过外公生气过，虽然没怎么读过书，但是<strong>遇到一个陌生人他也能大谈特谈天下局势，因此被朋友们赠以“军师”之名</strong>。更有趣的是，在我很小很小的时候，外公的牙齿就已经掉光了，也没有装上假牙。但是一次吃饭过程中发现，外公竟然还能吃排骨、番石榴，全凭牙床嚼碎。想到这里，湿润着眼眶的我还是笑了起来。</p><p>所谓的守夜好像也没那么糟糕。<strong>这是一个好好回顾他们出现在我们生命中一点一滴的机会</strong>。当我们仔细地回想逝者的一生，真真切切地感受到他们的一生过得那么精彩，似乎也没什么遗憾的了。安息吧，进入那无尽的长眠。</p>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一个人的村庄》读笔</title>
    <link href="/wuhlan3/2021/03/03/%E3%80%8A%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%9D%91%E5%BA%84%E3%80%8B%E8%AF%BB%E7%AC%94/"/>
    <url>/wuhlan3/2021/03/03/%E3%80%8A%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%9D%91%E5%BA%84%E3%80%8B%E8%AF%BB%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>刘亮程被誉为“中国二十世纪的最后一位散文家”。他的文字都在描写他生活了多年的新疆的一个村子。可以说，这本书是乡土哲学，或者“土味”哲学。当然“土味”二字不应该带有贬义。在费孝通的《乡土中国》中对“土气”有过这样的说法：</p><blockquote><p>因为只有直接有赖于泥土的生活才会像植物一般的在一个地方生下根，这些生了根在一个小地方的人，才能在悠长的时间中，从容地去摸熟每个人的生活，像母亲对于她的儿女一样。</p></blockquote><p>也许正是如此，这本书并不适合一口气读完。因为读着读着，便怀疑作者“到底是深情还是矫情”。他对村庄中的一切都毫不吝啬地给予赞美，完全享受于村庄中的孤独与不变。带有这种强烈的主观色彩，观点自然容易变得偏激和偏颇。但是这并不影响作者通过独特的视角，给我们带来对人与村庄、人与人、人与动物植物等关系的思考。</p><h3 id="人与动物">人与动物</h3><p>对不同的动物，作者有着不同的感情与态度。</p><p>对于狗，作者认为它是人的一部分、村庄的一部分，但是却是到老了才能挣脱身上的锁链。同时又暗示着人的一辈子又何尝不如此呢。在年轻气盛的时候，为了生存左右逢源、出不得一点差错；到耄耋之年，垂垂老矣，只能看着那荒宅旧院回想陈事旧影。</p><blockquote><ul><li>一条狗能活到老，真是件不容易的事。太厉害不行，太懦弱不行，不解人意、善解人意了均不行。总之，稍一马虎便会被人剥了皮炖了肉。狗本是看家护院的，更多时候却连自己都看守不住。</li></ul></blockquote><blockquote><ul><li>人一睡着，村庄便成了狗的世界，喧嚣一天的人再无话可说。土地和人都乏了。此时狗语大作，狗的声音在夜空飘来荡去，将远远近近的村庄连在一起。那是人之外的另一种声音，飘远、神秘。莽原之上，明月之下，人们熟睡的躯体是听者，土墙和土墙的影子是听者，路是听者。年代久远的狗吠融入空气中，已经成寂静的一部分。</li></ul></blockquote><blockquote><ul><li>在这众狗狺狺(yín)的夜晚，肯定有一条老狗，默不作声。它是黑夜的一部分。它在一个村庄转悠到老，是村庄的一部分。它再无人可咬，因而也是人的一部分。这是条终于可以冥然入睡的狗，在人们久不再去的僻远路途，废弃多年的荒宅旧院，这条狗来回地走动，眼中满是人们多年前的陈事旧影。</li></ul><p align = "right">——《狗这一辈子》</p></blockquote><p>对于驴，作者认为自己是一个通驴性的人，他与驴相互观察、相互介入对方的生活。有时候，他甚至更加羡慕驴的生活，因为现实生活的处境常常把人畜搅得难分彼此。</p><blockquote><ul><li>我们是一根缰绳两头的动物，说不上谁牵着谁。</li></ul></blockquote><blockquote><ul><li>驴长了膘我比驴还高兴。我种地赔了本驴比我更垂头丧气。驴上陡坡陷泥潭时我会毫不犹豫地将绳搭在肩上四蹄爬地做一回驴。</li></ul></blockquote><blockquote><ul><li>我一生都在做一件无声的事，无声地写作，无声地发表。我从不读出我的语言，读者也不会，那是一种更加无声的哑语。我的写作生涯因此变得异常寂静和不真实，仿佛一段黑白梦境。我渴望我的声音中有朝一日爆炸出驴鸣，哪怕以沉默十年为代价换得一两句高亢鸣叫我也乐意。</li></ul></blockquote><blockquote><ul><li>所以卑微的人总要养些牲畜在身边方能安心活下去。所以高贵的人从不养牲畜而饲一群卑微的人在脚下。</li></ul><p align = "right">——《通驴性的人》</p></blockquote><p>对于马，作者是不喜欢的。如果马象征那群忙于奔波、忙于摆脱人命中的厄运的人；那么恰恰相反，作者更乐意慢悠悠地扎根于自己的小村庄里。</p><blockquote><ul><li>许多年之后你再看，骑快马飞奔的人和坐在牛背上慢悠悠赶路的人，一样老态龙钟回到村庄里，他们衰老的速度是一样的。时间才不管谁跑得多快多慢呢。</li></ul></blockquote><blockquote><ul><li>一些年人们一窝蜂朝某个地方飞奔，我远远地落在后面，像是被遗弃。另一些年月人们回过头，朝相反的方向奔跑，我仍旧慢悠悠，远远地走在他们前头。我就是这样一个人。我不骑马。</li></ul><p align = "right">——《逃跑的马》</p></blockquote><p>对于虫，作者在羡慕的同时，也在反思自己。虫子朝生暮死无忧无虑，还来不及忧愁便离去了；而人这漫长的一生中，却有无数烦恼接踵而至。也许烦人的琐事本就是生活的重要的一部分，更是漫长岁月带来的独特体验。</p><blockquote><ul><li>有些虫朝生暮死，有些仅有几个月或几天的短暂生命，几乎来不及干什么便匆匆离去。没时间盖房子，创造文化和艺术。没时间为自己和别人去着想。生命简洁到只剩下快乐。我们这些聪明的大生命却在漫长岁月中寻找痛苦和烦恼。一个听烦市嚣的人，躺在田野上听听虫鸣该是多么幸福。大地的音乐会永无休止。而有谁知道这些永恒之音中的每个音符是多么仓促和短暂。</li></ul></blockquote><blockquote><ul><li>当千万只小虫呼拥而至时，我已回到人世间的某个角落，默默无闻做着一件事。没几个人知道我的名字，我也不认识几个人，不知道谁死了谁还活着。一年一年地听着虫鸣，使我感到了小虫子的永恒。而我，正在世上苦度最后的几十个春秋。面朝黄土，没有叫声。</li></ul><p align = "right">——《与虫共眠》</p></blockquote><h3 id="人与人">人与人</h3><p>还有一篇讲了作者对于一个人的观察——《冯四》</p><blockquote><ul><li><p>一个人的一辈子完了就完了。作为邻居、亲人和同乡，我们会在心中留下几个难忘的黑白镜头，偶尔放映给自己和别人。一个人一死，他真真实实的一生便成为故事。</p><p>而一村庄人的一生结束后，一个完整的时代便过去了。除了村外新添的那片坟墓，年复一年提示着一段历史。几头老牲口，带着先人使唤时养就的毛病，遭后人鞭骂时依稀浮想昔年盛景。在活着的人眼中，一个村庄的一百年，也就是草木枯荣一百年、地耕翻一百次、庄稼收获一百次这样简单。</p><p>其实人的一生也像一株庄稼，熟透了也就死了。一代又一代人熟透在时间里，浩浩荡荡，无边无际。谁是最后的收获者呢？谁目睹了生命的大荒芜——这个孤独的收获者，在时间深处的无边金黄中，农夫一样，挥舞着镰刀。</p></li><li><p>他的那几亩地总是荒荒地夹在其他人家郁郁葱葱的麦田中间，就像他穷困的一辈子夹在村人们富富裕裕的一辈子中间——长长的一溜儿。</p></li><li><p>与一生这个漫长宏大的工程相比，任何事业都显得渺小而无意义。我们太弱小，所以才想于出些大事业来抵挡岁月，一年年地种庄稼，耕地，难道真因为饥饿吗。饥饿是什么。我们不扛一把锨势必要扛一把刀一杆枪或一支笔，我们手中总要拿一件东西——叫工具也好、武器也好。身体总要摆出一种姿势——叫劳动、体育或打斗。</p></li><li><p>有几个晚上我溜到窗根也没听到什么，屋子里一片死寂，不知冯四正面朝一生中的哪几件事昏昏而睡或黑黑地醒着。</p></li><li><p>我和冯四一样，完成着一辈子。冯四先完工了。我一辈子的一堵墙，还没垒好，透着阳光和风。</p><p align = "right">——《冯四》</p></li></ul></blockquote><p>这是作者对于村庄中的一个人的观察。冯四这一生没有做过什么惊天动地的大事，也没有犯下过什么弥天大罪，仅仅是光棍一辈子、家徒四壁、日复一日的无所事事。肯定有人会问，这有什么好观察的？观察人的过程中事实上是读着一本本书，或许只是一面之缘，但是人的一生都早已写在他的脸上、写在他不经意地动作上。</p><p>曾经的我也酷爱观察人。那是高中在地铁上，由于地铁运行的嘈杂的轰鸣声，在地铁上似乎干什么都不尽如人意，我只好选择了看人。那位穿着布满皱纹的衣服的中年男人，是否在为了工作的压力而烦心呢？面对哭闹着要手机的小孩，家长紧皱着眉头，又在想着什么呢？我心中有着各种猜测，而且不需要告诉他人。形形色色的人啊，千人千面，似乎怎么看都不会腻。这是一种难得的上帝视角，似乎很轻松地，我们便能看到每个人的一生。当然，到最后还是要回到自己的一生，也许我们并不能活出另一个样子——比他们更好或更差劲。但是会有一种说不清道不明的感觉，豁然开朗，整个世界都清澈起来。就如刘亮程在《冯四》这篇文章中的一样。他看到冯四的屋内是一片死寂、黑暗的，冯四的辈子结束了，但是他自己的一辈子还透着阳光和风。</p><p>曾经看过<strong>贾平凹</strong>写的一篇小文章**《看人》**写的很好，与我的想法不谋而合：</p><blockquote><p>在地铁入口，在立交桥头，人的脑袋如开水锅冒出的水泡，咕噜咕噜地全涌上来，蹴下来，平视着街面，各式各样的鞋脚在起落。人的脑袋的冒出，你疑惑了他们来自的另一个世界的神秘，鞋脚起落，你恐怖了他们来在这个世界要走出什么的方阵。芸芸众生，众生芸芸，这其中有多少伟人，科学家、哲学家、艺术家、文学家，到底哪一个是，哪一个将来是？你就对所有人敬畏了，于是自然而然想起了佛教上的法门之说，认识到将军也好，小偷也好，哲学家也好，暗娼也好，他们都是以各自的生存方式在体验人生，你就一时消灭了等级差别，丑美界限，而静虚平和地对待一切了。</p><p>这样，在街头上看一回人的风景，犹如读一本历史，一本哲学，你从此看问题，办事情，心胸就不那么窄了，目光就不那么短了，不会为蝇头小利去勾心斗角，不会因一时荣辱而狂妄和消沉，人既然如蚂蚁一样来到世上，忽生忽死，忽聚忽散，短短数十年里，该自在就自在吧，该潇洒就潇洒吧，各自完满自己的一段生命，这就是生存的全部意义了。</p></blockquote><h3 id="人与村庄">人与村庄</h3><p>…</p>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS——五子棋小游戏</title>
    <link href="/wuhlan3/2021/02/20/JS%E2%80%94%E2%80%94%E4%BA%94%E5%AD%90%E6%A3%8B%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/wuhlan3/2021/02/20/JS%E2%80%94%E2%80%94%E4%BA%94%E5%AD%90%E6%A3%8B%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="JS——五子棋小游戏">JS——五子棋小游戏</h2><p>可以在这里玩哦http://wuhlan3.gitee.io/web/</p><ol><li>使用canvas绘制棋盘</li><li>使棋子可以显示</li><li>使棋子可以落在棋盘交点上</li><li>防止棋子落在已有位置</li><li>判断游戏输赢</li><li>重置棋盘</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>原生JS 五子棋<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.拿到画布</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> board = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;board&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//2.得到画笔</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> pen = board.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//3.绘制棋盘</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;</span><br><span class="language-javascript">            pen.<span class="hljs-title function_">beginPath</span>();<span class="hljs-comment">//落笔</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">15</span>,<span class="hljs-number">15</span> + i*<span class="hljs-number">30</span>); <span class="hljs-comment">// 起始点</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">435</span>,<span class="hljs-number">15</span> + i*<span class="hljs-number">30</span>); <span class="hljs-comment">// 结束点</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">closePath</span>(); <span class="hljs-comment">//提笔</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">stroke</span>(); <span class="hljs-comment">//真正的实现绘制</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;</span><br><span class="language-javascript">            pen.<span class="hljs-title function_">beginPath</span>();<span class="hljs-comment">//落笔</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">15</span>+ i*<span class="hljs-number">30</span>,<span class="hljs-number">15</span> ); <span class="hljs-comment">// 起始点</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">15</span> + i*<span class="hljs-number">30</span>,<span class="hljs-number">435</span>); <span class="hljs-comment">// 结束点</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">closePath</span>(); <span class="hljs-comment">//提笔</span></span><br><span class="language-javascript">            pen.<span class="hljs-title function_">stroke</span>(); <span class="hljs-comment">//真正的实现绘制</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//4.准备好棋子</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> black_chess = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>);</span><br><span class="language-javascript">        black_chess.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/黑子.png&quot;</span>;</span><br><span class="language-javascript">        black_chess.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            black_chess.<span class="hljs-property">width</span> = <span class="hljs-number">15</span>;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> white_chess = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>);</span><br><span class="language-javascript">        white_chess.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/白子.png&quot;</span>;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        board.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;已经结束，棋盘将会重置&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">//获取坐标</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> x = event.<span class="hljs-property">clientX</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> y = event.<span class="hljs-property">clientY</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//使落在交点上</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> xx = <span class="hljs-built_in">parseInt</span>(x / <span class="hljs-number">30</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> yy = <span class="hljs-built_in">parseInt</span>(y / <span class="hljs-number">30</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//在此位置上显示棋子</span></span><br><span class="language-javascript">            <span class="hljs-title function_">drawChess</span>(xx,yy);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//5.实现交替下棋</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> isBlack = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawChess</span>(<span class="hljs-params">xx,yy</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(arr[xx][yy])<span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(isBlack)&#123;</span><br><span class="language-javascript">                pen.<span class="hljs-title function_">drawImage</span>(black_chess,xx*<span class="hljs-number">30</span>,yy*<span class="hljs-number">30</span>,<span class="hljs-number">30</span>,<span class="hljs-number">30</span>);</span><br><span class="language-javascript">                isBlack = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                arr[xx][yy] = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(isBlack == <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-title function_">isWin</span>(xx,yy))&#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;黑方胜利！&quot;</span>);&#125;,<span class="hljs-number">0.1</span>);</span><br><span class="language-javascript">                    flag = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                pen.<span class="hljs-title function_">drawImage</span>(white_chess,xx*<span class="hljs-number">30</span>,yy*<span class="hljs-number">30</span>,<span class="hljs-number">30</span>,<span class="hljs-number">30</span>);</span><br><span class="language-javascript">                isBlack = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                arr[xx][yy] = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-title function_">isWin</span>(xx,yy))&#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;白方胜利！&quot;</span>);&#125;,<span class="hljs-number">0.1</span>);</span><br><span class="language-javascript">                    flag = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">//6.防止棋子下到同一个地方</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i ++)&#123;</span><br><span class="language-javascript">            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">15</span>; j ++ )&#123;</span><br><span class="language-javascript">                arr[i][j] = <span class="hljs-number">0</span>;<span class="hljs-comment">//黑子为 1， 白子为 2</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//7.判断输赢</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">isWin</span>(<span class="hljs-params">xx,yy</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//判断左右</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(xx + i == <span class="hljs-number">15</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx+i][yy])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(xx - i == -<span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx-i][yy])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(sum &gt;= <span class="hljs-number">5</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            sum = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//判断上下  </span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(yy + i == <span class="hljs-number">15</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx][yy+i])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(yy - i == -<span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx][yy-i])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(sum &gt;= <span class="hljs-number">5</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            sum = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//判断左斜线</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(xx + i == <span class="hljs-number">15</span> || yy + i == <span class="hljs-number">15</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx+i][yy+i])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(xx - i == -<span class="hljs-number">1</span> || yy - i == -<span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx-i][yy-i])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(sum &gt;= <span class="hljs-number">5</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            sum = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//判断右斜线</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(xx - i == -<span class="hljs-number">1</span> || yy + i == <span class="hljs-number">15</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx-i][yy+i])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> ; i++)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(xx + i == <span class="hljs-number">15</span> || yy - i == -<span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(arr[xx][yy] == arr[xx+i][yy-i])&#123;</span><br><span class="language-javascript">                    sum++;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(sum &gt;= <span class="hljs-number">5</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;board&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;450px&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;450px&quot;</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&quot;background: url(img/board.jpg) repeat&quot;</span> &gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习之路</title>
    <link href="/wuhlan3/2021/02/07/JS%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <url>/wuhlan3/2021/02/07/JS%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1>JS学习之路</h1><h2 id="目录">目录</h2><h3 id="JS基础语法"><a href="#1">JS基础语法</a></h3><p><a href="#1.1">几个输出语句</a></p><p><a href="#1.2">JS的编写位置</a></p><p><a href="#1.2">标识符</a></p><p><a href="#1.4">字符串</a></p><p><a href="#1.5">强制类型转换</a></p><p><a href="#1.6">运算</a></p><p><a href="#1.7">对象</a></p><p><a href="#1.8">函数</a></p><p><a href="#1.9">this相关</a></p><p><a href="#1.10">构造函数</a></p><p><a href="#1.11">数组</a></p><p><a href="#1.12">Date</a></p><p><a href="#1.13">包装类</a></p><p><a href="#1.14">正则表达式</a></p><h3 id="DOM"><a href="#2">DOM</a></h3><p><a href="#2.1">事件</a></p><p><a href="#2.2">DOM 查询</a></p><p><a href="#2.3">图片切换</a></p><p><a href="#2.4">全选练习</a></p><p><a href="#2.5">DOM增删改</a></p><p><a href="#2.6">DOM与CSS样式</a></p><p><a href="#2.7">事件对象</a></p><h3 id="BOM"><a href="#3">BOM</a></h3><p><a href="#3.1">定时器简介</a></p><h3 id="综合练习"><a href="#4">综合练习</a></h3><p><a href="#4.1">轮播图制作</a></p><p><a href="#4.2">二级菜单制作</a></p><p><a href="#4.3">JSON</a></p><h2 id = "1">JS基础语法</h2><ol><li>解释型语言（不需要编译）</li><li>类似于C和JAVA的语法结构</li><li>动态语言</li><li>基于原型的面向对象</li></ol><p><img src="1.png" alt=""></p><h3 id  ="1.1">几个输出语句</h3><ol><li><code>alert(&quot;&quot;);</code> 用于控制浏览器弹出一个警告框</li><li><code>document.write(&quot;&quot;);</code> 用于在页面中写一个内容</li><li><code>console.log(&quot;&quot;);</code> 用于向控制台输出语句</li></ol><p>输出方式：</p><p>​1. <code>var name = prompt(&quot;输入的你的名字&quot;);</code>弹出一个输入框</p><h3 id = "1.2">JS的编写位置</h3><ol><li><p>可以编写到<code>button</code>中、<code>a</code>中（但是，结构与行为耦合，不方便维护，不推荐使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button onclick=<span class="hljs-string">&quot;alert(&#x27;讨厌，你点我干嘛~~&#x27;)&quot;</span>&gt;点我一下&lt;/button&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;让你点你就点啊？？？？&#x27;)&quot;</span>&gt;</span>也点我一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>可以编写到<code>script</code>中</p></li><li><p>可以编写到外部文件（最佳方式）（一旦用于外部文件，里面就能填写代码，会自动忽略）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;first.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id = "1.3">标识符</h3><p>在JS中所有有我们自主命名的都可以称为标识符：变量名、函数名、属性名</p><p>明明标识符需要遵守如下规则：</p><ol><li>标识符中含有字母、数字、_、$</li><li>标识符不能以数字开头</li><li>标识符不能是ES中的关键字或保留字</li><li>一般采用驼峰命名法</li></ol><p><mark>注意：</mark>与C不同的地方在于可以使用<code>$</code></p><p><mark>注意：</mark>JS底层保存标识符时实际上采用的Unicode编码，所以理论上讲，所有utf-8中含有的内容都可以作为标识符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> 锄禾日当午 = <span class="hljs-number">123</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(锄禾日当午);<br></code></pre></td></tr></table></figure><h3 id = "1.4">字面量</h3><p>JS共有六种数据类型：</p><p><code>String 字符串</code></p><p><code>Number 数值</code></p><p><code>Boolean 布尔值</code></p><p><code>Null 空值</code></p><p><code>Undefined 未定义</code></p><p><code>Object 对象</code></p><p>前五个为基本数据类型，后者为引用数据类型</p><p>可以使用<code>typeof</code>来检查类型</p><p>使用<code>Number.MAX_VALUE</code>表示数字最大值，其中<code>infinity</code>表示正无穷</p><p>使用<code>Number.MIN_VALUE</code>表示数字最小值</p><p>使用<code>NaN</code>表示一个特殊的数字类型</p><p>访问<code>null</code>时，返回<code>null</code>类型</p><p>访问<code>var c;</code>时，返回undefined类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> b);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span> * <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;abc&quot;</span> * <span class="hljs-string">&quot;cde&quot;</span>);<br><br><span class="hljs-keyword">var</span> d = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<br><br><span class="hljs-keyword">var</span> c;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br></code></pre></td></tr></table></figure><p><img src="2.png" alt="2"></p><h3 id = "1.5">强制类型转换</h3><p>转换为字符串：</p><ol><li><code>a.toString()</code>方法</li><li><code>a = String(a)</code>函数</li><li><code>a = a + &quot;&quot;</code>利用字符串的加法性质</li></ol><p>转换为数字：</p><ol><li><p><code>a.parseInt()</code>、<code>a.parseFloat</code>方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">可以将字符串中的有效的整数内容取出来<br>如 123abc567<br>取出来的是 123<br></code></pre></td></tr></table></figure></li><li><p><code>a = Number(a)</code>函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//字符串————&gt;数字</span><br>    <span class="hljs-number">1.</span> 如果是纯数字的字符串，直接转换为数字<br>    <span class="hljs-number">2.</span> 如果字符串中有非数字的内容，则转换为<span class="hljs-literal">NaN</span><br>    <span class="hljs-number">3.</span> 如果字符串是一个空串或者是一个全是空格的字符串，则转换为<span class="hljs-number">0</span><br><span class="hljs-comment">//布尔————&gt;数字</span><br>    <span class="hljs-number">1.</span> <span class="hljs-literal">true</span>  转换为 <span class="hljs-number">1</span><br>    <span class="hljs-number">2.</span> <span class="hljs-literal">false</span> 转换为 <span class="hljs-number">0</span><br><span class="hljs-comment">//null————&gt;数字 0</span><br><span class="hljs-comment">//undefined ————&gt; 数字NaN</span><br></code></pre></td></tr></table></figure></li><li><p><code>a = a - 0</code>、<code>a = a*1</code>、<code>a = a /1</code>利用运算的性质</p></li><li><p><code>a = + a</code>直接加一个正号</p></li></ol><p>进制的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = oxff;    <span class="hljs-comment">//十六进制</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">070</span>;    <span class="hljs-comment">//八进制，有些浏览器会把它当作八进制，有些浏览器会把它当作十进制</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">0b10</span>;    <span class="hljs-comment">//二进制</span><br><br>b = <span class="hljs-built_in">parseInt</span>(b,<span class="hljs-number">10</span>)<span class="hljs-comment">//可通过这种方式来统一规范</span><br></code></pre></td></tr></table></figure><p>转换为布尔值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>字符串————&gt;布尔值<br>    除了空串，其余都为<span class="hljs-literal">true</span><br><span class="hljs-string">//</span>数字————&gt;布尔值<br>    除了0和NaN，其余的都是<span class="hljs-literal">true</span><br><span class="hljs-string">//null</span>————&gt;<span class="hljs-literal">false</span><br><span class="hljs-string">//undefined</span>————&gt;<span class="hljs-literal">false</span><br><span class="hljs-string">//</span>对象————&gt; <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id = "1.6">运算</h3><p>做加法运算时，自动转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result;<br>result = <span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;3&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);    <span class="hljs-comment">//输出“33”</span><br>result = <span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">3</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);    <span class="hljs-comment">//输出“123”</span><br></code></pre></td></tr></table></figure><p>做减法、乘法、除法运算时，自动转换为Number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">result = <span class="hljs-number">100</span> - <span class="hljs-string">&quot;1&quot;</span>;    <span class="hljs-comment">// 99</span><br>result = <span class="hljs-number">2</span> * <span class="hljs-string">&quot;8&quot;</span>;    <span class="hljs-comment">// 16</span><br>result = <span class="hljs-number">2</span> * <span class="hljs-literal">undefined</span>;    <span class="hljs-comment">// NaN</span><br>result = <span class="hljs-number">2</span> * <span class="hljs-literal">null</span>;    <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>关系运算符，比较的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;1&quot;</span> &lt; <span class="hljs-number">5</span>);       <span class="hljs-comment">//true 字符串转换为数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;11&quot;</span> &lt; <span class="hljs-string">&quot;5&quot;</span>);    <span class="hljs-comment">//true 比较unicode编码</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;abc&quot;</span> &lt; <span class="hljs-string">&quot;cde&quot;</span>); <span class="hljs-comment">//true 比较unicode编码</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;戒&quot;</span> &gt; <span class="hljs-string">&quot;我&quot;</span>);    <span class="hljs-comment">//true 比较unicode编码</span><br></code></pre></td></tr></table></figure><h3 id = "1.7">对象</h3><p>生成一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;王子豪&quot;</span>;<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">19</span>;<br>person.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;男&quot;</span>;<br></code></pre></td></tr></table></figure><p>对象属性的删除与修改：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//修改<br>person.age <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-comment">;</span><br>//删除<br>delete person.age<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>特殊属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//语法：对象[&quot;属性名&quot;] = 属性值</span><br>person[<span class="hljs-string">&quot;1234&quot;</span>] = <span class="hljs-number">56</span>;<br></code></pre></td></tr></table></figure><p>in 运算符：用于检查一个对象中是否含有指定的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> person);<span class="hljs-comment">//注意，就算是.运算符也要用双引号</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;1234&quot;</span> <span class="hljs-keyword">in</span> person);<br></code></pre></td></tr></table></figure><p>对象字面量的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> classmate  = &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;王著&quot;</span>,<br>            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>            <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span><br>            <span class="hljs-attr">school</span>:&#123;<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;中山大学&quot;</span><br>                <span class="hljs-attr">dormitory</span>:<span class="hljs-string">&quot;520&quot;</span><br>            &#125;<br>        &#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(classmate.<span class="hljs-property">name</span>, classmate.<span class="hljs-property">age</span>, classmate.<span class="hljs-property">gender</span>);<br></code></pre></td></tr></table></figure><p>基本数据类型和引用数据类型之间的区别：</p><p>类似于每一个对象是一个指针</p><p><img src="3.png" alt=""></p><p>枚举对象中的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> classmate)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i + <span class="hljs-string">&quot;:&quot;</span> + clssmate[i]);    <span class="hljs-comment">//输出如 name：王著</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id = "1.8">函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个函数对象</span><br><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br><span class="hljs-comment">//可以将要封装的代码以字符串的形式传递给构造函数</span><br><span class="hljs-keyword">var</span> fun1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;document.write(&#x27;hellofunction&#x27;);&quot;</span>);<br><span class="hljs-title function_">fun1</span>();<br><span class="hljs-comment">//一般不会用上述方法</span><br><br><span class="hljs-comment">//函数声明：</span><br><span class="hljs-comment">//语法：</span><br>    <span class="hljs-keyword">function</span> 函数名([形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>,...形参N])&#123;<br>        语句...<br>    &#125;<br><span class="hljs-comment">//函数表达式：</span><br><span class="hljs-comment">//语法：</span><br>    <span class="hljs-keyword">var</span> fun3 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        语句...<br>    &#125;<br> <br></code></pre></td></tr></table></figure><p>函数的实参可以是任意数据类型，同时调用函数时，不会检查实参的数量</p><p>如果实参的数量少于形参的数量，则没有对应实参的形参将是<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a+b);<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);        <span class="hljs-comment">//输出579</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>,<span class="hljs-string">&quot;hello&quot;</span>);   <span class="hljs-comment">//输出&quot;123hello&quot;</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>);    <span class="hljs-comment">//输出&quot;1&quot;</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>);    <span class="hljs-comment">//输出579</span><br></code></pre></td></tr></table></figure><p>立即执行函数(只会执行一次)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这是一个匿名函数&quot;</span>);<br> &#125;)();<br></code></pre></td></tr></table></figure><h3 id = "1.9">this相关</h3><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数——this，this指向的是一个对象。这个对象我们称为函数执行的上下文对象。</p><p>根据函数的调用方法的不同，this会指向不同的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:fun<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">sayName</span> == fun);    <span class="hljs-comment">//这里的方法与函数是同一个对象</span><br>obj.<span class="hljs-title function_">sayName</span>();                        <span class="hljs-comment">//输出 Object，对象的this</span><br><span class="hljs-title function_">fun</span>();                                <span class="hljs-comment">//输出 Window，全局的this</span><br></code></pre></td></tr></table></figure><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<span class="hljs-comment">//可以在函数里使用this</span><br>&#125;<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:fun<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;猪八戒&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:fun<br>&#125;;<br><span class="hljs-keyword">var</span> obj3 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;沙和尚&quot;</span>,<br>    <span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br>obj1.<span class="hljs-title function_">sayName</span>();<br>obj2.<span class="hljs-title function_">sayName</span>();<br>obj3.<span class="hljs-title function_">sayName</span>();<br></code></pre></td></tr></table></figure><h3 id = "1.10">构造函数</h3><p>工厂中的创建对象方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">creatPerson</span>(<span class="hljs-params">name, age, gender</span>)&#123;<br>    <span class="hljs-comment">//创建一个新对象</span><br>    <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-comment">//向对象添加属性</span><br>    obj.<span class="hljs-property">name</span> = name;<br>    obj.<span class="hljs-property">age</span> = age;<br>    obj.<span class="hljs-property">gender</span> = gender;<br>    obj.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>    <span class="hljs-comment">//将新对象返回</span><br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, gender</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;;<br>    <br>    <span class="hljs-keyword">var</span> per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>instanceof</code>可以检查一个对象是否是一个类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>);        <span class="hljs-comment">//返回true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);        <span class="hljs-comment">//返回true，所有对象都是Object的子类（祖宗）</span><br></code></pre></td></tr></table></figure><p>原型对象：</p><p><img src="4.png" alt="4"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使所有的对象共享同一个方法，避免同一个方法创建很多次</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, gender</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = fun;<br>&#125;<br><span class="hljs-comment">//假如采用下列方式：</span><br><span class="hljs-comment">//在全局作用域中定义</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-comment">//***********污染全局作用域的命名空间，同时很不安全************//</span><br><br><span class="hljs-comment">//向原型对象中添加sayName方法</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="5.png" alt="5"></p><p>但是，使用<code>in</code>检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true。可以使用对象的<code>hasOwnPropery</code></p><p><img src="6.png" alt="image-20210209204919405"></p><h3 id = "1.11">数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建数组对象</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">31</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">33</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);    <span class="hljs-comment">//输出 10,31，33</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">3</span>]); <span class="hljs-comment">//输出 undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>); <span class="hljs-comment">//输出3，！！！！！！！注意length是属性</span><br><span class="hljs-comment">//length可被直接修改</span><br><br><span class="hljs-comment">//使用字面量创建数组</span><br><span class="hljs-keyword">var</span> arr1 = [];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-comment">//使用构造函数创建数组</span><br><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br><span class="hljs-comment">//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!注意！！！！！！！！！！！！</span><br><span class="hljs-keyword">var</span> arr4[<span class="hljs-number">10</span>];                <span class="hljs-comment">//表示大小为1，元素为10的数组</span><br><span class="hljs-keyword">var</span> arr5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>);     <span class="hljs-comment">//表示创建大小为10的数组</span><br></code></pre></td></tr></table></figure><p>可查看JS参考手册https://www.w3school.com.cn/jsref/jsref_obj_array.asp</p><p>数组中可以存放任何数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>&#125;;<br>arr = [<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">undefined</span>,obj];<span class="hljs-comment">//都可以存放，甚至包括 函数和数组</span><br></code></pre></td></tr></table></figure><p>数组的方法</p><p>继续学习参考手册https://www.w3school.com.cn/jsref/jsref_obj_array.asp</p><p>常用的有如下：<code>join()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>push()</code>、<code>splice()</code>、<code>slice()</code></p><br/><p>遍历数组</p><p><code>foreach()</code>方法，只支持IE8以上的浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//forEach()方法需要一个函数作为参数</span><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>数组排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>];<br>arr.<span class="hljs-title function_">sort</span>();    <span class="hljs-comment">//排序</span><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;);    <span class="hljs-comment">//forEach中添加的函数，可以含有三个参数currentValue, index, arr</span><br><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> b - a;<br>&#125;);        <span class="hljs-comment">//添加一个比较函数，进行逆序排序</span><br><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id = "1.12">Date</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个Date对象</span><br><span class="hljs-comment">//封装为当前代码的执行时间</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-comment">//创建一个指定的时间对象</span><br><span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2/10/2021 20:52:30&quot;</span>);<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">var</span> date = date2.<span class="hljs-title function_">getDate</span>();<br><span class="hljs-keyword">var</span> day = date2.<span class="hljs-title function_">getDay</span>();<br><span class="hljs-keyword">var</span> month = date2.<span class="hljs-title function_">getMonth</span>();<br><span class="hljs-keyword">var</span> year = date2.<span class="hljs-title function_">getYear</span>();<br><span class="hljs-keyword">var</span> hour = date2.<span class="hljs-title function_">getHours</span>();<br><span class="hljs-keyword">var</span> minute = date2.<span class="hljs-title function_">getMinutes</span>();<br><span class="hljs-keyword">var</span> second = date2.<span class="hljs-title function_">getSeconds</span>();<br><span class="hljs-comment">//时间戳，从格林威治标准时间的1970年1月1日，0时0分0秒，到当前时间的毫秒数</span><br><span class="hljs-comment">//计算机底层保存时间时，使用的都是时间戳</span><br><span class="hljs-keyword">var</span> time = date2.<span class="hljs-title function_">getTime</span>();<br><br><span class="hljs-comment">//输出格林威治时间的时间戳的得到的是负值？？？？</span><br><span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;1/1/1970 0:0:0&quot;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date2.<span class="hljs-title function_">getTime</span>());    <span class="hljs-comment">//这是因为显示的是东八区时间</span><br></code></pre></td></tr></table></figure><p>使用时间戳检测代码性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ; i&lt; <span class="hljs-number">100</span> ; i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><span class="hljs-keyword">var</span> end = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行了&quot;</span> + (end - start) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id = "1.13">包装类</h3><p>JS提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">var</span> bool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>);<br>num.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;sansan&quot;</span>;<br><span class="hljs-comment">//方法和属性只能添加给对象，不能添加给基本数据类型</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">123</span>;<br>s.<span class="hljs-property">hello</span> = <span class="hljs-string">&quot;hello&quot;</span>;    <span class="hljs-comment">//先将s变为一个对象，再将对象销毁</span><br><br></code></pre></td></tr></table></figure><h3 id = "1.14">正则表达式</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-number">350396117</span><span class="hljs-meta">@qq.com</span><br>邮件的规则：<br>    前边XXXXX + <span class="hljs-meta">@ + XXXXX + .com</span><br>    <br>正则表达式用于定义一些字符串的规则：<br>    计算机可以根据正则表达式，来检查一个字符串是否符合规则<br>    获取将字符串中符合规则的内容提取出来<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个正则表达式的对象(Regular Expression)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    语法：</span><br><span class="hljs-comment">        var 变量 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;a&quot;</span>);    <span class="hljs-comment">//这个正则表达式用于检查字符串中是否含有a</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-comment">/*正则表达式的方法</span><br><span class="hljs-comment">    test()</span><br><span class="hljs-comment">     - 使用这个方法可以检查一个字符串是否符合正则表达式的规则，</span><br><span class="hljs-comment">     如果符合返回true，否则返回false</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(str));    <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;sdjkasdk&quot;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;sdd&quot;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">/*使用字面量来创建正则表达式</span><br><span class="hljs-comment">    - 语法：var 变量 = /正则表达式/匹配模式</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/a/i</span>;    <span class="hljs-comment">//字面量的形式定死了，不能传变量</span><br></code></pre></td></tr></table></figure><p>匹配模式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//传递一个匹配模式作为第二个参数：</span><br>    i 忽略大小写<span class="hljs-comment">(ignored)</span><br>    g 全局匹配模式<span class="hljs-comment">(global)</span><br>    m 执行多行匹配<br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个正则表达式，检查一个字符串是否含有a或b</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a|b/</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个正则表达式，检查一个字符串中是否有字母</span><br><span class="hljs-comment">/*    </span><br><span class="hljs-comment">    &quot;[]&quot;里也是或的关系</span><br><span class="hljs-comment">    [ab] == a|b</span><br><span class="hljs-comment">    [a-z] == 任意小写字母</span><br><span class="hljs-comment">    [A-Z] == 任意大写字母</span><br><span class="hljs-comment">    [A-z] == 任意字母</span><br><span class="hljs-comment">    [0-9] == 任意数字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> reg =  <span class="hljs-regexp">/[A-z]/</span>;    <span class="hljs-comment">//任意字母</span><br><br><span class="hljs-comment">//检查一个字符串中是否含有abc或adc或aec</span><br>reg = <span class="hljs-regexp">/a[bde]c/</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    [^ ] 除了里面的东西，都行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//除了a、b、ab,任意字符串都行</span><br>reg = <span class="hljs-regexp">/[^ab]/</span>;<br></code></pre></td></tr></table></figure><p>字符串与正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    split()方法</span><br><span class="hljs-comment">     - 可以将一个字符串拆分为一个数组</span><br><span class="hljs-comment">     - 方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式拆分字符串</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a2b3d4h56j7&quot;</span>;<br><span class="hljs-comment">//根据任意字母拆分字符串</span><br><span class="hljs-keyword">var</span> result = str.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/[A-z]/</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(result);        <span class="hljs-comment">//输出 1,2,3,4,56,7</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    search()方法</span><br><span class="hljs-comment">     - 可以搜索字符串中是否含有指定内容</span><br><span class="hljs-comment">     - 如果搜索到指定内容，则会返回第一次出现的索引，否则返回-1</span><br><span class="hljs-comment">     - 它可以接受一个正则表达式作为参数，根据正则表达式去检索字符串</span><br><span class="hljs-comment">*/</span><br>str  = <span class="hljs-string">&quot;hello abc hello aec afc&quot;</span>;<br>result = str.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/a[bef]c/</span>);<span class="hljs-comment">//搜索abc或aec或afc</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    match()</span><br><span class="hljs-comment">     - 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</span><br><span class="hljs-comment">     - 默认情况下，match只会找到第一个符合要求的内容</span><br><span class="hljs-comment">     我们可以设置正则表达式为全局匹配模式</span><br><span class="hljs-comment">*/</span><br>str = <span class="hljs-string">&quot;1a2b3d4h56j7&quot;</span>;<br>result = str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[A-z]/</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);    <span class="hljs-comment">//输出 a  // 即使只有一个元素，也返回到数组中</span><br>result = str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[A-z]/g</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);    <span class="hljs-comment">//输出 a,b,d,h,j</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    replace()方法</span><br><span class="hljs-comment">     - 可以将字符串中指定内容替换为新的内容</span><br><span class="hljs-comment">     - 参数</span><br><span class="hljs-comment">     1. 被替换的内容,可以接受一个正则表达式作为参数</span><br><span class="hljs-comment">     2. 新的内容，</span><br><span class="hljs-comment">     - 默认只会替换第一个，可以使用全局匹配模式</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">*/</span><br>result = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/a-z/gi</span>, <span class="hljs-string">&quot;@_@&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><p>量词：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    - 通过量词可以设置一个内容的出现次数</span><br><span class="hljs-comment">    - &#123;X&#125; 出现X次</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a&#123;3&#125;/</span>;      <span class="hljs-comment">// aaa</span><br>reg = <span class="hljs-regexp">/(ab)&#123;3&#125;/</span>;  <span class="hljs-comment">//ababab</span><br><br></code></pre></td></tr></table></figure><p><img src="7.png" alt="image-20210211132940291"></p><p>去除前后的空格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">str1 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s*/</span>,<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//去除前面的空格</span><br>str2 = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s*|\s*$/g</span>,<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//去除前后的空格</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br></code></pre></td></tr></table></figure><p>手机号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*手机号规则：</span><br><span class="hljs-comment">    13767890123</span><br><span class="hljs-comment">    1. 以1开头</span><br><span class="hljs-comment">    2. 第二位3-9任意数字</span><br><span class="hljs-comment">    3. 三位以后任意数字9个</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    /^1[3-9][0-9]&#123;9&#125;$/</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> phoneStr = <span class="hljs-string">&quot;13767890123&quot;</span>;<br><span class="hljs-keyword">var</span> phoneReg = <span class="hljs-regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(phoneReg.<span class="hljs-title function_">test</span>(phoneStr));<br></code></pre></td></tr></table></figure><p>电子邮件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*任意字母数字下划线.任意字母数字下划线@任意字母数字.任意字母(2-5位)任意字母(2-5位)</span><br><span class="hljs-comment">    \w&#123;3,&#125;  (\.\w+)* @ [A-z0-9]+ (\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> emailReg = <span class="hljs-regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;<br><span class="hljs-keyword">var</span> email = <span class="hljs-string">&quot;abc@abc.com&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(emailReg.<span class="hljs-title function_">test</span>(email));<br></code></pre></td></tr></table></figure><h2 id = "2">DOM</h2><p>DOM(Document Object Model) 文档对象模型</p><ul><li>文档：就是整个HTML网页文档</li><li>对象：将网页的每一个部分都转换为了一个对象(万物皆是对象，包括文档本身)</li><li>模型：使用模型来表示对象之间的关系，这样方便我们获取对象</li></ul><p><img src="8.png" alt="image-20210211163807649"></p><p><img src="9.png" alt="image-20210211164137276"></p><p><img src="10.png" alt="image-20210211164314588"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br>        我是一个按钮<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/*浏览器已经为我们提供了 文档节点 对象，这个对象是window属性</span></span><br><span class="hljs-comment"><span class="language-javascript">    可以在页面中直接使用，文档节点代表的是整个网页*/</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>); <span class="hljs-comment">//输出HTMLDocument</span></span><br><span class="language-javascript">      </span><br><span class="language-javascript">    <span class="hljs-comment">//获取button对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(btn);  <span class="hljs-comment">//输出button对象</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    <span class="hljs-comment">//修改按钮文字</span></span><br><span class="language-javascript">    btn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;I&#x27;m a button&quot;</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>    <br></code></pre></td></tr></table></figure><h3 id = "2.1">事件</h3><p>事件，就是文档或浏览器窗口中发生的一些特定的交换瞬间。JavaScript和HTML之间的交互是通过事件实现的。（点击某个元素，将鼠标移动至某个元素上方，按下键盘上的某个键，等等）</p><p>可以在事件对应的属性中设置一些js代码，当事件被触发时，这些代码将会执行。</p><p><code>&lt;button id = &quot;btn&quot; onclick = &quot;alert('讨厌，你点我干什么');&quot;&gt;我是一个按钮&lt;/button&gt;</code></p><p>但是，结构与行为耦合，不方便维护，不推荐使用</p><p>可采取下列的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;btn&quot;</span>&gt;</span></span><br><span class="language-xml">        我是一个按钮</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//获取button对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(btn);  <span class="hljs-comment">//输出button对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//绑定一个双击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">    btn.<span class="hljs-property">ondblclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你还点~~~&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;    <br></code></pre></td></tr></table></figure><h3 id = "2.2">DOM 查询</h3></h3><p>通过document对象调用：</p><ol><li><code>getElementById()</code>: 通过id属性获取一个元素节点对象</li><li><code>getElementsByTagName()</code>: 通过标签名获取<mark>一组</mark>元素节点对象</li><li><code>getElementsByName()</code>: 通过name属性获取<mark>一组</mark>元素节点对象</li></ol><p>通过具体的元素节点调用：</p><ol><li><code>getElementsByTagName()</code>: <mark>方法</mark>，返回当前节点的指定标签名后代节点</li><li><code>childNodes</code>: <mark>属性</mark>，表示当前节点的所有子节点</li><li><code>firstChild</code>: <mark>属性</mark>，表示当前节点的第一个子节点</li><li><code>lastChild</code>: <mark>属性</mark>，表示当前节点的最后一个子节点</li><li><code>parentNode</code>： <mark>属性</mark>，表示当前节点的父节点</li><li><code>previousSibling</code> : <mark>属性</mark>，表示当前节点的前一个兄弟节点</li><li><code>nextSibling</code> : <mark>属性</mark>，表示当前节点的后一个兄弟节点</li></ol><p>制作一个查询的封装函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myClick</span>(<span class="hljs-params">idStr, fun</span>)&#123;<br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(idStr);<br>    btn.<span class="hljs-property">onclick</span> = fun;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id = "2.3">图片切换</h3></h3><img src="12.png" style="zoom:30%;" /><p>基本步骤思路：</p><ol><li>获取标签变量。较简单的是通过标签获取；也可以通过TagName（不过要注意是否是数组）</li><li>两个按钮都绑定一个单击事件</li></ol><p>耶~~，可以完全靠自己写出来啦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* *&#123;</span></span><br><span class="hljs-comment"><span class="language-css">            padding: 0px;</span></span><br><span class="hljs-comment"><span class="language-css">            margin: 0px;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125; */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#outer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span> : <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">190</span>, <span class="hljs-number">183</span>, <span class="hljs-number">113</span>);</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> prev = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prev&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> next = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;next&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;diary&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;info&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//数组</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> imgArr = [<span class="hljs-string">&quot;1.jpg&quot;</span>, <span class="hljs-string">&quot;2.jpg&quot;</span>, <span class="hljs-string">&quot;3.jpg&quot;</span>];</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> len = imgArr.<span class="hljs-property">length</span>;</span><br><span class="language-javascript">            info.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;一共有&quot;</span> + len + <span class="hljs-string">&quot;张图片，这是第&quot;</span>+ (index + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;张&quot;</span>;</span><br><span class="language-javascript">            prev.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                index = (index - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span> ? index -<span class="hljs-number">1</span> : index - <span class="hljs-number">1</span> + len;</span><br><span class="language-javascript">                img.<span class="hljs-property">src</span> = imgArr[index];</span><br><span class="language-javascript">                info.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;一共有&quot;</span> + len + <span class="hljs-string">&quot;张图片，这是第&quot;</span>+ (index + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;张&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            next.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                index = (index + <span class="hljs-number">1</span>)%len;</span><br><span class="language-javascript">                img.<span class="hljs-property">src</span> = imgArr[index];</span><br><span class="language-javascript">                info.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;一共有&quot;</span> + len + <span class="hljs-string">&quot;张图片，这是第&quot;</span>+ (index + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;张&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;大理寺日志&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diary&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;prev&quot;</span>&gt;</span>上一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span>下一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id = "2.4">全选练习</h3></h3><img src="11.png" alt="image-20210213214849373 wi" style="zoom:70%;" align = "center" /><br/><p>基本步骤思路：</p><ol><li>控制选项的属性是<code>checked</code>，<code>true</code>或<code>false</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script&gt;<br>        window.onload = function() &#123;<br>            var arr = document.getElementsByName(&quot;items&quot;);<br>            //五个按钮<br>            //1 全选<br>            var checkedAllBtn = document.getElementById(&quot;checkedAllBtn&quot;);<br>            checkedAllBtn.onclick = function() &#123;<br>                <br>                for(var i = 0; i &lt; arr.length; i++) &#123;<br>                    arr[i].checked = true;<br>                &#125;<br>            &#125;<br>            //2 全部不选<br>            var checkedNoBtn = document.getElementById(&quot;checkedNoBtn&quot;);<br>            checkedNoBtn.onclick = function() &#123;<br>                <br>                for(var i = 0; i &lt; arr.length; i++) &#123;<br>                    arr[i].checked = false;<br>                &#125;<br>            &#125;<br>            //3 反转选项<br>            var checkedRevBtn = document.getElementById(&quot;checkedRevBtn&quot;);<br>            checkedRevBtn.onclick = function() &#123;<br>                <br>                for(var i = 0; i &lt; arr.length; i++) &#123;<br>                    arr[i].checked = !(arr[i].checked);<br>                &#125;<br>            &#125;<br>            //4 提交后，弹出提示框<br>            var send = document.getElementById(&quot;send&quot;);<br>            send.onclick = function() &#123;<br>                <br>                for(var i = 0; i &lt; arr.length; i++) &#123;<br>                    if(arr[i].checked)&#123;<br>                        alert(arr[i].value);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            //5右上角的框选中时，四个全选<br>            var checkAllBox = document.getElementById(&quot;checkAllBox&quot;);<br>            checkAllBox.onclick = function() &#123;<br>                for(var i = 0 ; i &lt; arr.length;  i++)&#123;<br>                    arr[i].checked = this.checked;//妙妙妙啊<br>                &#125;<br>            &#125;<br>            //6四个全选时，右上角的框也要被选中<br>            for(var i = 0 ; i &lt; arr.length; i ++)&#123;<br>                <br>                arr[i].onclick = function()&#123;<br>                    checkAllBox.checked = true;<br>                    for(var j = 0; j &lt; arr.length; j ++)&#123;<br>                        if(!arr[j].checked)&#123;<br>                            checkAllBox.checked = false;<br>                            break;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <br>        &#125;<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;<br>        你爱好的运动是 &lt;input type=&quot;checkbox&quot;  id=&quot;checkAllBox&quot; /&gt; 全选或全不选<br>        &lt;br/&gt;<br>        &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;足球&quot; /&gt;足球<br>        &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;篮球&quot; /&gt;篮球<br>        &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;羽毛球&quot; /&gt;羽毛球<br>        &lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;乒乓球&quot; /&gt;乒乓球<br>        &lt;br/&gt;<br>        &lt;input type=&quot;button&quot; id=&quot;checkedAllBtn&quot; value=&quot;全选&quot; /&gt;<br>        &lt;input type=&quot;button&quot; id=&quot;checkedNoBtn&quot; value=&quot;全不选&quot; /&gt;<br>        &lt;input type=&quot;button&quot; id=&quot;checkedRevBtn&quot; value=&quot;反选&quot; /&gt;<br>        &lt;input type=&quot;button&quot; id=&quot;send&quot; value=&quot;提交&quot; /&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id = "2.5">DOM增删改</h3></h3><p><img src="13.png" alt=""></p><img src="14.png" alt="image-20210214171009270" style="zoom:70%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>        <span class="hljs-comment">//封装一个单击函数</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myClick</span>(<span class="hljs-params">idStr,fun</span>)&#123;<br>            <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(idStr);<br>            btn.<span class="hljs-property">onclick</span> = fun;<br>        &#125;<br>        <br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-comment">//一、添加广州——方法1：</span><br>            <span class="hljs-title function_">myClick</span>(<span class="hljs-string">&quot;btn01&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//创建元素节点</span><br>                <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);<br>                <span class="hljs-comment">//创建文本节点</span><br>                <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-string">&quot;广州&quot;</span>);<br>                <span class="hljs-comment">//往li中添加text</span><br>                li.<span class="hljs-title function_">appendChild</span>(text);<br>                <span class="hljs-comment">//往ul中添加li</span><br>                <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);<br>                ul.<span class="hljs-title function_">appendChild</span>(li);<br>            &#125;);<br>            <span class="hljs-comment">//二、添加广州到北京前</span><br>            <span class="hljs-title function_">myClick</span>(<span class="hljs-string">&quot;btn02&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);<br>                <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-string">&quot;广州&quot;</span>)<br>                li.<span class="hljs-title function_">appendChild</span>(text);<br><br>                <span class="hljs-comment">//获取北京与city</span><br>                <span class="hljs-keyword">var</span> beijing = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;bj&quot;</span>);<br>                <span class="hljs-keyword">var</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);<br>                <span class="hljs-comment">//插入到北京前</span><br>                city.<span class="hljs-title function_">insertBefore</span>(li,bj);   <span class="hljs-comment">//(新节点,旧节点)</span><br>            &#125;);<br>            <span class="hljs-comment">//三、使用广州节点替换北京节点</span><br>            <span class="hljs-title function_">myClick</span>(<span class="hljs-string">&quot;btn03&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);<br>                <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-string">&quot;广州&quot;</span>)<br>                li.<span class="hljs-title function_">appendChild</span>(text);<br><br>                <span class="hljs-comment">//获取北京与city</span><br>                <span class="hljs-keyword">var</span> beijing = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;bj&quot;</span>);<br>                <span class="hljs-keyword">var</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);<br>                <span class="hljs-comment">//替换</span><br>                city.<span class="hljs-title function_">replaceChild</span>(li,beijing);<br>            &#125;);<br>            <span class="hljs-comment">//四、删除北京节点</span><br>            <span class="hljs-title function_">myClick</span>(<span class="hljs-string">&quot;btn04&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//获取北京与city</span><br>                <span class="hljs-comment">// var beijing = document.getElementById(&quot;bj&quot;);</span><br>                <span class="hljs-comment">// var city = document.getElementById(&quot;city&quot;);</span><br>                <span class="hljs-comment">// //替换</span><br>                <span class="hljs-comment">// city.removeChild(beijing);</span><br><br>                <span class="hljs-comment">//或者！！！！！！！！我找我爸爸删我自己！！！！！！</span><br>                <span class="hljs-keyword">var</span> beijing = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;bj&quot;</span>);<br>                <span class="hljs-comment">//替换</span><br>                beijing.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(beijing);<br>            &#125;);<br>            <span class="hljs-comment">//五、读取</span><br>            <span class="hljs-title function_">myClick</span>(<span class="hljs-string">&quot;btn05&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">var</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);<br>                <span class="hljs-title function_">alert</span>(city.<span class="hljs-property">innerHTML</span>);<br>            &#125;);<br>            <span class="hljs-comment">//六、设置bj内的HTML代码</span><br>            <span class="hljs-comment">//这样也可以，一般两种方法结合使用</span><br>            <span class="hljs-title function_">myClick</span>(<span class="hljs-string">&quot;btn06&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">var</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);<br>                city.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>;<br>            &#125;);<br>        &#125;<br><br>        <br>        <br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>a的索引问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> allA = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; allA.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-comment">//for 循环在页面加载完成后，立即执行</span><br>    <span class="hljs-comment">//而响应函数，在超链接被点击时才会执行.此时，i为allA.length</span><br>        allA[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> tr = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-property">parentNode</span>; <span class="hljs-comment">//因此这里不能使用allA[i]</span><br>            <span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;确认删除&quot;</span>+ name + <span class="hljs-string">&quot;吗？&quot;</span>);<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                ...;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//取消超链接的默认跳转行为</span><br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id = "2.6">DOM与CSS样式</h3><p>给出的材料如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">            <span class="hljs-comment">/* background-color:red !important; 添加！ important后，拥有最高优先级*/</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>改变样式<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn02&quot;</span>&gt;</span>读取样式<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改样式方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> box1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box1&quot;</span>);<br>    <span class="hljs-keyword">var</span> btn01 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);<br>    btn01.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            修改样式方法</span><br><span class="hljs-comment">                语法： 元素.style.样式名 = 样式值(字符串)</span><br><span class="hljs-comment">        */</span><br>       box1.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;300px&quot;</span>;<br>       box1.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&quot;300px&quot;</span>;<br>       <span class="hljs-comment">//box1.style.background-color = &quot;yellow&quot;;错误，因为含有减号</span><br>       box1.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br>    &#125;;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>读取样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">btn02.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过style设置和读取都是内联样式，无法读取样式表中的样式，</span><br><span class="hljs-comment">简单来说就是只能读取程序里的变量或标签里设置的属性</span><br><span class="hljs-comment">*/</span><br>         <span class="hljs-title function_">alert</span>(box1.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">     getComputedStyle()这个方法来获取元素的当前样式</span><br><span class="hljs-comment">     这个方法是window的方法，可以直接使用</span><br><span class="hljs-comment">     需要两个参数：</span><br><span class="hljs-comment">          1. 获取样式的元素</span><br><span class="hljs-comment">          2. 传递一个伪元素，一般为null</span><br><span class="hljs-comment">     该方法会返回一个对象，该对象里封装了当前元素的对应样式</span><br><span class="hljs-comment">     如果获取的样式没有设置，则会获取真实的值，而不是默认值</span><br><span class="hljs-comment">     如：没有设置width，它不会获取auto，而是一个长度</span><br><span class="hljs-comment">   */</span><br>       <span class="hljs-keyword">var</span> obj = <span class="hljs-title function_">getComputedStyle</span>(box1,<span class="hljs-literal">null</span>);<br>    <span class="hljs-title function_">alert</span>(obj.<span class="hljs-property">width</span>);<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p><code>getStyle()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getStyle</span>(<span class="hljs-params">obj,name</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">getComputedStyle</span>)&#123;<span class="hljs-comment">//根据属性是否存在进行判断</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getComputedStyle</span>(obj,<span class="hljs-literal">null</span>)[name];    <span class="hljs-comment">//正常浏览器</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> obj.<span class="hljs-property">currentStyle</span>[name];<span class="hljs-comment">//IE8</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>制作一个读协议书的小功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        #info&#123;<br>            width: 200px;<br>            height: 400px;<br>            overflow: auto;<br>        &#125;<br>    &lt;/style&gt;<br>    &lt;script&gt;<br>        window.onload = function()&#123;<br>            //onscroll 该事件会在元素的滚动条滚动时触发<br><br>            var info = document.getElementById(&quot;info&quot;);<br>            var inputs = document.getElementsByTagName(&quot;input&quot;);<br>            info.onscroll = function()&#123;<br>                //已滚到底;由于谷歌浏览器的一些属性保留了小数位，所以需要使用1来判断，不能用等于0来判断<br>                if(info.scrollHeight - info.scrollTop - info.clientHeight&lt;1)&#123;<br>                    //变为可用<br>                    inputs[0].disabled = false;<br>                    inputs[1].disabled = false;<br>                &#125;<br>            &#125;;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h3&gt;欢迎亲爱的用户注册&lt;/h3&gt;<br>    &lt;p  id = &quot;info&quot;&gt;<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>        亲爱的用户，请仔细阅读以下协议，如果你不仔细阅读就别注册<br>    &lt;/p&gt;<br>    &lt;!-- 如果为表单项添加disabled=&quot;disabled&quot;,则表单项变成不可用状态 --&gt;<br>    &lt;input type=&quot;checkbox&quot;  disabled = &quot;disabled&quot; /&gt;我已仔细阅读协议，一定遵守<br>    &lt;input type=&quot;submit&quot;  value = &quot;注册&quot; disabled = &quot;disabled&quot;/&gt; <br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id = "2.7">事件对象</h3><p><img src="15.png" alt="image-20210215172917998"></p><p>在div里移动鼠标，显示xy坐标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#areaDiv</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>:<span class="hljs-number">#000000</span> solid <span class="hljs-number">1px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#showMsg</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>:<span class="hljs-number">#000000</span> solid <span class="hljs-number">1px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> areaDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;areaDiv&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> showMsg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;showMsg&quot;</span>);</span><br><span class="language-javascript">            areaDiv.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//解决事件对象的兼容性问题</span></span><br><span class="language-javascript">                event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> x = event.<span class="hljs-property">clientX</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> y = event.<span class="hljs-property">clientY</span>;</span><br><span class="language-javascript">                showMsg.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;x = &quot;</span> + x + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;y = &quot;</span> + y;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;areaDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>div跟随鼠标移动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">            <span class="hljs-comment">/* 开启box1的绝对定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> st = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> sl = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLeft</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> left = event.<span class="hljs-property">clientX</span>;<span class="hljs-comment">//clientX是相对于窗口的</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> top = event.<span class="hljs-property">clientY</span>;     </span><br><span class="language-javascript">                <span class="hljs-comment">// var left = event.pageX;</span></span><br><span class="language-javascript">                <span class="hljs-comment">// var top = event.pageY;   可以直接获取页面坐标，但是这对IE8不兼容</span></span><br><span class="language-javascript">                box.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left +sl + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                box.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = top +st+ <span class="hljs-string">&quot;px&quot;</span>;         </span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:1000px;width:2000px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件的冒泡</p><p>所谓的冒泡指的是事件的向上传导，当其后代元素被触发时，其祖先元素也会被触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> s1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;s1&quot;</span>);<br>            s1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是s1&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">var</span> box1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box1&quot;</span>);<br>            box1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是div&quot;</span>);<br>            &#125;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是body&quot;</span>)<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>如上述代码，点击span时，三个alert会依次触发。</p><p>在开发中，大部分的冒泡都是非常有用的；如果不希望发生事件冒泡，可以通过事件对象<mark>取消冒泡</mark>。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;s1&quot;</span>);<br>s1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-comment">//取消span的冒泡</span><br>    event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是s1&quot;</span>);<br>    event.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>事件的委派</p><p>——指将事件统一绑定给元素的共同祖先，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件</p><p>——事件委派利用了冒泡，通过委派可以减少事件的绑定次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//这样可以快速绑定原有的li和新生成的li</span><br>            u1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>                event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>                <span class="hljs-comment">//target获取到响应函数触发的元素</span><br>                <span class="hljs-keyword">if</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">className</span> == <span class="hljs-string">&quot;link&quot;</span>)&#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-number">666</span>);<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><p>事件的绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*通过这个方法也可以为元素绑定响应函数</span><br><span class="hljs-comment">    - 参数：</span><br><span class="hljs-comment">        1. 事件的字符串，不要on</span><br><span class="hljs-comment">        2. 回调函数，事件触发时函数会被调用</span><br><span class="hljs-comment">        3. 是否捕获阶段触发事件，需要一个布尔值，一般传false</span><br><span class="hljs-comment">*/</span><br><br>btn01.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);<br>&#125;,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>事件的捕获</p><blockquote><p>关于事件的传播，网景公司和微软公司有不同的理解：</p><p>微软公司认为：事件应该是由内向外传播的，就是先触发当前元素上的事件——即在冒泡阶段执行</p><p>网景公司认为：事件应该是由外向内传播的，就是先触发最外层的祖先元素的事件，然后向内传播给后代元素</p><p>W3C综合了两个公司的方案，将事件传播分成了三个阶段：</p><ol><li>捕获阶段</li><li>目标阶段</li><li>冒泡阶段</li></ol></blockquote><p><img src="E:%5Cblog%5Csource_posts%5CJS%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%5C16.png" alt=""></p><p>拖拽练习</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#box1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-id">#box2</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">background-color</span>:yellow;</span><br><span class="language-css">          <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">          <span class="hljs-attribute">left</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">top</span> :<span class="hljs-number">300px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">                拖拽box1元素</span></span><br><span class="hljs-comment"><span class="language-javascript">                -拖拽流程：</span></span><br><span class="hljs-comment"><span class="language-javascript">                    1. 当鼠标在拖拽元素上按下时，开始拖拽 onmousedown</span></span><br><span class="hljs-comment"><span class="language-javascript">                    2. 当鼠标移动时，被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="hljs-comment"><span class="language-javascript">                    3. 当鼠标松开时，被拖拽元素固定在当前位置 onmouseup</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> box1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box1&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//为box1绑定按下事件</span></span><br><span class="language-javascript">        box1.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//div偏移量 = 鼠标.clientX - 元素.offsetLeft</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> ol = event.<span class="hljs-property">clientX</span> - box1.<span class="hljs-property">offsetLeft</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> ot = event.<span class="hljs-property">clientY</span> - box1.<span class="hljs-property">offsetTop</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">            event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//鼠标的坐标</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> left = event.<span class="hljs-property">clientX</span> ;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> top = event.<span class="hljs-property">clientY</span> ;</span><br><span class="language-javascript">            <span class="hljs-comment">//box1位置</span></span><br><span class="language-javascript">            box1.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left- ol + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">            box1.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = top - ot + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">          &#125;;</span><br><span class="language-javascript">          <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousedown</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">/*当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，</span></span><br><span class="hljs-comment"><span class="language-javascript">        此时会导致拖拽功能的异常，这是浏览器提供的默认行为,简单的取消方法就是return false*/</span></span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>666666666<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>滚轮练习</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> box1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box1&quot;</span>);</span><br><span class="language-javascript">            box1.<span class="hljs-property">onmousewheel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                event = event || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(event.<span class="hljs-property">wheelDelta</span> &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                    box1.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = box1.<span class="hljs-property">clientHeight</span> - <span class="hljs-number">10</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    box1.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = box1.<span class="hljs-property">clientHeight</span> + <span class="hljs-number">10</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//取消滚动条默认行为</span></span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&quot;height:2000px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id = "3">BOM</h2><p>BOM（Browser Object Model）浏览器对象模型</p><p>BOM是我们可以通过JS来操作浏览器。提供了一组对象</p><ol><li>Window：代表的是整个浏览器的窗口，同时Window也是网页中的全局对象</li><li>Navigator：代表了当前浏览器的信息，通过该对象来识别不同的浏览器。由于历史原因，大部分属性都不能帮助识别浏览器了，现在一般使用userAgent，但是IE11也隐藏了起来</li><li>Location：代表了当前浏览器的地址栏信息</li><li>History：代表浏览器的历史记录（由于隐私的原因，不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问有效）</li><li>Screen：代表用户的屏幕信息，显示器的相关信息</li></ol><p>这些BOM对象在浏览器中都是作为window对象的属性使用的。</p><h3 id = "3.1">定时器简介</h3><p>涉及方法：</p><ol><li><code>clearInterval()</code>：取消由 setInterval() 设置的 timeout。</li><li><code>clearTimeout()</code>：取消由 setTimeout() 方法设置的 timeout。</li><li><code>setInterval()</code>：按照指定的周期（以毫秒计）来调用函数或计算表达式。</li><li><code>setTimeout()</code>：在指定的毫秒数后调用函数或计算表达式。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> h2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;h2&quot;</span>);<br>            <span class="hljs-keyword">var</span> time = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                h2.<span class="hljs-property">innerHTML</span> = time ++;<br>                <span class="hljs-keyword">if</span>(time == <span class="hljs-number">10</span>)&#123;<br>                    <span class="hljs-built_in">clearInterval</span>(timer);<span class="hljs-comment">//timer是一个数字，是定时器的唯一标识</span><br>                &#125;<br>            &#125;,<span class="hljs-number">1000</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id = "4">综合练习</h2><h3 id = "4.1">轮播图制作</h3><h3 id = "4.2">二级菜单制作</h3><h3 id = "4.3">JSON</h3><p>JS中的对象只有JS自己认识，其他语言都不认识；</p><p>JSON（JavaScript Object Notation  JS对象表示法）就是一个特殊格式的字符串，这个字符串可以被任意语言所识别，并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互。</p><p>JSON分类：</p><ol><li>对象{}</li><li>数组[]</li></ol><p>JSON中允许的值：</p><ol><li>字符串</li><li>数值</li><li>布尔值</li><li>null</li><li>对象</li><li>数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18 ,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;<br><span class="hljs-comment">//创建一个数组</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-string">&#x27;[1,2,3,&quot;hello&quot;,true]&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在JS中，提供了一个工具类，就叫JSON</p><p>这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*    </span><br><span class="hljs-comment">    JSON -&gt; JS对象：</span><br><span class="hljs-comment">        JSON.parse()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str1);<br><span class="hljs-comment">/*    </span><br><span class="hljs-comment">    JS对象 -&gt; JSON：</span><br><span class="hljs-comment">        JSON.stringify()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寒假力扣日志</title>
    <link href="/wuhlan3/2021/01/23/%E5%AF%92%E5%81%87%E5%8A%9B%E6%89%A3%E6%97%A5%E5%BF%97/"/>
    <url>/wuhlan3/2021/01/23/%E5%AF%92%E5%81%87%E5%8A%9B%E6%89%A3%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>刷题顺序参考如下：https://leetcode-cn.com/circle/article/48kq9d/</p><h1>目录</h1><p><a href="#1">链表相关</a></p><p><a href="#2">数组相关</a></p><p><a href="#3">动态规划相关</a></p><h2 id ="1">链表相关</h2><h3 id="力扣203移除链表元素">力扣203<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">移除链表元素</a></h3><p>难点在于如何处理头节点。解决方法是添加一个哨兵节点(dummy node)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span>(!head)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>       ListNode* newhead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>       newhead-&gt;next = head;<br>       ListNode* pre, *cur;<br>       pre = newhead;<br>       cur = head;<br>       <span class="hljs-keyword">while</span>(cur)&#123;<br>           ListNode* temp = <span class="hljs-literal">nullptr</span>;<br>           <span class="hljs-keyword">if</span>(cur-&gt;val == val)&#123;<br>               pre-&gt;next = cur-&gt;next;<br>                temp = cur;<br>               cur = cur-&gt;next;<br>               <span class="hljs-keyword">delete</span> temp;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(temp)<span class="hljs-keyword">continue</span>;<br>           cur = cur-&gt;next;<br>           pre = pre-&gt;next;<br>       &#125;<br>       ListNode* temp = newhead-&gt;next;<br>       <span class="hljs-keyword">delete</span> newhead;<br>           <span class="hljs-keyword">return</span> temp;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="力扣237删除链表中的节点">力扣237<a href="https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">删除链表中的节点</a></h3><h4 id="算法思路">算法思路</h4><p>这道题函数中只有一个节点，要求删除该节点。（没有给出头节点）</p><p>一道简单的脑筋急转弯。由于题目强调了绝对不会删除掉尾节点，只需把下一个节点的元素赋给node，删除掉下一个节点即可。</p><h4 id="代码实现">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        node-&gt;val = node-&gt;next-&gt;val;<br>        node-&gt;next = node-&gt;next-&gt;next;<br>        <span class="hljs-comment">// ListNode* temp = node-&gt;next;</span><br>        <span class="hljs-comment">// delete temp;</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：在实现的过程中还是出现了问题，上面注释掉的代码，为什么不正确？</p><p>下面这篇文章讲的很好，c++的指针类型分为静态分配和动态分配。</p><p><code>delete</code>只能用于释放堆指针，也就是<code>new</code>出来的指针，而不能用于栈指针。</p><blockquote><p>如果在<code>deleteNode</code>前在使用<code>c</code>节点本身，那就可能引发不确定行为。</p><p>由于<code>ListNode</code>是个单链表节点，而单链表节点本质上是无法做到在链表里删除自身的，所以这题只能通过这种替换的方式来伪造删除了节点。</p><p>这题会误导很多开发者，这题的设计模式更是不可取！</p><p>个人认为这题应该删除</p><p>而203. 移除链表元素这题才是真正的移除链表元素！</p><p>作者：AmazingPP<br>链接：https://leetcode-cn.com/problems/delete-node-in-a-linked-list/solution/tong-pi-ci-ti-li-ying-shan-chu-yin-chu-c-taij/<br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h3 id="力扣19-删除链表的倒数第-N-个结点">力扣19 <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第 N 个结点</a></h3><h4 id="算法思路-2">算法思路</h4><p>方法一：暴力法</p><pre><code class="hljs"> 1. 遍历一遍，获取链表的长度 2. 再循环L-n-1次，获取目标结点的前一个结点。</code></pre><p>方法二：快慢指针法（只需遍历一遍）</p><h4 id="代码实现-2">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        ListNode* dummynode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>        dummynode-&gt;next = head;<br>        ListNode* fast = dummynode;<br>        ListNode* slow = dummynode;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>            fast = fast-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fast-&gt;next)&#123;<br>            fast = fast-&gt;next;<br>            slow = slow-&gt;next;<br>        &#125;<br>        ListNode* temp = slow-&gt;next;<br>        slow-&gt;next = slow-&gt;next-&gt;next;<br>        <span class="hljs-keyword">delete</span> temp;<br>        <span class="hljs-keyword">return</span> dummynode-&gt;next;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="力扣430-扁平化多级双向链表">力扣430 <a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/">扁平化多级双向链表</a></h3><h4 id="题目要求">题目要求</h4><p><img src="multilevellinkedlist.png" alt="1"></p><p>变化为</p><p><img src="multilevellinkedlistflattened.png" alt="2"></p><h4 id="算法思路-3">算法思路</h4><ol><li>DFS（事实上，歪着脖子看，就是二叉树的前序遍历）将结点存入数组中</li><li>遍历数组，从新连接结点</li></ol><h4 id="代码实现-3">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;Node*&gt; arr;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(Node* head)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!head)<span class="hljs-keyword">return</span>;<br>        arr.<span class="hljs-built_in">push_back</span>(head);<br>        <span class="hljs-built_in">dfs</span>(head-&gt;child);<br>        <span class="hljs-built_in">dfs</span>(head-&gt;next);<br>    &#125;<br>    <span class="hljs-function">Node* <span class="hljs-title">flatten</span><span class="hljs-params">(Node* head)</span> </span>&#123;<br>        <span class="hljs-built_in">dfs</span>(head);<br>        <span class="hljs-type">int</span> size = arr.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size;  i++)&#123;<br>            <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span> &lt; size) arr[i]-&gt;next = arr[i+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>) arr[i]-&gt;prev = arr[i<span class="hljs-number">-1</span>];<br>            arr[i]-&gt;child = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>因为前两天学习到很多方法，所以今天的题目都能很快完成</p><h3 id="力扣61-旋转链表">力扣61 <a href="https://leetcode-cn.com/problems/rotate-list/">旋转链表</a></h3><h3 id="力扣24-两两交换链表中的节点">力扣24 <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></h3><h3 id="力扣206-反转链表">力扣206 <a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></h3><h4 id="算法思路-4">算法思路</h4><ol><li><p>迭代法（三指针）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* dummynode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        <span class="hljs-keyword">if</span>(dummynode-&gt;next == <span class="hljs-literal">NULL</span> || dummynode-&gt;next-&gt;next == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> head;<br>        ListNode* pre = <span class="hljs-literal">NULL</span>;<br>        ListNode* mid = dummynode-&gt;next;<br>        ListNode* tail = dummynode-&gt;next-&gt;next;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            mid-&gt;next =  pre;<br>            <span class="hljs-keyword">if</span>(tail == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">break</span>;<br>            pre = mid;<br>            mid = tail;<br>            tail = tail-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>递归法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!head || !head-&gt;next) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode* newHead = <span class="hljs-built_in">reverseList</span>(head-&gt;next);<br><br>        head-&gt;next-&gt;next = head;     <span class="hljs-comment">//下一个结点指回自己</span><br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h3 id="力扣92-反转链表-II">力扣92 <a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/"> 反转链表 II</a></h3><h4 id="算法思路-5">算法思路</h4><p>该题难点在于要求一次遍历，需要理清变量的位置。</p><p>哨兵节点：<code>dummynode</code></p><p>反转链表需要三个变量：<code>fir</code>、<code>sec</code>、<code>thr</code></p><p>确定反转后的头和尾需要两个变量：<code>pre</code>、<code>tail</code></p><p><img src="1.jpg" alt="3"></p><h4 id="代码实现-4">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(!head-&gt;next)<span class="hljs-keyword">return</span> head;<br>        <span class="hljs-keyword">if</span>(m == n)<span class="hljs-keyword">return</span> head;<br>        ListNode* dummynode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        ListNode* fir = dummynode;<br>        ListNode* sec = dummynode-&gt;next;<br>        ListNode* thr = dummynode-&gt;next-&gt;next;<br>        ListNode* pre;<span class="hljs-comment">//连接m点</span><br>        ListNode* tail;<span class="hljs-comment">//连接n点</span><br><br>        <span class="hljs-keyword">while</span>(thr)&#123;<br>            <span class="hljs-keyword">if</span>(m == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;<br>            fir = sec;<br>            sec = thr;<br>            thr = thr-&gt;next;<br>            n--;<br>            m--;<br>        &#125;<br>        pre = fir;<br>        tail = sec;<br>        <span class="hljs-keyword">while</span>(thr)&#123;<br>            fir= sec;<br>            sec = thr;<br>            thr = thr-&gt;next;<br>            sec-&gt;next = fir;<br>            n--;<br>            <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>        tail-&gt;next = thr;<br>        pre-&gt;next = sec;<br>        <span class="hljs-keyword">return</span> dummynode-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="力扣25-K-个一组翻转链表">力扣25 <a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">K 个一组翻转链表</a></h3><h4 id="算法思路-6">算法思路</h4><ol><li>遍历一遍链表，获得链表长度<code>cnt</code>，根据<code>cnt</code>分割出每段<code>len</code></li><li>用三指针进行反转</li></ol><p>与上题类似。可以继续沿用上题的我画的图</p><p><mark>！！！注意注意！！！</mark>花了半个小时debug，问题在于 <code>fir = tail;</code>反转一段链表后，需要更新<code>fir</code>为<code>tail</code></p><h4 id="代码实现-5">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(!head-&gt;next)<span class="hljs-keyword">return</span> head;<br>        ListNode* dummynode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        <span class="hljs-comment">//得到长度</span><br>        ListNode* cur = dummynode;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(cur)&#123;<br>            cnt++;<br>            cur = cur-&gt;next;<br>        &#125;<br>        cnt--;<br>        <span class="hljs-type">int</span> len = cnt/k;<br>        ListNode* fir = dummynode;<br>        ListNode* sec = dummynode-&gt;next;<br>        ListNode* thr = dummynode-&gt;next-&gt;next;<br>        ListNode* pre;<br>        ListNode* tail;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; len; i ++)&#123;<br>            pre = fir;<br>            tail = sec;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j ++)&#123;<br>                sec-&gt;next = fir;<br>                fir = sec;<br>                sec = thr;<br>                <span class="hljs-keyword">if</span>(thr == <span class="hljs-literal">NULL</span>) thr = <span class="hljs-literal">NULL</span>;<br>                <span class="hljs-keyword">else</span> thr = thr-&gt;next;<br>            &#125;<br>            pre-&gt;next = fir;<br>            tail-&gt;next = sec;<br>            fir = tail;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummynode-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><mark>思考：</mark>如何只用一次遍历。太累了，以后再解决吧。</p><h3 id="力扣21-合并两个有序链表">力扣21 <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></h3><h3 id="力扣2-两数相加">力扣2 <a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a></h3><h3 id="力扣445-两数相加-II">力扣445 <a href="https://leetcode-cn.com/problems/add-two-numbers-ii/">两数相加 II</a></h3><h4 id="算法思路-7">算法思路</h4><ol><li>由于需要逆序处理链表，从个位开始相加，所以可以考虑使用<mark>栈</mark></li><li>引入一个<code>carry</code>变量作为进位</li></ol><h4 id="代码实现-6">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; s1;<br>        stack&lt;<span class="hljs-type">int</span>&gt; s2;<br>        ListNode* cur;<br>        <span class="hljs-comment">//遍历l1</span><br>        cur = l1;<br>        <span class="hljs-keyword">while</span>(cur)&#123;<br>            s1.<span class="hljs-built_in">push</span>(cur-&gt;val);<br>            cur = cur-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//遍历l2</span><br>        cur = l2;<br>        <span class="hljs-keyword">while</span>(cur)&#123;<br>            s2.<span class="hljs-built_in">push</span>(cur-&gt;val);<br>            cur = cur-&gt;next;<br>        &#125;<br>        ListNode* ans = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//当l1为空，l2为空，carry为0时结束循环</span><br>        <span class="hljs-keyword">while</span>(!s1.<span class="hljs-built_in">empty</span>()|| !s2.<span class="hljs-built_in">empty</span>() || carry)&#123;<br>            <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> right = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(!s1.<span class="hljs-built_in">empty</span>())&#123;<br>                left = s1.<span class="hljs-built_in">top</span>();<br>                s1.<span class="hljs-built_in">pop</span>() ;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!s2.<span class="hljs-built_in">empty</span>())&#123;<br>                right = s2.<span class="hljs-built_in">top</span>();<br>                s2.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-type">int</span> newval = left+right+carry;<br>            carry = newval/<span class="hljs-number">10</span>;<br>            newval = newval%<span class="hljs-number">10</span>;<br>            ListNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(newval);<br>            node-&gt;next = ans;<br>            ans = node;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="力扣23-合并K个升序链表">力扣23 <a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">合并K个升序链表</a></h3><h4 id="算法思路一、">算法思路一、</h4><p>一种想法是将所有结点打散，存在一个优先队列中。但是耗时较长</p><blockquote><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210126192802293.png" alt="image-20210126192802293"></p></blockquote><p>但是，可以直接的考虑应该是每次取出各个链表的第一个元素，放入优先队列。</p><p>学习优先队列的使用方法，熟悉<code>for(auto node : lists)&#123;&#125;</code>这种遍历方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Status</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        ListNode *ptr;<br>        <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Status &amp;rhs) <span class="hljs-type">const</span> &#123;<br>            <span class="hljs-keyword">return</span> val &gt; rhs.val;<br>        &#125;<br>    &#125;;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;<br>        priority_queue&lt;Status&gt; q;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> node: lists) &#123;<br>            <span class="hljs-keyword">if</span> (node) q.<span class="hljs-built_in">push</span>(&#123;node-&gt;val, node&#125;);<br>        &#125;<br>        ListNode* dummynode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* tail = dummynode;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">auto</span> front = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>            tail-&gt;next = front.ptr; <br>            tail = tail-&gt;next;<br>            <span class="hljs-keyword">if</span> (front.ptr-&gt;next) q.<span class="hljs-built_in">push</span>(&#123;front.ptr-&gt;next-&gt;val, front.ptr-&gt;next&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummynode-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="算法思路二、">算法思路二、</h4><p>分治合并。</p><p><img src="https://pic.leetcode-cn.com/6f70a6649d2192cf32af68500915d84b476aa34ec899f98766c038fc9cc54662-image.png" alt="img"></p><p>需要两个函数：1.用于合并两个链表；2.分治递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//合并两个链表</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">merge2Lists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!l1 &amp;&amp; !l2)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(!l1 )<span class="hljs-keyword">return</span> l2;<br>        <span class="hljs-keyword">if</span>(!l2) <span class="hljs-keyword">return</span> l1;<br>        ListNode* cur1 = l1;<br>        ListNode* cur2 = l2;<br>        ListNode* dummynode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* cur = dummynode;<br>        <span class="hljs-keyword">while</span>(cur1 &amp;&amp; cur2)&#123;<br>            <span class="hljs-keyword">if</span>(cur1-&gt;val &lt; cur2-&gt;val)&#123;<br>                ListNode* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(cur1-&gt;val);<br>                cur-&gt;next = temp;<br>                cur1 = cur1-&gt;next;<br>                cur = cur-&gt;next;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur1-&gt;val &gt;= cur2-&gt;val)&#123;<br>                ListNode* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(cur2-&gt;val);<br>                cur-&gt;next = temp;<br>                cur2 = cur2-&gt;next;<br>                cur = cur-&gt;next;<br>            &#125;<br>        &#125;<br>        cur-&gt;next = cur1? cur1 : cur2;<br>        <span class="hljs-keyword">return</span> dummynode-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//递归</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">fun</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span>&#123;<br>        <span class="hljs-type">int</span> mid = (left + right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(left == right)<span class="hljs-keyword">return</span> lists[left];<br>        <span class="hljs-keyword">if</span>(left &gt; right)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode* ans = <span class="hljs-built_in">merge2Lists</span>(<span class="hljs-built_in">fun</span>(lists, left, mid),<span class="hljs-built_in">fun</span>(lists, mid+<span class="hljs-number">1</span>, right));<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fun</span>(lists, <span class="hljs-number">0</span>, lists.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>链表暂告一段落…</p><h2 id ="2">数组相关</h2><h3 id="力扣485-最大连续1的个数">力扣485 <a href="https://leetcode-cn.com/problems/max-consecutive-ones/">最大连续1的个数</a></h3><h3 id="力扣495-提莫攻击">力扣495 <a href="https://leetcode-cn.com/problems/teemo-attacking/">提莫攻击</a></h3><h3 id="力扣414-第三大的数">力扣414 <a href="https://leetcode-cn.com/problems/third-maximum-number/">第三大的数</a></h3><h3 id="力扣-剑指-Offer-40-最小的k个数">力扣 <a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的k个数</a></h3><h3 id="力扣628-三个数的最大乘积">力扣628 <a href="https://leetcode-cn.com/problems/maximum-product-of-three-numbers/">三个数的最大乘积</a></h3><h3 id="力扣645-错误的集合">力扣645 <a href="https://leetcode-cn.com/problems/set-mismatch/">错误的集合</a></h3><p>https://leetcode-cn.com/problems/set-mismatch/solution/cyi-huo-fa-xiang-jie-by-feng-feng-19/</p><h3 id="力扣697-数组的度">力扣697 <a href="https://leetcode-cn.com/problems/degree-of-an-array/">数组的度</a></h3><h4 id="算法思路-8">算法思路</h4><ol><li>构建一个<code>unordered_map&lt;int,pair&lt;int,int&gt;&gt;</code>，其中pair包含数据出现次数与数据第一次出现的坐标</li></ol><h3 id="力扣448-找到所有数组中消失的数字">力扣448 <a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/">找到所有数组中消失的数字</a></h3><h2 id ="3">动态规划相关</h2><p><img src="2.png" alt="image-20210203195708610"></p><p>动态规划组成部分：</p><ol><li><p>确定状态：最后一步和子问题</p><p><img src="3.png" alt="image-20210203200248268"></p></li><li><p>转移方程</p><p><img src="4.png" alt="image-20210203200631362"></p></li><li><p>初始条件和边界情况</p><p><img src="5.png" alt="image-20210203201010114"></p></li><li><p>计算顺序（递归：自顶向下，动态规划：自底向上）</p><p><img src="6.png" alt="image-20210203201219009"></p></li></ol><p><img src="7.png" alt="image-20210203203659002"></p><h3 id="力扣338-比特位计数">力扣338 <a href="https://leetcode-cn.com/problems/counting-bits/">比特位计数</a></h3><h4 id="算法思路-9">算法思路</h4><p>要输出二进制数的‘1’的个数，只需要考虑两种情况：</p><ol><li>奇数：$f(i) = f(i-1)+1$</li><li>偶数：$f(i) = f(i/2)$</li></ol><h4 id="代码实现-7">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">countBits</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">if</span>(num &gt;= <span class="hljs-number">0</span>)ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(num &gt;= <span class="hljs-number">1</span>)ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= num; i ++)&#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(ans[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                ans.<span class="hljs-built_in">push_back</span>(ans[i/<span class="hljs-number">2</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="力扣45-跳跃游戏-II">力扣45 <a href="https://leetcode-cn.com/problems/jump-game-ii/">跳跃游戏 II</a></h3><h4 id="第一种思路使用动态规划：">第一种思路使用动态规划：</h4><p>另开数组记录每一个位置的步数，然后$f(x) = min({f(0),f(1),…f(x-1)})+1$</p><p>时间复杂度为$O(n^2)$</p><h4 id="第二种思路，从后往前">第二种思路，从后往前</h4><p>最坏时间复杂度也为$O(n^2)$，超出时间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pos = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(pos!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; pos; i ++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i]+i &gt;= pos)&#123;<br>                    pos = i;<br>                    ans ++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="第三种思路，贪心算法">第三种思路，贪心算法</h4><p>时间复杂度为$O(n)$</p><p>在2的后面的两个数之中，找出一个能到达最远位置的数</p><img src="8.png" alt="image.png"  /><p>在3的后面的三个数之中，找出一个能到达最远位置的数</p><img src="9.png" alt="image.png"  /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> end = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> maxpos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i ++)&#123;<br>            maxpos = <span class="hljs-built_in">max</span>(maxpos,nums[i]+i);<br>            <span class="hljs-keyword">if</span>(i == end)&#123;<br>                end = maxpos;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="力扣198-打家劫舍">力扣198 <a href="https://leetcode-cn.com/problems/house-robber/">打家劫舍</a></h3><h4 id="算法思路-10">算法思路</h4><p>转移方程：$f(i) = max(f(i-1),f(i-2)+nums[i])$</p><h4 id="代码实现-8">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> size = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> arr[size];<br>        <span class="hljs-keyword">if</span>(size &gt;= <span class="hljs-number">1</span>)arr[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(size &gt;= <span class="hljs-number">2</span>)arr[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; size; i ++)&#123;<br>            arr[i] = <span class="hljs-built_in">max</span>(arr[i<span class="hljs-number">-1</span>],arr[i<span class="hljs-number">-2</span>]+nums[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> arr[size<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化方案：发现可将上面的<code>arr</code>和<code>nums</code>合并为一个数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>)nums[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i ++)&#123;<br>            nums[i] = <span class="hljs-built_in">max</span>(nums[i<span class="hljs-number">-1</span>],nums[i<span class="hljs-number">-2</span>]+nums[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> nums[nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="力扣213-打家劫舍-II">力扣213 <a href="https://leetcode-cn.com/problems/house-robber-ii/">打家劫舍 II</a></h3><h4 id="算法思路-11">算法思路</h4><ol><li>分为两种情况：（1）算头不算尾；（2）算尾不算头</li><li>在上述两种情况下，进行“打家劫舍”的操作</li></ol><h4 id="代码实现-9">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">first_rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; nums)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>)nums[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i ++)&#123;<br>        nums[i] = <span class="hljs-built_in">max</span>(nums[i<span class="hljs-number">-1</span>], nums[i<span class="hljs-number">-2</span>]+nums[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-comment">//分为两种情况，调用first_rob函数</span><br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    vector&lt;<span class="hljs-type">int</span>&gt;::const_iterator head = nums.<span class="hljs-built_in">begin</span>();<br>    vector&lt;<span class="hljs-type">int</span>&gt;::const_iterator tail = nums.<span class="hljs-built_in">begin</span>()+nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">x</span><span class="hljs-params">(head+<span class="hljs-number">1</span>, tail)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">y</span><span class="hljs-params">(head, tail<span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">first_rob</span>(x), <span class="hljs-built_in">first_rob</span>(y));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="力扣650-只有两个键的键盘">力扣650 <a href="https://leetcode-cn.com/problems/2-keys-keyboard/">只有两个键的键盘</a></h3><h4 id="算法思路：DP">算法思路：DP</h4><ol><li>寻找最大的因子<code>j</code></li><li>状态转移方程为$f(i) = f(j) + i/j$</li></ol><p>该算法效率不高，<mark>因为额外计算了很多不必要的量</mark>，最坏情况时间复杂度为$O(n^2)$</p><h4 id="代码实现-10">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSteps</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[n+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(n &gt;= <span class="hljs-number">0</span>)arr[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n &gt;= <span class="hljs-number">1</span>)arr[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n &gt;= <span class="hljs-number">2</span>)arr[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>; j &gt;<span class="hljs-number">0</span>; j --)&#123;<br>            <span class="hljs-keyword">if</span>(i%j == <span class="hljs-number">0</span>)&#123;<br>                arr[i] = arr[j] + i/j;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> arr[n];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="算法思路二：递归法">算法思路二：递归法</h4><h4 id="代码实现-11">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSteps</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n/<span class="hljs-number">2</span>; i &gt; <span class="hljs-number">1</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(n%i == <span class="hljs-number">0</span>)&#123;    <span class="hljs-comment">//得到最大因数</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">minSteps</span>(i)+n/i;    <br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果n为素数，则直接返回其本身。</span><br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贺新郎·读史</title>
    <link href="/wuhlan3/2020/12/05/%E8%B4%BA%E6%96%B0%E9%83%8E%C2%B7%E8%AF%BB%E5%8F%B2/"/>
    <url>/wuhlan3/2020/12/05/%E8%B4%BA%E6%96%B0%E9%83%8E%C2%B7%E8%AF%BB%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<center><h4>贺新郎·读史</h4></center><center>毛泽东</center><center>人猿相揖别。只几个石头磨过，小儿时节。</center><center>铜铁炉中翻火焰，为问何时猜得？不过几千寒热。</center><center>人世难逢开口笑，上疆场彼此弯弓月。</center><center>流遍了，郊原血。</center><br/><center>一篇读罢头飞雪，但记得斑斑点点，几行陈迹。</center><center>五帝三皇神圣事，骗了无涯过客。有多少风流人物？</center><center>盗跖庄蹻流誉后，更陈王奋起挥黄钺。</center><center>歌未竟，东方白。</center><br/><p>毛泽东的这首诗读来有许多触动。仅仅是开篇第一句就给我留下了极深的印象。</p><p>​“人猿相揖别”，寥寥数语，就将人类从猿进化过来的过程描述出来。想象到的是在一条时间线上，某一个特殊的时间节点，人类站在这一头，猿站在那一头，他们相互作了一个揖，便分道扬镳。而人类头也不回地往着继续进化的方向走去。此画面甚是诙谐有趣，仔细一想又有着历史的沉重感和使命感。</p><p>​“只几个石头磨过，小儿时节”，将石器时代比作人类的儿童时期。以一种居高临下的姿态看待人类，而对那时候人类的懵懂又形容的非常贴切。“磨”既是石器打磨的过程，也凸显了时间之久，间接体现了石器时代持续的时间之长。</p><p>​“铜铁炉中翻火焰，为问何时猜得？不过几千寒热。”，在这三句内又将铜器时代和铁器时代交代出来。其中铜与铁在火炉里炼制的过程是最能够代表这一时期的。如果要问具体是什么时候，我们很难知道，但不过是转眼数千年。其中“寒热”指的应该是寒暑，即春夏秋冬。</p><p>​“人世难逢开口笑，上疆场彼此弯弓月。流遍了，胶原血”，其中“认识难逢开口笑”化用了杜牧《九日齐山登高》诗中的一句：“尘世难逢开口笑”。这几句道尽了历史的真相。事实上在过往的历史中，人民生活艰苦，常处于水深火热之中，被统治阶级压迫。一辈子又有多少次真正的开口大笑。人类社会常常处于战乱的状态，相互争斗、残杀。“兴，百姓苦；亡，百姓苦”，王朝更替，但是社会的根本性质没有改变。鲜血已将山河的每一寸土地都染遍了。这里隐藏着毛泽东这位领导人对过往的叹息和开创一个能让人民开怀大笑的盛世的志向。</p><p>​“一篇读罢头飞雪，但记得斑斑点点，几行陈迹”，这一句有几种解释。一是毛泽东对这一生读史经历的总结，从青葱岁月到两鬓斑白，他将中国的历史通读了一遍，但到最后，留在记忆里的只有稀稀疏疏的星星点点；二是通过毛泽东的原稿可以发现，他将“一遍”改为“一篇”，我们只好解释为，当读到某篇史篇时，恍如置身冰雪，寒心愤怒至极。第二种解释与上文“流遍了，胶原血”联系更加紧密。</p><p>​“五帝三皇神圣事，骗了无涯过客。”这一句话，直接揭开史书的本质，语言十分犀利。有一句话这么说来着：“历史是一个任人打扮的小姑娘”。历史书不过是统治阶级为了巩固统治地位、维护自己神圣的形象，文人墨客、历史学家也随声附和，编造出所谓的正统思想来蒙蔽人民群众。既然如此，我们为什么还要读史呢？毛泽东曾给出过这个问题的答案。</p><blockquote><p>令芦荻没有想到的是，毛泽东尽管酷爱历史，但在谈到该如何读二十四史时，却提出了一个让人吃惊的告诫，他说：“一部二十四史大半是假的，所谓实录之类也大半是假的。但是，如果因为大半是假的就不读了，那就是形而上学。不读，靠什么来了解历史呢？反过来，一切信以为真，书上的每句话，都被当作证实历史的信条，那就是历史唯心论了。正确的态度是用马克思主义的立场、观点和方法，分析它，批判它。把颠倒的历史颠倒过来。一部二十四史，写符瑞、迷信的文字，就占了不少，各朝各代的史书里都有。像《史记·高祖本纪》和《汉书·高帝纪》里，都写了刘邦斩白蛇的故事，又写了刘邦藏身的地方，上面常有云气，这一切都是骗人的鬼话。每一部史书，都是由继建的新王朝的臣子奉命修撰的，凡关系到本朝统治者不光彩的地方，自然不能写，也不敢写。如宋太祖赵匡胤本是后周的臣子，奉命北征，走到陈桥驿，竟发动兵变，篡夺了周的政权。宋臣薛居正等撰写的《旧五代史》里却说，他是黄袍加身，是受将士们‘擐甲将刃’、‘拥迫南行’被迫的结果，并把这次政变解释成是‘知其数而顺乎人’的正义行为。同时，封建社会有一条‘为尊者讳’的伦理道德标准，凡皇帝或父亲的恶性，或是隐而不书，或是把责任推给臣下或他人。譬如，宋高宗和秦桧主和投降，实际上，主和的责任不全在秦桧，起决定作用的是幕后的高宗赵构，这在《宋史·奸臣传》的《秦桧传》里，是多少有所反映的。特别是洋洋4000万言的二十四史，写的差不多都是帝王将相，人民群众的生活情形、生产情形，大多是只字不提，有的写了些，也是笼统地一笔带过，目的是谈如何加强统治的问题。有的更被歪曲地写了进去，如农民反压迫、剥削的斗争，一律被骂成十恶不赦的‘匪’、‘贼’、‘逆’。这是最不符合历史真实的假话。”</p></blockquote><blockquote><p>毛泽东还说：“搞文学史的人，一定要好好地读历史，要认真地读《资治通鉴》、二十四史。但要用马克思主义的立场、观点和方法读，否则就读不好，弄不清历史发展的头绪。要明白，所谓正史，那是指合乎封建统治阶级要求的‘正’，所以，书里总是给统治阶级制造迷信，说许多天命、符瑞之类的骗人的鬼话。所以书里要‘为尊者讳’，并把反抗他们起义的农民群众骂做‘匪’。其实，有些稗官野史由于不是官方修撰的，有时倒会写出点实情。所以，二十四史要读，《资治通鉴》要读，稗官野史、笔记小说也要读。历史书籍要多读，多读一本，就多了一份调查研究。读得多了，又有正确的立场和观点，进行判断和评论，就较少失误，这是辩证法，也是把被颠倒的历史再颠倒过来的重要的条件。”</p></blockquote><p>​“有多少风流人物？盗跖庄蹻流誉后，更陈王奋起挥黄钺”，此句可见，毛泽东对历史中帝王将相的丰功伟绩没有多加赞赏，反而对于盗跖、庄蹻、陈胜这样揭竿而起、反抗暴政的英雄更加敬佩，认为他们才是风流人物。粪土当年万户侯，而人民才是历史的创造者。</p><p>​“歌未竟，东方白”这句话有着不同的理解。一种是积极乐观的：历史这一首诗歌还没唱完，天就已经亮了，东方出现太阳，寓意着作者对未来充满期待，数风流人物还看今朝；另一种带有着悲观的色彩：结合当时时代背景来看，这首诗写于1965年，而在1963年的时候，毛泽东曾严厉批党内的腐败风气“进京赶考不及格了”、“很多干部快变成了李自成”。他突然明白阶级斗争从未结束，仍要继续斗争。</p><p>​</p><p>​这首诗的解读更多是翻看别人的感想汇总的，希望多年之后我再次读，会有不同的感受。</p><h4 id="参考资料">参考资料</h4><p>[1] 知乎 落花飞絮 <a href="https://www.zhihu.com/question/23701356/answer/175949600">https://www.zhihu.com/question/23701356/answer/175949600</a></p><p>[2] <a href="http://www.xinfajia.net/content/wview/11955.page">http://www.xinfajia.net/content/wview/11955.page</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>verilog基础</title>
    <link href="/wuhlan3/2020/11/17/verilog%E5%9F%BA%E7%A1%80/"/>
    <url>/wuhlan3/2020/11/17/verilog%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1>Verilog HDL基础</h1><p>​硬件描述语言HDL（Hardware Description Language）是硬件设计人员和电子自动化（EDA）工具之间的接口，其主要目的是用来编写设计文件，建立电子系统行为级的仿真模型。</p><p>​硬件描述语言利用计算机的强大功能对用HDL建模的复杂数字逻辑进行仿真，然后自动综合以生成符合要求且再电路结构上可以实现的数字逻辑网表（Netlist），根据网表和某种工艺的器件自动生成具体电路然后生成该工艺条件下这种具体电路的延时模型。仿真验证无误后用于制造ASIC芯片或写入CPLD和FPGA器件中。</p><p>这种特殊结构能够：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1.描述电路的连接<br>2.描述电路的功能<br>3.在不同抽象级上描述电路<br>4.描述电路的时序<br>5.表达具有并行性<br></code></pre></td></tr></table></figure><p>HDL主要有两种：Verilog 和 VHDL</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.verilog 起源于C语言，容易掌握<br><span class="hljs-attribute">2</span>.VHDL格式严谨<br><span class="hljs-attribute">3</span>.VHDL出现较晚，但标准化早。IEEE <span class="hljs-number">1706</span>-<span class="hljs-number">1985</span>标准<br></code></pre></td></tr></table></figure><p>行为级的抽象：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">·系统级<span class="hljs-comment">(system)</span><br>·算法级<span class="hljs-comment">(algorithm)</span><br>·寄存器传输级<span class="hljs-comment">(RTL)</span><span class="hljs-comment">(Register Transfer Level)</span><br>·逻辑门级<span class="hljs-comment">(gate)</span><br>·开关电路级<span class="hljs-comment">(switch)</span><br></code></pre></td></tr></table></figure><p>对于这些，较适合使用Verilog设计；对于特大型（千万门级以上）的系统级设计，则VHDL比较合适。</p><h3 id="Verilog的设计方法">Verilog的设计方法</h3><ol><li>自顶向下（top-down）（与模拟电路自底向上相对）</li></ol><p><img src="1.png" alt="img"></p><ol start="2"><li><p>模块设计流程：</p><p><img src="2.png" alt="img"></p></li></ol><p><strong>需求分析</strong></p><p>工作人员需要对用户提出的功能要求进行分析理解，做出电路系统的整体规划，形成详细的技术指标，确定初步方案。例如，要设计一个电子屏，需要考虑供电方式、工作频率、产品体积、成本、功耗等，电路实现采用 ASIC 还是选用 FPGA/CPLD 器件等。</p><p><strong>功能划分</strong></p><p>正确地分析了用户的电路需求后，就可以进行逻辑功能的总体设计，设计整个电路的功能、接口和总体结构，考虑功能模块的划分和设计思路，各子模块的接口和时序（包括接口时序和内部信号的时序）等，向项目组成员合理分配子模块设计任务。</p><p><strong>文本描述</strong></p><p>可以用任意的文本编辑器，也可以用专用的 HDL 编辑环境，对所需求的数字电路进行设计建模，保存为 <strong>.v</strong> 文件。</p><p><strong>功能仿真（前仿真）</strong></p><p>对建模文件进行编译，对模型电路进行功能上的仿真验证，查找设计的错误并修正。</p><p>此时的仿真验证并没有考虑到信号的延迟等一些 timing 因素，只是验证逻辑上的正确性。</p><p><strong>逻辑综合</strong></p><p>综合（synthesize），就是在标准单元库和特定的设计约束的基础上，将设计的高层次描述（Verilog 建模）转换为门级网表的过程。逻辑综合的目的是产生物理电路门级结构，并在逻辑、时序上进行一定程度的优化，寻求逻辑、面积、功耗的平衡，增强电路的可测试性。</p><p>但不是所有的 Verilog 语句都是可以综合成逻辑单元的，例如时延语句。</p><p><strong>布局布线</strong></p><p>根据逻辑综合出的网表与约束文件，利用厂家提供的各种基本标准单元库，对门级电路进行布局布线。至此，已经将 Verilog 设计的数字电路，设计成由标准单元库组成的数字电路。</p><p><strong>时序仿真（后仿真）</strong></p><p>布局布线后，电路模型中已经包含了时延信息。利用在布局布线中获得的精确参数，用仿真软件验证电路的时序。单元器件的不同、布局布线方案都会给电路的时序造成影响，严重时会出现错误。出错后可能就需要重新修改 RTL（寄存器传输级描述，即 Verilog 初版描述），重复后面的步骤。这样的过程可能反复多次，直至错误完全排除。</p><p><strong>FPGA/CPLD 下载或 ASIC 制造工艺生产</strong></p><p>完成上面所有步骤后，就可以通过开发工具将设计的数字电路目标文件下载到 FPGA/CPLD 芯片中，然后在电路板上进行调试、验证。</p><p>如果要在 ASIC 上实现，则需要制造芯片。一般芯片制造时，也需要先在 FPGA 板卡上进行逻辑功能的验证。</p><h3 id="基础语法">基础语法</h3><h4 id="多路选择器">多路选择器</h4><p>（没有考虑延时问题）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> muxtwo(out, a, b, s1);    <span class="hljs-comment">//该模块中包含这些变量</span><br>    <span class="hljs-keyword">input</span> a,b,s1;<br>    <span class="hljs-keyword">output</span> out;<br>    <span class="hljs-keyword">reg</span> out;<br>    <span class="hljs-keyword">always</span> @(s1 <span class="hljs-keyword">or</span> a <span class="hljs-keyword">or</span> b)        <span class="hljs-comment">//当sl或a或b发生变化时，执行下列语句</span><br>    <span class="hljs-keyword">if</span> (! s1) out = a;<br>    <span class="hljs-keyword">else</span> out = b;<br>    <span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><img src="3.png" alt="image-20201109201401720"></p><p>结构级描述（描述中含有传输延时）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> twomux(out,a,b,s1);<br>    <span class="hljs-keyword">input</span> a,b,s1;<br>    <span class="hljs-keyword">output</span> out;<br>    <span class="hljs-keyword">not</span> u1(ns1, s1);            <span class="hljs-comment">//ns1 非门</span><br>    <span class="hljs-keyword">and</span> #<span class="hljs-number">1</span> u2(se1a, a, ns1);    <span class="hljs-comment">//se1a se1b 与门a和b</span><br>    <span class="hljs-keyword">and</span> #<span class="hljs-number">1</span> u3(se1b, b, s1);<br>    <span class="hljs-keyword">or</span>    #<span class="hljs-number">2</span> u4(out, se1a, se1b);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="三位加法器">三位加法器</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> adder(count, sum, a, b, cin);<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] a,b;<span class="hljs-comment">//分配三位</span><br>    <span class="hljs-keyword">input</span> cin;<span class="hljs-comment">//输入进位</span><br>    <span class="hljs-keyword">output</span> cout;<span class="hljs-comment">//输出进位</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] sum;<br>    <span class="hljs-keyword">assign</span> &#123;cout, sum&#125; = a+b+cin; <br>    <span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="两位比较器">两位比较器</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> compare(equal,a,b);<br>    <span class="hljs-keyword">output</span> equal;<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]a,b;<br>    <span class="hljs-keyword">assign</span> equal=(a==b) ? <span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="三、模块">三、模块</h2><p>模块分为两部分：一、描述接口；二、描述逻辑功能</p><p>声明输入输出口：<code>module 模块名(口1,口2,口3,……)</code></p><h5 id="1-I-O说明：">1.I/O说明：</h5><p>输入口：<code>input[信号位宽-1:0]端口名</code></p><p>输出口：<code>output[信号位宽-1:0]端口名</code></p><p>输入/输出口：<code>inout[信号位宽-1:0]端口名</code></p><p>也可以卸载端口声明中：<code>module module_name(input port1, input port2,output port1, output port2……)</code></p><h5 id="2-内部信号说明：">2.内部信号说明：</h5><p>在模块内用到的和与端口有关的wire和 reg 类型变量的声明。</p><p>如<code>reg[width-1:0]R变量1,R变量2……;</code></p><p><code>wire[width-1:0]W变量1,W变量2……;</code></p><h5 id="3-功能定义">3.功能定义</h5><p>（1）<code>assign</code>声明，如<code>assign a = b &amp; c;</code></p><p>（2）用实例元件，如<code>and #2 ul(q,a,b);</code>（ul是与门的名，#2指输出延迟两个单位时间，输入a,b，输出q）</p><p>（3）<code>always</code>块，如</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> clr);<br><span class="hljs-keyword">begin</span> <br>    <span class="hljs-keyword">if</span>(clr) q&lt;= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(en) q&lt;=d;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>注意：上述3种例子是同时执行的（并发），顺序不会影响功能的实现；但是在always模块内，逻辑是按照指定顺序执行</strong></p><p><img src="4.png" alt="image-20201115145325925"></p><p><img src="5.png" alt="image-20201115145339991"></p><h4 id="数据类型及其常量和变量">数据类型及其常量和变量</h4><p><img src="6.png" alt="image-20201115145641460"></p><p><img src="7.png" alt="image-20201115145742133"></p><p><img src="9.png" alt="image-20201115145844734"></p><p><img src="10.png" alt="image-20201115145903038"></p><h5 id="变量：">变量：</h5><ol><li><p>wire型</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">wire</span> a;            <span class="hljs-comment">//定义一个1位wire数据</span><br><span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]b;        <span class="hljs-comment">//定义一个8位wire数据</span><br><span class="hljs-keyword">wire</span>[<span class="hljs-number">4</span>:<span class="hljs-number">1</span>]c,d;    <span class="hljs-comment">//定义两个4位wire数据</span><br></code></pre></td></tr></table></figure></li><li><p>reg型</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span> rega;            <span class="hljs-comment">//定义一个1位reg数据</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]regb;        <span class="hljs-comment">//定义一个8位reg数据</span><br><span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">1</span>]regc,regd;    <span class="hljs-comment">//定义两个4位reg数据</span><br></code></pre></td></tr></table></figure><p><img src="11.png" alt="image-20201115150754701"></p></li><li><p>memory型</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] mema[<span class="hljs-number">255</span>,<span class="hljs-number">0</span>];    <span class="hljs-comment">//一个名为mema的存储器，有256个8位的寄存器</span><br></code></pre></td></tr></table></figure><p>区别：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[n-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] rega;    <span class="hljs-comment">//一个n位寄存器</span><br><span class="hljs-keyword">reg</span> mema [n-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>];    <span class="hljs-comment">//一个n个1位寄存器构成的存储器</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="四、运算符">四、运算符</h2><p><img src="12.png" alt="image-20201115151500409"></p><h4 id="Verilog特殊运算符">Verilog特殊运算符</h4><ol><li><code>===</code>和<code>!==</code></li></ol><p><img src="13.png" alt="image-20201115204158446"></p><ol start="2"><li><p>位拼接运算符</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&#123;a,b[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>],w,<span class="hljs-number">3&#x27;b101</span>&#125;<br>等于：&#123;a,b[<span class="hljs-number">3</span>],b[<span class="hljs-number">2</span>],b[<span class="hljs-number">1</span>],b[<span class="hljs-number">0</span>],w,<span class="hljs-number">1&#x27;b1</span>,<span class="hljs-number">1&#x27;b0</span>,<span class="hljs-number">1&#x27;b1</span>&#125;<br><br>&#123;<span class="hljs-number">4</span>&#123;w&#125;&#125;        <span class="hljs-comment">//等同于&#123;w,w,w,w&#125;</span><br>&#123;b,<span class="hljs-number">3</span>&#123;a,b&#125;&#125;    <span class="hljs-comment">//可嵌套，等同于&#123;b,a,b,a,b,a,b&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>缩减运算符</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] B;<br><span class="hljs-keyword">reg</span> C;<br>    C = &amp;B;<br><span class="hljs-comment">//相当于</span><br>    C = ((B[<span class="hljs-number">0</span>]&amp;B[<span class="hljs-number">1</span>])&amp;B[<span class="hljs-number">2</span>])&amp;[<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p><img src="14.png" alt="image-20201115205211934"></p></li></ol><h4 id="赋值语句">赋值语句</h4><ol><li><p>非阻塞赋值<code>a &lt;= b</code></p><p>(1)在语句块中，上述语句所赋的变量值不能立即为下面的语句所用</p><p>(2)块结束之后才能完成本次操作，而所赋的值是上次赋值得到的</p><p>(3)在编写可综合的时序逻辑模块时，这是最常用的赋值方法</p></li><li><p>阻塞赋值<code>a = b</code></p><p>(1)赋值语句执行完后，块才结束</p><p>(2)b的值在赋值语句执行完后，立刻就能改变</p><p>(3)在时序逻辑中使用，可能会出现意想不到的效果（贬义）</p></li></ol><p>简单理解</p><p>​1.非阻塞赋值：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br>    <span class="hljs-keyword">begin</span> <br>        b &lt;= a;<br>        c &lt;= b;<br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><img src="15.png" alt=""></p><ol start="2"><li>阻塞赋值：</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk)<br>    <span class="hljs-keyword">begin</span> <br>        b = a;<br>        c = b;<br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><img src="16.png" alt="image-20201115211628565"></p><h4 id="块语句">块语句</h4><ol><li><p>顺序块</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">begin</span><br>    语句<span class="hljs-number">1</span>；<br>    语句<span class="hljs-number">2</span>；<br>    ……<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">begin</span>:块名<br>    语句<span class="hljs-number">1</span>；<br>    语句<span class="hljs-number">2</span>；<br>    ……<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li><li><p>并行块</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">fork</span><br>    语句<span class="hljs-number">1</span>：<br>    语句<span class="hljs-number">2</span>：<br>    ……<br><span class="hljs-keyword">join</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">fork</span>:块名<br>    语句<span class="hljs-number">1</span>：<br>    语句<span class="hljs-number">2</span>：<br>    ……<br><span class="hljs-keyword">join</span><br></code></pre></td></tr></table></figure></li><li><p>起始时间和结束时间</p><p>顺序块：起始时间就是第一条语句开始被执行的时间，结束时间就是最后一条语句执行完的时间</p><p>并行块：起始时间对于所有块来说是相同的，结束时间是按时间排序在最后的语句执行结束的时间。</p></li></ol><p>分支与循环</p><ol><li><p>if 没啥好说的</p></li><li><p>case：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] rega;<br><span class="hljs-keyword">reg</span>[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>]  result;<br><span class="hljs-keyword">case</span>(rega)<br>    <span class="hljs-number">16&#x27;d0</span>: result = <span class="hljs-number">10&#x27;b0111_1111_11</span><br>    <span class="hljs-number">16&#x27;d1</span>: result = <span class="hljs-number">10&#x27;b1011_1111_11</span><br>    <span class="hljs-number">16&#x27;d2</span>: result = <span class="hljs-number">10&#x27;b1101_1111_11</span><br>    <span class="hljs-number">16&#x27;d3</span>: result = <span class="hljs-number">10&#x27;b1110_1111_11</span><br>    <span class="hljs-number">16&#x27;d4</span>: result = <span class="hljs-number">10&#x27;b1111_0111_11</span><br>    <span class="hljs-number">16&#x27;d5</span>: result = <span class="hljs-number">10&#x27;b1111_1111_11</span><br>    <span class="hljs-number">16&#x27;d6</span>: result = <span class="hljs-number">10&#x27;b1111_1111_11</span><br>    <span class="hljs-number">16&#x27;d7</span>: result = <span class="hljs-number">10&#x27;b1111_1111_11</span><br>    <span class="hljs-number">16&#x27;d8</span>: result = <span class="hljs-number">10&#x27;b1111_1111_11</span><br>    <span class="hljs-number">16&#x27;d9</span>: result = <span class="hljs-number">10&#x27;b1111_1111_11</span><br>    <span class="hljs-keyword">default</span>: result = <span class="hljs-number">10&#x27;bx</span><br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure></li><li><p>forever（多用于产生周期性波形）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">forever</span> 语句；<br>或：<br><span class="hljs-keyword">forever</span><br>    <span class="hljs-keyword">begin</span><br>        多条语句<br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li><li><p>repeat（后常接常量表达式）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">repeat</span>(表达式) 语句；<br>或：<br><span class="hljs-keyword">repeat</span>（表达式）<br>    <span class="hljs-keyword">begin</span><br>        多条语句<br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">while</span>(表达式) 语句；<br>或：<br><span class="hljs-keyword">while</span>（表达式）<br>    <span class="hljs-keyword">begin</span><br>        多条语句<br>    <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li><li><p>for 没啥好说的</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可怜的小猪</title>
    <link href="/wuhlan3/2020/10/29/%E5%8F%AF%E6%80%9C%E7%9A%84%E5%B0%8F%E7%8C%AA/"/>
    <url>/wuhlan3/2020/10/29/%E5%8F%AF%E6%80%9C%E7%9A%84%E5%B0%8F%E7%8C%AA/</url>
    
    <content type="html"><![CDATA[<h5 id="题目">题目</h5><p>有 1000 只水桶，其中有且只有一桶装的含有毒药，其余装的都是水。它们从外观看起来都一样。如果小猪🐷喝了毒药，它会在 15 分钟内死去。</p><p>问题来了，如果需要你在一小时内，弄清楚哪只水桶含有毒药，你最少需要多少只猪？</p><p>回答这个问题，并为下列的进阶问题编写一个通用算法。</p><h5 id="进阶">进阶:</h5><p>假设有 n 只水桶，猪饮水中毒后会在 m 分钟内死亡，你需要多少猪（x）就能在 p 分钟内找出 “有毒” 水桶？这 n 只水桶里有且仅有一只有毒的桶。</p><h5 id="提示：">提示：</h5><p>可以允许小猪同时饮用任意数量的桶中的水，并且该过程不需要时间。<br>小猪喝完水后，必须有 m 分钟的冷却时间。在这段时间里，只允许观察，而不允许继续饮水。<br>任何给定的桶都可以无限次采样（无限数量的猪）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">poorPigs</span><span class="hljs-params">(<span class="hljs-type">int</span> buckets, <span class="hljs-type">int</span> minutesToDie, <span class="hljs-type">int</span> minutesToTest)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(buckets == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> matrixsize = minutesToTest / minutesToDie +<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> pigsnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(max &lt; buckets)&#123;<br>        pigsnum++;<br>        max = <span class="hljs-built_in">pow</span>(matrixsize,pigsnum);<br>    &#125;<br>    <span class="hljs-keyword">return</span> pigsnum;<br>&#125;<br></code></pre></td></tr></table></figure><p>或：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">poorPigs</span><span class="hljs-params">(<span class="hljs-type">int</span> buckets, <span class="hljs-type">int</span> minutesToDie, <span class="hljs-type">int</span> minutesToTest)</span> </span>&#123;<br>        <span class="hljs-type">int</span> states = minutesToTest / minutesToDie + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">log</span>(buckets) / <span class="hljs-built_in">log</span>(states));<br>    &#125;<br></code></pre></td></tr></table></figure><p>详细思路可看：<a href="https://leetcode-cn.com/problems/poor-pigs/solution/ke-lian-de-xiao-zhu-by-leetcode/">https://leetcode-cn.com/problems/poor-pigs/solution/ke-lian-de-xiao-zhu-by-leetcode/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空瓶换新酒</title>
    <link href="/wuhlan3/2020/10/29/%E7%A9%BA%E7%93%B6%E6%8D%A2%E6%96%B0%E9%85%92/"/>
    <url>/wuhlan3/2020/10/29/%E7%A9%BA%E7%93%B6%E6%8D%A2%E6%96%B0%E9%85%92/</url>
    
    <content type="html"><![CDATA[<h2 id="空瓶换新酒">空瓶换新酒</h2><p>小区便利店正在促销，用 numExchange 个空酒瓶（&gt;1）可以兑换一瓶新酒。你购入了 numBottles 瓶酒。</p><p>如果喝掉了酒瓶中的酒，那么酒瓶就会变成空的。</p><p>请你计算 最多能喝到多少瓶酒。(不可以赊账，可以思考如何使用$O(1)$的方法来解决)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">input:</span><br>T <span class="hljs-comment">//测试样例总数:</span><br>numBottles numExchange<br>…<br>示例：<br>输入：<br><span class="hljs-number">9</span> <span class="hljs-number">3</span><br>输出：<br><span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><h4 id="递归法">递归法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numWaterBottles</span><span class="hljs-params">(<span class="hljs-type">int</span> numBottles, <span class="hljs-type">int</span> numExchange)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(numBottles &lt; numExchange)&#123;<br>        <span class="hljs-keyword">return</span> numBottles;<br>    &#125;<br>    <span class="hljs-type">int</span> drunk = numBottles - numBottles % numExchange;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">numWaterBottles</span>(numBottles / numExchange+numBottles % numExchange, numExchange) + drunk;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">int</span> numBottles,numExchange;<br>        cin&gt;&gt;numBottles&gt;&gt;numExchange;<br>        cout&lt;&lt;<span class="hljs-built_in">numWaterBottles</span>(numBottles, numExchange);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="O-1-法">O(1)法</h4><p><img src="bottle.png" alt="bottle"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">int</span> numBottles,numExchange;<br>        cin&gt;&gt;numBottles&gt;&gt;numExchange;<br>        cout&lt;&lt;(numBottles * numExchange<span class="hljs-number">-1</span>)/(numExchange<span class="hljs-number">-1</span>)&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIPS</title>
    <link href="/wuhlan3/2020/10/16/MIPS/"/>
    <url>/wuhlan3/2020/10/16/MIPS/</url>
    
    <content type="html"><![CDATA[<h4 id="二、MIPS操作数之32个寄存器">二、MIPS操作数之32个寄存器</h4><table><thead><tr><th style="text-align:left">寄存器名字</th><th style="text-align:left">寄存器编号</th><th style="text-align:left">寄存器功能</th></tr></thead><tbody><tr><td style="text-align:left"><code>$zero</code></td><td style="text-align:left"><code>$0</code></td><td style="text-align:left">恒等于零</td></tr><tr><td style="text-align:left"><code>$at</code></td><td style="text-align:left"><code>$1</code></td><td style="text-align:left">被汇编器保留，用于处理大的常数</td></tr><tr><td style="text-align:left"><code>$v0 – $v1</code></td><td style="text-align:left"><code>$2-$3</code></td><td style="text-align:left">存放函数返回值</td></tr><tr><td style="text-align:left"><code>$a0 – $a3</code></td><td style="text-align:left"><code>$4-$7</code></td><td style="text-align:left">传递函数参数</td></tr><tr><td style="text-align:left"><code>$t0 – $t7</code></td><td style="text-align:left"><code>$8-$15</code></td><td style="text-align:left">存放临时变量</td></tr><tr><td style="text-align:left"><code>$s0 – $s7</code></td><td style="text-align:left"><code>$16-$23</code></td><td style="text-align:left">存放需要保存的临时值</td></tr><tr><td style="text-align:left"><code>$t8 – $t9</code></td><td style="text-align:left"><code>$24-$25</code></td><td style="text-align:left">额外的存放临时变量</td></tr><tr><td style="text-align:left"><code>$k0 – $k1</code></td><td style="text-align:left"><code>$26-$27</code></td><td style="text-align:left">用于操作系统内核</td></tr><tr><td style="text-align:left"><code>$gp</code></td><td style="text-align:left"><code>$28</code></td><td style="text-align:left">指向全局变量的指针</td></tr><tr><td style="text-align:left"><code>$sp</code></td><td style="text-align:left"><code>$29</code></td><td style="text-align:left">指向栈顶的指针</td></tr><tr><td style="text-align:left"><code>$fp</code></td><td style="text-align:left"><code>$30</code></td><td style="text-align:left">指向栈帧[^footnote2]的指针</td></tr><tr><td style="text-align:left"><code>$ra</code></td><td style="text-align:left"><code>$31</code></td><td style="text-align:left">返回地址，用于函数调用</td></tr></tbody></table><h4 id="三、MIPS汇编语言指令类型及寻址方式">三、MIPS汇编语言指令类型及寻址方式</h4><p><img src="mips1.png" alt="image-20201016100110436"></p><p><img src="mips2.png" alt="image-20201016100254039"></p><p>不调用其他过程的过程称为<strong>叶过程</strong>（leaf procedure）</p><h5 id="编译一个不调用其他过程的C过程">编译一个不调用其他过程的C过程</h5><p>思考步骤：</p><ol><li>保存调用过程之后，还需要使用的寄存器<code>$t0~$t7</code>、<code>$a0~$a1</code>、<code>$v0~$v1</code></li><li>保存用到的参数（<code>$a0~$a1</code>）</li><li>保存返回地址<code>$ra</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">leaf_example</span><span class="hljs-params">(<span class="hljs-type">int</span> g, <span class="hljs-type">int</span> h, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>    <span class="hljs-type">int</span> f;<br>    f = (g+h)-(i+j);<br>    <span class="hljs-keyword">return</span> f<br>&#125;<br></code></pre></td></tr></table></figure><p>MIPS：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">leaf_example:</span><br>    <span class="hljs-keyword">addi</span>$<span class="hljs-built_in">sp</span>, $<span class="hljs-built_in">sp</span>, -<span class="hljs-number">12</span> <span class="hljs-comment">#在栈中分配3个空间</span><br>    <span class="hljs-keyword">sw</span>$<span class="hljs-built_in">t1</span>, <span class="hljs-number">8</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#push $t1</span><br>    <span class="hljs-keyword">sw</span>$<span class="hljs-built_in">t0</span>, <span class="hljs-number">4</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#push $t0</span><br>    <span class="hljs-keyword">sw</span>$<span class="hljs-built_in">s0</span>, <span class="hljs-number">0</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#push $s0</span><br>    <br>    <span class="hljs-keyword">add</span>$<span class="hljs-built_in">t0</span>, $<span class="hljs-built_in">a0</span>, $<span class="hljs-built_in">a1</span><span class="hljs-comment">#t0 = g + h</span><br>    <span class="hljs-keyword">add</span>$<span class="hljs-built_in">t1</span>, $<span class="hljs-built_in">a2</span>, $<span class="hljs-built_in">a3</span><span class="hljs-comment">#t1 = i + j</span><br>    <span class="hljs-keyword">sub </span>$<span class="hljs-built_in">s0</span>, $<span class="hljs-built_in">t0</span>, $<span class="hljs-built_in">t1</span><span class="hljs-comment">#f = g + h - (i + j)</span><br>    <span class="hljs-keyword">add</span>$<span class="hljs-built_in">v0</span>, $<span class="hljs-built_in">s0</span>, $<span class="hljs-built_in">zero</span><span class="hljs-comment">#将f放入一个返回值寄存器v0中</span><br>    <br>    <span class="hljs-keyword">lw </span>$<span class="hljs-built_in">s0</span>, <span class="hljs-number">0</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#弹出s0</span><br>    <span class="hljs-keyword">lw </span>$<span class="hljs-built_in">t0</span>, <span class="hljs-number">4</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#弹出t0</span><br>    <span class="hljs-keyword">lw</span>$<span class="hljs-built_in">t1</span>, <span class="hljs-number">8</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#弹出t1</span><br>    <span class="hljs-keyword">addi</span>$<span class="hljs-built_in">sp</span>, $<span class="hljs-built_in">sp</span>, <span class="hljs-number">12</span><span class="hljs-comment">#恢复</span><br>    <br>    <span class="hljs-keyword">jr</span>$<span class="hljs-built_in">ra</span><span class="hljs-comment">#根据返回地址跳转</span><br></code></pre></td></tr></table></figure><h5 id="编译一个递归C过程">编译一个递归C过程</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> (n*fact(n<span class="hljs-number">-1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>MIPS:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">fact:</span><br>    <span class="hljs-keyword">addi</span>$<span class="hljs-built_in">sp</span>, $<span class="hljs-built_in">sp</span>, -<span class="hljs-number">8</span><span class="hljs-comment">#在栈中分配两个空间</span><br>    <span class="hljs-keyword">sw</span>$<span class="hljs-built_in">ra</span>, <span class="hljs-number">4</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#push ra, 如果没有这一步就回不来了</span><br>    <span class="hljs-keyword">sw</span>$<span class="hljs-built_in">a0</span>, <span class="hljs-number">0</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#push n</span><br>    <br>    <span class="hljs-keyword">slti</span>$<span class="hljs-built_in">t0</span>, $<span class="hljs-built_in">a0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">beq</span>$<span class="hljs-built_in">t0</span>, $<span class="hljs-built_in">zero</span>, L1<span class="hljs-comment">#if(n&gt;=1),goto L1</span><br>    <br>    <span class="hljs-keyword">addi</span>$<span class="hljs-built_in">v0</span>, $<span class="hljs-built_in">zero</span>, <span class="hljs-number">1</span><span class="hljs-comment">#return 1</span><br>    <span class="hljs-keyword">addi </span>$<span class="hljs-built_in">sp</span>, $<span class="hljs-built_in">sp</span>, <span class="hljs-number">8</span><span class="hljs-comment">#弹出</span><br>    <span class="hljs-keyword">jr</span>$<span class="hljs-built_in">ra</span><br><span class="hljs-symbol">    </span><br><span class="hljs-symbol">L1:</span><br>    <span class="hljs-keyword">addi</span>$<span class="hljs-built_in">a0</span>, $<span class="hljs-built_in">a0</span>, -<span class="hljs-number">1</span><span class="hljs-comment"># n = n - 1</span><br>    <span class="hljs-keyword">jal </span>    fact<span class="hljs-comment"># 递归调用fact，此时v0= fact(n-1)</span><br>    <br>    <span class="hljs-keyword">lw    </span>$<span class="hljs-built_in">a0</span>, <span class="hljs-number">0</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#取出a0</span><br>    <span class="hljs-keyword">lw    </span>$<span class="hljs-built_in">ra</span>, <span class="hljs-number">4</span>($<span class="hljs-built_in">sp</span>)<span class="hljs-comment">#取出ra</span><br>    <span class="hljs-keyword">addi    </span>$<span class="hljs-built_in">sp</span>, $<span class="hljs-built_in">sp</span>, <span class="hljs-number">8</span><span class="hljs-comment">#栈弹出两个空间</span><br>    <br>    <span class="hljs-keyword">mul </span>     $<span class="hljs-built_in">v0</span>, $<span class="hljs-built_in">a0</span>, $<span class="hljs-built_in">v0</span> <span class="hljs-comment">#return n*fact(n-1)</span><br>    <br>    <span class="hljs-keyword">jr    </span>$<span class="hljs-built_in">ra</span><br></code></pre></td></tr></table></figure><p>未完待续……</p><h3 id="参考资料">参考资料</h3><p>[1]https://blog.csdn.net/qq_32146369/article/details/79006728</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十大排序</title>
    <link href="/wuhlan3/2020/10/07/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
    <url>/wuhlan3/2020/10/07/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="十大排序算法">十大排序算法</h2><p><strong>经典图镇楼</strong></p><p><img src="sort.png" alt="image-festival"></p><p>在STL中，是以函数sort实现的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(iterator begin, iterator end)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(iterator begin, iterator end, comparator cmp)</span></span>;<br></code></pre></td></tr></table></figure><p>迭代器必须支持随机访问。sort算法并不能保证相等的项保持他们原有的顺序。（若这很重要，可以使用<code>stable_sort</code>）这里一般使用的是快速排序。</p><h3 id="冒泡排序">冒泡排序</h3><p><img src="bubbleSort.gif" alt="image-festival"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-comment">//整数或浮点数皆可使用,若使用类(class)或结构体(struct)时必须重载大于(&gt;)运算符</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(T arr[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i, j;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>                        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>                                <span class="hljs-built_in">swap</span>(arr[j], arr[j + <span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序">选择排序</h3><p><img src="selectionSort.gif" alt="image-festival"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-comment">//整数或浮点数皆可使用,若使用类(class)或结构体(struct)时必须重载大于(&gt;)运算符</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(std::vector&lt;T&gt;&amp; arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-type">int</span> min = i;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.<span class="hljs-built_in">size</span>(); j++)<br>                        <span class="hljs-keyword">if</span> (arr[j] &lt; arr[min])<br>                                min = j;<br>                std::<span class="hljs-built_in">swap</span>(arr[i], arr[min]);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=""></h3><h3 id="插入排序">插入排序</h3><p><img src="insertionSort.gif" alt="image-festival"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; array.length;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> temp = array[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;j &gt;= <span class="hljs-number">0</span>;j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(array[j] &gt; temp)<br>            &#123;<br>                array[j + <span class="hljs-number">1</span>] = array[j];<br>                array[j] = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="-2"></h3><h3 id="希尔排序">希尔排序</h3><p><img src="shellsort.jpg" alt="image-festival"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">(T array[], <span class="hljs-type">int</span> length)</span> </span>&#123;<br>    <span class="hljs-type">int</span> h = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (h &lt; length / <span class="hljs-number">3</span>) &#123;<br>        h = <span class="hljs-number">3</span> * h + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (h &gt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h; i &lt; length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &gt;= h &amp;&amp; array[j] &lt; array[j - h]; j -= h) &#123;<br>                std::<span class="hljs-built_in">swap</span>(array[j], array[j - h]);<br>            &#125;<br>        &#125;<br>        h = h / <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="-3"></h3><h3 id="归并排序">归并排序</h3><p><img src="mergeSort.gif" alt="image-festival"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(T arr[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    T *a = arr;<br>    T *b = <span class="hljs-keyword">new</span> T[len];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> seg = <span class="hljs-number">1</span>; seg &lt; len; seg += seg) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> start = <span class="hljs-number">0</span>; start &lt; len; start += seg + seg) &#123;<br>            <span class="hljs-type">int</span> low = start, mid = <span class="hljs-built_in">min</span>(start + seg, len), high = <span class="hljs-built_in">min</span>(start + seg + seg, len);<br>            <span class="hljs-type">int</span> k = low;<br>            <span class="hljs-type">int</span> start1 = low, end1 = mid;<br>            <span class="hljs-type">int</span> start2 = mid, end2 = high;<br>            <span class="hljs-keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)<br>                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];<br>            <span class="hljs-keyword">while</span> (start1 &lt; end1)<br>                b[k++] = a[start1++];<br>            <span class="hljs-keyword">while</span> (start2 &lt; end2)<br>                b[k++] = a[start2++];<br>        &#125;<br>        T *temp = a;<br>        a = b;<br>        b = temp;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a != arr) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>            b[i] = a[i];<br>        b = a;<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[] b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="-4"></h3><h3 id="快速排序">快速排序</h3><p><img src="quickSort.gif" alt="image-festival"></p><p><strong>迭代法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 参考：http://www.dutor.net/index.php/2011/04/recursive-iterative-quick-sort/</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Range</span> &#123;<br>    <span class="hljs-type">int</span> start, end;<br>    <span class="hljs-built_in">Range</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> e = <span class="hljs-number">0</span>) &#123;<br>        start = s, end = e;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(T arr[], <span class="hljs-type">const</span> <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>; <br>    Range r[len];<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    r[p++] = <span class="hljs-built_in">Range</span>(<span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> (p) &#123;<br>        Range range = r[--p];<br>        <span class="hljs-keyword">if</span> (range.start &gt;= range.end)<br>            <span class="hljs-keyword">continue</span>;<br>        T mid = arr[range.end];<br>        <span class="hljs-type">int</span> left = range.start, right = range.end - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right) left++;<br>            <span class="hljs-keyword">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right) right--;<br>            std::<span class="hljs-built_in">swap</span>(arr[left], arr[right]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[left] &gt;= arr[range.end])<br>            std::<span class="hljs-built_in">swap</span>(arr[left], arr[range.end]);<br>        <span class="hljs-keyword">else</span><br>            left++;<br>        r[p++] = <span class="hljs-built_in">Range</span>(range.start, left - <span class="hljs-number">1</span>);<br>        r[p++] = <span class="hljs-built_in">Range</span>(left + <span class="hljs-number">1</span>, range.end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>递归法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort_recursive</span><span class="hljs-params">(T arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= end)<br>        <span class="hljs-keyword">return</span>;<br>    T mid = arr[end];<br>    <span class="hljs-type">int</span> left = start, right = end - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123; <span class="hljs-comment">//在整个范围内搜寻比枢纽元值小或大的元素，然后将左侧元素与右侧元素交换</span><br>        <span class="hljs-keyword">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right) <span class="hljs-comment">//试图在左侧找到一个比枢纽元更大的元素</span><br>            left++;<br>        <span class="hljs-keyword">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right) <span class="hljs-comment">//试图在右侧找到一个比枢纽元更小的元素</span><br>            right--;<br>        std::<span class="hljs-built_in">swap</span>(arr[left], arr[right]); <span class="hljs-comment">//交换元素</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (arr[left] &gt;= arr[end])<br>        std::<span class="hljs-built_in">swap</span>(arr[left], arr[end]);<br>    <span class="hljs-keyword">else</span><br>        left++;<br>    <span class="hljs-built_in">quick_sort_recursive</span>(arr, start, left - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">quick_sort_recursive</span>(arr, left + <span class="hljs-number">1</span>, end);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(T arr[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-built_in">quick_sort_recursive</span>(arr, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆排序">堆排序</h3><p><img src="heapSort.gif" alt="heapSort"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//堆调整</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">max_heapify</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>   <br>    <span class="hljs-type">int</span> dad = start;<br>    <span class="hljs-type">int</span> son = dad * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (son &lt;= end) &#123; <span class="hljs-comment">// 要求子节点在范围内</span><br>        <span class="hljs-keyword">if</span> (son + <span class="hljs-number">1</span> &lt;= end &amp;&amp; arr[son] &lt; arr[son + <span class="hljs-number">1</span>]) <span class="hljs-comment">// 判断是否有另一个更大的子节点</span><br>            son++;<br>        <span class="hljs-keyword">if</span> (arr[dad] &gt; arr[son]) <span class="hljs-comment">// 如果父节点最大，则不需要交换</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 交换父子位置后，进行子孙的比较</span><br>            <span class="hljs-built_in">swap</span>(arr[dad], arr[son]);<br>            dad = son;<br>            son = son * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-comment">//初始化，使初始数组变成大顶堆，时间复杂度为nlogn</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-built_in">max_heapify</span>(arr, i, len - <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//将堆顶放到最后，然后再调节为大顶堆，复杂度也为nlogn</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[i]);<br>        <span class="hljs-built_in">max_heapify</span>(arr, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-type">int</span> len = (<span class="hljs-type">int</span>) <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(*arr);<br>    <span class="hljs-built_in">heap_sort</span>(arr, len);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计数排序">计数排序</h3><p>未完待续……</p><h3 id="桶排序">桶排序</h3><h3 id="基数排序">基数排序</h3><h3 id="参考资料">参考资料</h3><p>[1]https://www.runoob.com/w3cnote/ten-sorting-algorithm.html</p><p>[2]https://zhuanlan.zhihu.com/p/61488756</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFS——打开转盘锁</title>
    <link href="/wuhlan3/2020/10/06/BFS%E2%80%94%E2%80%94%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/"/>
    <url>/wuhlan3/2020/10/06/BFS%E2%80%94%E2%80%94%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h2 id="752-打开转盘锁"><a href="https://leetcode-cn.com/problems/open-the-lock/">752. 打开转盘锁</a></h2><h3 id="题意解析">题意解析</h3><p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： <code>'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'</code> 。每个拨轮可以自由旋转：例如把 <code>'9'</code> 变为 <code>'0'</code>，<code>'0'</code> 变为 <code>'9'</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p><p>锁的初始数字为 <code>'0000'</code> ，一个代表四个拨轮的数字的字符串。</p><p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p><p>字符串 <code>target</code> 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。</p><p><strong>示例 1:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入：deadends = [<span class="hljs-string">&quot;0201&quot;</span>,<span class="hljs-string">&quot;0101&quot;</span>,<span class="hljs-string">&quot;0102&quot;</span>,<span class="hljs-string">&quot;1212&quot;</span>,<span class="hljs-string">&quot;2002&quot;</span>], target = <span class="hljs-string">&quot;0202&quot;</span><br>输出：<span class="hljs-number">6</span><br>解释：<br>可能的移动序列为 <span class="hljs-string">&quot;0000&quot;</span> -&gt; <span class="hljs-string">&quot;1000&quot;</span> -&gt; <span class="hljs-string">&quot;1100&quot;</span> -&gt; <span class="hljs-string">&quot;1200&quot;</span> -&gt; <span class="hljs-string">&quot;1201&quot;</span> -&gt; <span class="hljs-string">&quot;1202&quot;</span> -&gt; <span class="hljs-string">&quot;0202&quot;</span>。<br>注意 <span class="hljs-string">&quot;0000&quot;</span> -&gt; <span class="hljs-string">&quot;0001&quot;</span> -&gt; <span class="hljs-string">&quot;0002&quot;</span> -&gt; <span class="hljs-string">&quot;0102&quot;</span> -&gt; <span class="hljs-string">&quot;0202&quot;</span> 这样的序列是不能解锁的，<br>因为当拨动到 <span class="hljs-string">&quot;0102&quot;</span> 时这个锁就会被锁定。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: deadends = [<span class="hljs-string">&quot;8888&quot;</span>], target = <span class="hljs-string">&quot;0009&quot;</span><br>输出：<span class="hljs-number">1</span><br>解释：<br>把最后一位反向旋转一次即可 <span class="hljs-string">&quot;0000&quot;</span> -&gt; <span class="hljs-string">&quot;0009&quot;</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">输入: deadends = [<span class="hljs-string">&quot;8887&quot;</span>,<span class="hljs-string">&quot;8889&quot;</span>,<span class="hljs-string">&quot;8878&quot;</span>,<span class="hljs-string">&quot;8898&quot;</span>,<span class="hljs-string">&quot;8788&quot;</span>,<span class="hljs-string">&quot;8988&quot;</span>,<span class="hljs-string">&quot;7888&quot;</span>,<span class="hljs-string">&quot;9888&quot;</span>], <span class="hljs-keyword">target</span> = <span class="hljs-string">&quot;8888&quot;</span><br>输出：-<span class="hljs-number">1</span><br>解释：<br>无法旋转到目标数字且不被锁定。<br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">输入: deadends = [<span class="hljs-string">&quot;0000&quot;</span>], <span class="hljs-keyword">target</span> = <span class="hljs-string">&quot;8888&quot;</span><br>输出：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>死亡列表 <code>deadends</code> 的长度范围为 <code>[1, 500]</code>。</li><li>目标数字 <code>target</code> 不会在 <code>deadends</code> 之中。</li><li>每个 <code>deadends</code> 和 <code>target</code> 中的字符串的数字会在 10,000 个可能的情况 <code>'0000'</code> 到 <code>'9999'</code> 中产生。</li></ol><h3 id="解题思路">解题思路</h3><p>广度优先搜索，从“0000”开始，对每一位进行+1或-1（八种情况）然后入队，如果遇到死亡数字，则不再令他入队。当出现target时，返回步数。</p><h3 id="代码实现">代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//锁+1 &amp;&amp; 需要考虑9重新变为0</span><br><span class="hljs-function">string <span class="hljs-title">plusnum</span><span class="hljs-params">(string str, <span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(str[index] == <span class="hljs-string">&#x27;9&#x27;</span>)<br>        str[index] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        str[index] += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-comment">//锁-1 &amp;&amp; 需要考虑0重新变为9</span><br><span class="hljs-function">string <span class="hljs-title">minusnum</span><span class="hljs-params">(string str, <span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(str[index] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>         str[index] = <span class="hljs-string">&#x27;9&#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        str[index] -= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">openLock</span><span class="hljs-params">(vector&lt;string&gt;&amp; deadends, string target)</span></span>&#123;<br>    <span class="hljs-comment">//定义一个集合存放不能到达的数字，方便使用count来判断是否在集合中</span><br>    unordered_set&lt;string&gt; deadEnds;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i: deadends)  <span class="hljs-comment">//遍历</span><br>        deadEnds.<span class="hljs-built_in">insert</span>(i);<br><br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<span class="hljs-comment">//定义step记录当前步数</span><br>    unordered_set&lt;string&gt; visited; <span class="hljs-comment">//定义visited，记录已经到达过的数字</span><br><br>    queue&lt;string&gt; res;<br>    res.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;0000&quot;</span>);<br><br>    <span class="hljs-keyword">while</span>(!res.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> size = res.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>            string temp = res.<span class="hljs-built_in">front</span>();<br>            res.<span class="hljs-built_in">pop</span>();<br><br>            <span class="hljs-comment">//若为死亡数字，则抛弃后续路径</span><br>            <span class="hljs-keyword">if</span>(deadEnds.<span class="hljs-built_in">count</span>(temp))<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">//若为target。返回当前步数</span><br>            <span class="hljs-keyword">if</span>(temp == target)<br>                <span class="hljs-keyword">return</span> step;<br><br>            <span class="hljs-comment">//遍历八种情况，若没有访问过，就入队</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)&#123;<br>                string up = <span class="hljs-built_in">plusnum</span>(temp,j);<br>                string down = <span class="hljs-built_in">minusnum</span>(temp,j);<br><br>                  <span class="hljs-keyword">if</span>(!visited.<span class="hljs-built_in">count</span>(up))<br>                        &#123;<br>                            res.<span class="hljs-built_in">push</span>(up);<br>                            visited.<span class="hljs-built_in">insert</span>(up);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(!visited.<span class="hljs-built_in">count</span>(down))<br>                        &#123;<br>                            res.<span class="hljs-built_in">push</span>(down);<br>                            visited.<span class="hljs-built_in">insert</span>(down);<br>                        &#125;<br><br>            &#125;<br>        &#125;<br>        ++step;<span class="hljs-comment">//每当把上一次的队列出完后，step+1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br> &#125; <br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>     vector&lt;string&gt; deadends;<br>     <span class="hljs-type">int</span> num;<br>     cout &lt;&lt; <span class="hljs-string">&quot;deadends的数量:&quot;</span> &lt;&lt; endl;<br>     cin &gt;&gt; num;<span class="hljs-comment">// deadends的数量</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;<br>         string temp;<br>         cin&gt;&gt; temp;<br>         deadends.<span class="hljs-built_in">push_back</span>(temp);<br>     &#125;<br>     string target;<br>     cout &lt;&lt; <span class="hljs-string">&quot;target:&quot;</span> &lt;&lt; endl;<br>     cin &gt;&gt; target ;<br>     cout &lt;&lt; <span class="hljs-string">&quot;至少需要&quot;</span> &lt;&lt; <span class="hljs-built_in">openLock</span>(deadends, target) &lt;&lt; <span class="hljs-string">&quot;次&quot;</span> &lt;&lt; endl;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p>[1]https://leetcode-cn.com/problems/open-the-lock/solution/czhi-nan-shen-mei-de-yan-du-you-xian-sou-suo-by-go/</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFS——小岛数量（二）</title>
    <link href="/wuhlan3/2020/10/05/BFS%E2%80%94%E2%80%94%E5%B0%8F%E5%B2%9B%E6%95%B0%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/wuhlan3/2020/10/05/BFS%E2%80%94%E2%80%94%E5%B0%8F%E5%B2%9B%E6%95%B0%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="BFS——小岛数量（二）">BFS——小岛数量（二）</h2><h3 id="题意解析">题意解析</h3><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;]<br>]<br></code></pre></td></tr></table></figure><p><strong>输出: 1</strong></p><p><strong>示例 2:</strong></p><p><strong>输入:</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;]<br>]<br></code></pre></td></tr></table></figure><p><strong>输出: 3</strong><br>解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</p><h3 id="解题思路">解题思路</h3><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 1，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0。直到队列为空，搜索结束。</p><p>最终岛屿的数量就是我们进行广度优先搜索的次数。</p><h3 id="代码实现">代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> nr = grid.<span class="hljs-built_in">size</span>();      <span class="hljs-comment">//行数</span><br>        <span class="hljs-keyword">if</span>(nr == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> nc = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();   <span class="hljs-comment">//列数</span><br><br>        <span class="hljs-type">int</span> num_islands = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; nr; r++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; nc; c++)&#123;<br>                <span class="hljs-comment">// 如果 遍历到某个位置为‘1’， 就进行广度优先搜索（BFS）</span><br>                <span class="hljs-keyword">if</span>(grid[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                    ++num_islands;<br>                    grid[r][c] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; neighbors;    <span class="hljs-comment">//定义一个存放位置的队列</span><br>                    neighbors.<span class="hljs-built_in">push</span>(&#123;r, c&#125;);             <span class="hljs-comment">//放入当前的位置</span><br>                    <span class="hljs-keyword">while</span>(!neighbors.<span class="hljs-built_in">empty</span>())&#123;<br>                        <span class="hljs-keyword">auto</span> rc = neighbors.<span class="hljs-built_in">front</span>();       <span class="hljs-comment">// 取队列头</span><br>                        neighbors.<span class="hljs-built_in">pop</span>();                    <span class="hljs-comment">// 弹出队列头</span><br>                        <span class="hljs-type">int</span> row = rc.first, col = rc.second;    <br>                        <span class="hljs-comment">//对相邻位置进行判断，如果是1，就加入队列</span><br>                        <span class="hljs-keyword">if</span>(row - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[row<span class="hljs-number">-1</span>][col] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            neighbors.<span class="hljs-built_in">push</span>(&#123;row - <span class="hljs-number">1</span>, col&#125;);<br>                            grid[row - <span class="hljs-number">1</span>][col] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(row + <span class="hljs-number">1</span> &lt; nr &amp;&amp; grid[row+<span class="hljs-number">1</span>][col] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            neighbors.<span class="hljs-built_in">push</span>(&#123;row + <span class="hljs-number">1</span>, col&#125;);<br>                            grid[row + <span class="hljs-number">1</span>][col] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(col <span class="hljs-number">-1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[row][col <span class="hljs-number">-1</span> ] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            neighbors.<span class="hljs-built_in">push</span>(&#123;row, col - <span class="hljs-number">1</span>&#125;);<br>                            grid[row][col - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (col + <span class="hljs-number">1</span> &lt; nc &amp;&amp; grid[row][col+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            neighbors.<span class="hljs-built_in">push</span>(&#123;row, col + <span class="hljs-number">1</span>&#125;);<br>                            grid[row][col + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num_islands;<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">char</span>&gt; &gt; grid;<br>    <span class="hljs-type">int</span> row;<br>    <span class="hljs-type">int</span> col;<br>    cin &gt;&gt; row &gt;&gt; col;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; row; ++r)&#123;<br>        vector&lt;<span class="hljs-type">char</span>&gt; temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; col; ++c)&#123;<br>            <span class="hljs-type">char</span> num;<br>            cin &gt;&gt; num;<br>            temp.<span class="hljs-built_in">push_back</span>(num);<br>        &#125;<br>        grid.<span class="hljs-built_in">push_back</span>(temp);<br>    &#125;<br>    <br><br>    cout &lt;&lt; <span class="hljs-string">&quot;岛屿数量为&quot;</span> &lt;&lt; <span class="hljs-built_in">numIslands</span>(grid);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p>[1]https://leetcode-cn.com/problems/number-of-islands</p><p>[2]https://leetcode-cn.com/problems/number-of-islands/solution/po-shi-wu-hua-de-shen-du-you-xian-bian-li-by-shang/</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DFS——小岛数量（一）</title>
    <link href="/wuhlan3/2020/10/04/DFS%E2%80%94%E2%80%94%E5%B0%8F%E5%B2%9B%E6%95%B0%E9%87%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/wuhlan3/2020/10/04/DFS%E2%80%94%E2%80%94%E5%B0%8F%E5%B2%9B%E6%95%B0%E9%87%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="DFS——小岛数量（一）">DFS——小岛数量（一）</h2><h3 id="题意解析">题意解析</h3><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;]<br>]<br></code></pre></td></tr></table></figure><p><strong>输出: 1</strong></p><p><strong>示例 2:</strong></p><p><strong>输入:</strong></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;],<br>[<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;0</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;,<span class="hljs-symbol">&#x27;1</span>&#x27;]<br>]<br></code></pre></td></tr></table></figure><p><strong>输出: 3</strong><br>解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</p><h3 id="解题思路">解题思路</h3><p>深度优先遍历<br>1.遍历整个数组，遇到1，num_islands++，num_islands是记录岛的个数的<br>2.运行一下dfs函数，把这个岛所有陆地给我沉喽，这个岛全部的1变成0<br>3.等把grid全遍历完，grid就全是0了，再把num_islands输出，这个num_islands就是我们记录的岛的个数<br>注意：grid竟然是char类型的，所有1和0都要加单引号哦</p><h3 id="代码实现">代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 深度优先搜索，其中 row,col对应递归所到的位置</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt; &amp;grid, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> rowsize = grid.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> colsize = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>    grid[row][col] = <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">//用以标记已经判断过</span><br>    <span class="hljs-keyword">if</span> (row - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[row - <span class="hljs-number">1</span>][col] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        <span class="hljs-built_in">dfs</span>(grid, row - <span class="hljs-number">1</span>, col);<br>    <span class="hljs-keyword">if</span> (row + <span class="hljs-number">1</span> &lt; rowsize &amp;&amp; grid[row + <span class="hljs-number">1</span>][col] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        <span class="hljs-built_in">dfs</span>(grid, row + <span class="hljs-number">1</span>, col);<br>    <span class="hljs-keyword">if</span> (col - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[row][col - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        <span class="hljs-built_in">dfs</span>(grid, row, col - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (col + <span class="hljs-number">1</span> &lt; colsize &amp;&amp; grid[row][col + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        <span class="hljs-built_in">dfs</span>(grid, row, col + <span class="hljs-number">1</span>);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>    <span class="hljs-type">int</span> rowsize = grid.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span>(rowsize == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> colsize = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>    <br>    <span class="hljs-type">int</span> num_islands = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r&lt; rowsize; r++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c&lt; colsize; c++)&#123;<br>            <span class="hljs-keyword">if</span>(grid[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                ++num_islands; <span class="hljs-comment">//发现1， 岛屿数量+1 ， 并且把岛屿所有的地方通过深度搜索遍历出来</span><br>                <span class="hljs-built_in">dfs</span>(grid, r, c);<br>            &#125;<br>        &#125;<br>    &#125;   <br>         <span class="hljs-keyword">return</span> num_islands;<br>&#125; <br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;vector&lt;<span class="hljs-type">char</span>&gt; &gt; grid;<br>    <span class="hljs-type">int</span> row;<br>    <span class="hljs-type">int</span> col;<br>    cin &gt;&gt; row &gt;&gt; col;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; row; ++r)&#123;<br>        vector&lt;<span class="hljs-type">char</span>&gt; temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; col; ++c)&#123;<br>            <span class="hljs-type">char</span> num;<br>            cin &gt;&gt; num;<br>            temp.<span class="hljs-built_in">push_back</span>(num);<br>        &#125;<br>        grid.<span class="hljs-built_in">push_back</span>(temp);<br>    &#125;<br>    <br><br>    cout &lt;&lt; <span class="hljs-string">&quot;岛屿数量为&quot;</span> &lt;&lt; <span class="hljs-built_in">numIslands</span>(grid);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p>[1]https://leetcode-cn.com/problems/number-of-islands</p><p>[2]https://leetcode-cn.com/problems/number-of-islands/solution/po-shi-wu-hua-de-shen-du-you-xian-bian-li-by-shang/</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过节</title>
    <link href="/wuhlan3/2020/09/29/%E8%BF%87%E8%8A%82/"/>
    <url>/wuhlan3/2020/09/29/%E8%BF%87%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<center><h4>过节</h4></center><center>北岛</center><center>毒蛇炫耀口中的钉子</center><center>大地有著毒蛇</center><center>吞吃鸟蛋的寂静</center><center>所有钟表</center><center>停止在无梦的时刻</center><center>丰收聚敛着</center><center>田野死后的笑容</center><center>从水银的镜子</center><center>影像成双的人们</center><center>乘家庭的轮子</center><center>去集市</center><center>一位本地英雄</center><center>在废弃的停车场上</center><center>唱歌</center><center>玻璃晴朗</center><center>橘子辉煌</center><p><img src="festival.jpg" alt="image-festival"></p><h4 id="第一次">第一次</h4><p>​        看到她的名字，好奇地搜了一下，仅仅是看到“玻璃晴朗，橘子辉煌”两句。对于将两组名词和形容词毫不相关地搭配在一起，顿时觉得有趣。联想到的是，金色的秋天，万里无云的天空泛着清澈的蓝色。阳光穿透玻璃，房间里瞬间明朗起来，桌子上的橘子因阳光闪耀着金黄色。这是<strong>秋天收获的喜悦</strong>，这是<strong>生活的恬淡闲适</strong>，这是<strong>最朴实无华的事物散发出最耀眼的光芒</strong>。</p><h4 id="第二次">第二次</h4><p>​        偶然的机会，再次阅读。发现除了末尾两句外，描写的都是负面的事物。“毒蛇”、“钉子”、“寂静”、“无梦”、“死后”、“废弃”…… 理解能力有限的我，打开知乎看各种点评。标题是《过节》，这是张灯结彩、阖家欢乐的日子。然而，人们仅仅顾着庆祝节日，却忘记了为丰收做出贡献的田野，任由毒蛇的糟蹋，田野只能笑着死去。收获颇丰的人们成群结队地往集市赶去，然而真正的英雄却只能独自一人在废弃的停车场唱歌。透过玻璃看向窗外，一切还是那么晴朗，橘子在外皮的包裹下也依旧辉煌夺目。整首诗构造了一种<strong>表面欢快热闹</strong>、而<strong>背面是被废弃被遗忘的沉寂</strong>。结尾二句，用格外绚丽的色彩，与上文形成对比，更加具有讽刺意味。更有甚者，认为作者将玻璃比作天空，将橘子比作太阳。一切皆为虚幻。</p><h4 id="第三次">第三次</h4><p>​        我一度为大家的偏阴郁的解读而感到难过。毕竟我最先读到的仅仅是“玻璃晴朗，橘子辉煌”二句。思考良久后，我转念一想，诗人在他创作出这样的诗歌，肯定会与他的时代背景、个人经历相联系。但是，当他的诗作为作品广为流传以后，便不再是他的诗了。或许我的想法不够成熟老练，但在这一刻我确实有赋予专属于我自己的理解的权利。光明的背后自然离开不了黑暗，但又凭什么说，我们所看到的光明是就不是真实的呢？我希望做一个极致的“乐观的悲观主义者”，如罗曼罗兰所说的那样&quot;<strong>世界上只有一种真正的英雄主义,那就是认清生活的真相后还依然热爱生活</strong>&quot;；我更愿化身为阻隔阴霾的玻璃，经过过滤的阳光照耀在橘子上，“橘子辉煌”，如常。</p>]]></content>
    
    
    
    <tags>
      
      <tag>不务正业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯——八皇后</title>
    <link href="/wuhlan3/2020/09/29/%E5%9B%9E%E6%BA%AF-%E5%85%AB%E7%9A%87%E5%90%8E/"/>
    <url>/wuhlan3/2020/09/29/%E5%9B%9E%E6%BA%AF-%E5%85%AB%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="回溯——八皇后">回溯——八皇后</h2><h3 id="题意解析">题意解析</h3><p><strong>八皇后问题</strong>（英文：Eight queens），是由国际西洋棋棋手马克斯·贝瑟尔于1848年提出的问题，是==回溯算法==的典型案例。<br>问题表述为：在8×8格的国际象棋上摆放8个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。如果经过±90度、±180度旋转，和对角线对称变换的摆法看成一类，共有42类。计算机发明后，有多种计算机语言可以编程解决此问题。</p><h3 id="解题思路">解题思路</h3><p><strong>二、如何解决八皇后问题？</strong></p><p>所谓递归回溯，本质上是一种枚举法。（我们更愿意称之为“有技巧的枚举”）这种方法从棋盘的第一行开始尝试摆放第一个皇后，摆放成功后，递归一层，再遵循规则在棋盘第二行来摆放第二个皇后。如果当前位置无法摆放，则向右移动一格再次尝试，如果摆放成功，则继续递归一层，摆放第三个皇后…</p><p>如果某一层看遍了所有格子，都无法成功摆放，则回溯到上一个皇后，让上一个皇后右移一格，再进行递归。如果八个皇后都摆放完毕且符合规则，那么就得到了其中一种正确的解法。说起来有些抽象，我们来看一看递归回溯的详细过程。</p><p>1.<strong>第一层</strong>递归，尝试在<strong>第一行</strong>摆放<strong>第一个皇后</strong>：</p><p><img src="1.png" alt="img"></p><p>2.<strong>第二层</strong>递归，尝试在<strong>第二行</strong>摆放<strong>第二个皇后</strong>（前两格被第一个皇后封锁，只能落在第三格）：</p><p><img src="2.png" alt="img"></p><p>3.<strong>第三层</strong>递归，尝试在<strong>第三行</strong>摆放<strong>第三个皇后</strong>（前四格被第一第二个皇后封锁，只能落在第五格）：</p><p><img src="3.png" alt="img"></p><p>4.<strong>第四层</strong>递归，尝试在<strong>第四行</strong>摆放<strong>第四个皇后</strong>（第一格被第二个皇后封锁，只能落在第二格）：</p><p><img src="4.png" alt="img"></p><p>5.<strong>第五层</strong>递归，尝试在<strong>第五行</strong>摆放<strong>第五个皇后</strong>（前三格被前面的皇后封锁，只能落在第四格）：</p><p><img src="5.png" alt="img"></p><p>6.由于所有格子都“绿了”，第六行已经没办法摆放皇后，于是进行回溯，重新摆放<strong>第五个皇后</strong>到<strong>第八格</strong>。：</p><p><img src="6.png" alt="img"></p><p>7.第六行仍然没有办法摆放皇后，第五行也已经尝试遍了，于是回溯到<strong>第四行</strong>，重新摆放<strong>第四个皇后</strong>到<strong>第七格</strong>。：</p><p><img src="7.png" alt="img"></p><p>8.继续摆放第五个皇后，以此类推…</p><h3 id="代码实现">代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ArSize = <span class="hljs-number">8</span>;<span class="hljs-comment">//这个数等于几，就是几皇后。</span><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">bool</span> arr[ArSize][ArSize], <span class="hljs-type">int</span> row)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">bool</span> arr[ArSize][ArSize], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">outPut</span><span class="hljs-params">(<span class="hljs-type">bool</span> arr[ArSize][ArSize])</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> chessboard[ArSize][ArSize];<br>    <span class="hljs-comment">// 数组初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : chessboard)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;j : i)<br>        &#123;<br>            j = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">solve</span>(chessboard, <span class="hljs-number">0</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;八皇后问题共有&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;种解！&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 回溯法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">bool</span> arr[ArSize][ArSize], <span class="hljs-type">int</span> row)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> column = <span class="hljs-number">0</span>; column &lt; ArSize; ++column)<br>    &#123;<br>        arr[row][column] = <span class="hljs-literal">true</span>;        <span class="hljs-comment">//在确定的某一行，遍历每一列放下棋子</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(arr, row, column))    <span class="hljs-comment">//满足条件：1.继续在下一行放下棋子；2.如果是最后一行，输出矩阵</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (row + <span class="hljs-number">1</span> == ArSize)<br>            &#123;<br>                <span class="hljs-built_in">outPut</span>(arr);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">solve</span>(arr, row + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        arr[row][column] = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 判断皇后的落点是否合规</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">bool</span> arr[ArSize][ArSize], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (row == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//第一行不需要判断</span><br>    &#125;<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-comment">// 判断纵向是否有冲突</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[i][column])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    i = row - <span class="hljs-number">1</span>;<br>    j = column - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 判断正斜对角线是否有冲突</span><br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[i][j])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        --i;<br>        --j;<br>    &#125;<br>    i = row - <span class="hljs-number">1</span>;<br>    j = column + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 判断负斜对角线是否有冲突</span><br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt;= ArSize - <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (arr[i][j])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        --i;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">// 打印每种正确的解法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">outPut</span><span class="hljs-params">(<span class="hljs-type">bool</span> arr[ArSize][ArSize])</span></span><br><span class="hljs-function"></span>&#123;<br>    ++num;<br>    cout &lt;&lt; <span class="hljs-string">&quot;**********************&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;*********************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ArSize; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; ArSize; ++j)<br>        &#123;<br>            cout &lt;&lt; arr[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;*********************************************&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考资料">参考资料</h3><p>[1]https://www.cnblogs.com/smile233/p/8483729.html</p><p>[2]https://baike.baidu.com/item/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my_first_article</title>
    <link href="/wuhlan3/2020/09/27/my-first-article/"/>
    <url>/wuhlan3/2020/09/27/my-first-article/</url>
    
    <content type="html"><![CDATA[<p>嘻嘻，博客搭建成功！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
